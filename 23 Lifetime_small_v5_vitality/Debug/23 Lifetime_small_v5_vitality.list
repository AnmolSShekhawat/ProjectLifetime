
23 Lifetime_small_v5_vitality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbb8  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800cc78  0800cc78  0001cc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0c0  0800d0c0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0c0  0800d0c0  0001d0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0c8  0800d0c8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0cc  0800d0cc  0001d0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d0d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000016fc  200001e0  0800d2b0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018dc  0800d2b0  000218dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5a2  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c88  00000000  00000000  0003b7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  0003f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  00040b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8b2  00000000  00000000  00042150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af84  00000000  00000000  0005ea02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2cf7  00000000  00000000  00079986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c67d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e2c  00000000  00000000  0012c6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cc50 	.word	0x0800cc50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800cc50 	.word	0x0800cc50

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0010      	movs	r0, r2
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	0019      	movs	r1, r3
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 ff53 	bl	80020f0 <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fea3 	bl	8001fa0 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 ff45 	bl	80020f0 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 ff3b 	bl	80020f0 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fecb 	bl	8002024 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fec1 	bl	8002024 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_cfrcmple>:
 80002b0:	4684      	mov	ip, r0
 80002b2:	0008      	movs	r0, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7ff      	b.n	80002b8 <__aeabi_cfcmpeq>

080002b8 <__aeabi_cfcmpeq>:
 80002b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ba:	f000 fc77 	bl	8000bac <__lesf2>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d401      	bmi.n	80002c6 <__aeabi_cfcmpeq+0xe>
 80002c2:	2100      	movs	r1, #0
 80002c4:	42c8      	cmn	r0, r1
 80002c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c8 <__aeabi_fcmpeq>:
 80002c8:	b510      	push	{r4, lr}
 80002ca:	f000 fc03 	bl	8000ad4 <__eqsf2>
 80002ce:	4240      	negs	r0, r0
 80002d0:	3001      	adds	r0, #1
 80002d2:	bd10      	pop	{r4, pc}

080002d4 <__aeabi_fcmplt>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fc69 	bl	8000bac <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	db01      	blt.n	80002e2 <__aeabi_fcmplt+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmple>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fc5f 	bl	8000bac <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dd01      	ble.n	80002f6 <__aeabi_fcmple+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpgt>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fc0f 	bl	8000b20 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dc01      	bgt.n	800030a <__aeabi_fcmpgt+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fcmpge>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 fc05 	bl	8000b20 <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	da01      	bge.n	800031e <__aeabi_fcmpge+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__aeabi_uldivmod>:
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <__aeabi_uldivmod+0x28>
 8000328:	2a00      	cmp	r2, #0
 800032a:	d10f      	bne.n	800034c <__aeabi_uldivmod+0x28>
 800032c:	2900      	cmp	r1, #0
 800032e:	d100      	bne.n	8000332 <__aeabi_uldivmod+0xe>
 8000330:	2800      	cmp	r0, #0
 8000332:	d002      	beq.n	800033a <__aeabi_uldivmod+0x16>
 8000334:	2100      	movs	r1, #0
 8000336:	43c9      	mvns	r1, r1
 8000338:	0008      	movs	r0, r1
 800033a:	b407      	push	{r0, r1, r2}
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <__aeabi_uldivmod+0x24>)
 800033e:	a102      	add	r1, pc, #8	; (adr r1, 8000348 <__aeabi_uldivmod+0x24>)
 8000340:	1840      	adds	r0, r0, r1
 8000342:	9002      	str	r0, [sp, #8]
 8000344:	bd03      	pop	{r0, r1, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	fffffee9 	.word	0xfffffee9
 800034c:	b403      	push	{r0, r1}
 800034e:	4668      	mov	r0, sp
 8000350:	b501      	push	{r0, lr}
 8000352:	9802      	ldr	r0, [sp, #8]
 8000354:	f000 f83c 	bl	80003d0 <__udivmoddi4>
 8000358:	9b01      	ldr	r3, [sp, #4]
 800035a:	469e      	mov	lr, r3
 800035c:	b002      	add	sp, #8
 800035e:	bc0c      	pop	{r2, r3}
 8000360:	4770      	bx	lr
 8000362:	46c0      	nop			; (mov r8, r8)

08000364 <__aeabi_f2uiz>:
 8000364:	219e      	movs	r1, #158	; 0x9e
 8000366:	b510      	push	{r4, lr}
 8000368:	05c9      	lsls	r1, r1, #23
 800036a:	1c04      	adds	r4, r0, #0
 800036c:	f7ff ffd0 	bl	8000310 <__aeabi_fcmpge>
 8000370:	2800      	cmp	r0, #0
 8000372:	d103      	bne.n	800037c <__aeabi_f2uiz+0x18>
 8000374:	1c20      	adds	r0, r4, #0
 8000376:	f000 ff31 	bl	80011dc <__aeabi_f2iz>
 800037a:	bd10      	pop	{r4, pc}
 800037c:	219e      	movs	r1, #158	; 0x9e
 800037e:	1c20      	adds	r0, r4, #0
 8000380:	05c9      	lsls	r1, r1, #23
 8000382:	f000 fd7d 	bl	8000e80 <__aeabi_fsub>
 8000386:	f000 ff29 	bl	80011dc <__aeabi_f2iz>
 800038a:	2380      	movs	r3, #128	; 0x80
 800038c:	061b      	lsls	r3, r3, #24
 800038e:	469c      	mov	ip, r3
 8000390:	4460      	add	r0, ip
 8000392:	e7f2      	b.n	800037a <__aeabi_f2uiz+0x16>

08000394 <__aeabi_d2uiz>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	2200      	movs	r2, #0
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <__aeabi_d2uiz+0x38>)
 800039a:	0004      	movs	r4, r0
 800039c:	000d      	movs	r5, r1
 800039e:	f7ff ff7d 	bl	800029c <__aeabi_dcmpge>
 80003a2:	2800      	cmp	r0, #0
 80003a4:	d104      	bne.n	80003b0 <__aeabi_d2uiz+0x1c>
 80003a6:	0020      	movs	r0, r4
 80003a8:	0029      	movs	r1, r5
 80003aa:	f002 fd21 	bl	8002df0 <__aeabi_d2iz>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <__aeabi_d2uiz+0x38>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	0020      	movs	r0, r4
 80003b6:	0029      	movs	r1, r5
 80003b8:	f002 f96a 	bl	8002690 <__aeabi_dsub>
 80003bc:	f002 fd18 	bl	8002df0 <__aeabi_d2iz>
 80003c0:	2380      	movs	r3, #128	; 0x80
 80003c2:	061b      	lsls	r3, r3, #24
 80003c4:	469c      	mov	ip, r3
 80003c6:	4460      	add	r0, ip
 80003c8:	e7f1      	b.n	80003ae <__aeabi_d2uiz+0x1a>
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	41e00000 	.word	0x41e00000

080003d0 <__udivmoddi4>:
 80003d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003d2:	4657      	mov	r7, sl
 80003d4:	464e      	mov	r6, r9
 80003d6:	4645      	mov	r5, r8
 80003d8:	46de      	mov	lr, fp
 80003da:	b5e0      	push	{r5, r6, r7, lr}
 80003dc:	0004      	movs	r4, r0
 80003de:	000d      	movs	r5, r1
 80003e0:	4692      	mov	sl, r2
 80003e2:	4699      	mov	r9, r3
 80003e4:	b083      	sub	sp, #12
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d830      	bhi.n	800044c <__udivmoddi4+0x7c>
 80003ea:	d02d      	beq.n	8000448 <__udivmoddi4+0x78>
 80003ec:	4649      	mov	r1, r9
 80003ee:	4650      	mov	r0, sl
 80003f0:	f002 fe52 	bl	8003098 <__clzdi2>
 80003f4:	0029      	movs	r1, r5
 80003f6:	0006      	movs	r6, r0
 80003f8:	0020      	movs	r0, r4
 80003fa:	f002 fe4d 	bl	8003098 <__clzdi2>
 80003fe:	1a33      	subs	r3, r6, r0
 8000400:	4698      	mov	r8, r3
 8000402:	3b20      	subs	r3, #32
 8000404:	469b      	mov	fp, r3
 8000406:	d433      	bmi.n	8000470 <__udivmoddi4+0xa0>
 8000408:	465a      	mov	r2, fp
 800040a:	4653      	mov	r3, sl
 800040c:	4093      	lsls	r3, r2
 800040e:	4642      	mov	r2, r8
 8000410:	001f      	movs	r7, r3
 8000412:	4653      	mov	r3, sl
 8000414:	4093      	lsls	r3, r2
 8000416:	001e      	movs	r6, r3
 8000418:	42af      	cmp	r7, r5
 800041a:	d83a      	bhi.n	8000492 <__udivmoddi4+0xc2>
 800041c:	42af      	cmp	r7, r5
 800041e:	d100      	bne.n	8000422 <__udivmoddi4+0x52>
 8000420:	e078      	b.n	8000514 <__udivmoddi4+0x144>
 8000422:	465b      	mov	r3, fp
 8000424:	1ba4      	subs	r4, r4, r6
 8000426:	41bd      	sbcs	r5, r7
 8000428:	2b00      	cmp	r3, #0
 800042a:	da00      	bge.n	800042e <__udivmoddi4+0x5e>
 800042c:	e075      	b.n	800051a <__udivmoddi4+0x14a>
 800042e:	2200      	movs	r2, #0
 8000430:	2300      	movs	r3, #0
 8000432:	9200      	str	r2, [sp, #0]
 8000434:	9301      	str	r3, [sp, #4]
 8000436:	2301      	movs	r3, #1
 8000438:	465a      	mov	r2, fp
 800043a:	4093      	lsls	r3, r2
 800043c:	9301      	str	r3, [sp, #4]
 800043e:	2301      	movs	r3, #1
 8000440:	4642      	mov	r2, r8
 8000442:	4093      	lsls	r3, r2
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	e028      	b.n	800049a <__udivmoddi4+0xca>
 8000448:	4282      	cmp	r2, r0
 800044a:	d9cf      	bls.n	80003ec <__udivmoddi4+0x1c>
 800044c:	2200      	movs	r2, #0
 800044e:	2300      	movs	r3, #0
 8000450:	9200      	str	r2, [sp, #0]
 8000452:	9301      	str	r3, [sp, #4]
 8000454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <__udivmoddi4+0x8e>
 800045a:	601c      	str	r4, [r3, #0]
 800045c:	605d      	str	r5, [r3, #4]
 800045e:	9800      	ldr	r0, [sp, #0]
 8000460:	9901      	ldr	r1, [sp, #4]
 8000462:	b003      	add	sp, #12
 8000464:	bcf0      	pop	{r4, r5, r6, r7}
 8000466:	46bb      	mov	fp, r7
 8000468:	46b2      	mov	sl, r6
 800046a:	46a9      	mov	r9, r5
 800046c:	46a0      	mov	r8, r4
 800046e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	1a9b      	subs	r3, r3, r2
 8000476:	4652      	mov	r2, sl
 8000478:	40da      	lsrs	r2, r3
 800047a:	4641      	mov	r1, r8
 800047c:	0013      	movs	r3, r2
 800047e:	464a      	mov	r2, r9
 8000480:	408a      	lsls	r2, r1
 8000482:	0017      	movs	r7, r2
 8000484:	4642      	mov	r2, r8
 8000486:	431f      	orrs	r7, r3
 8000488:	4653      	mov	r3, sl
 800048a:	4093      	lsls	r3, r2
 800048c:	001e      	movs	r6, r3
 800048e:	42af      	cmp	r7, r5
 8000490:	d9c4      	bls.n	800041c <__udivmoddi4+0x4c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	4643      	mov	r3, r8
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0d9      	beq.n	8000454 <__udivmoddi4+0x84>
 80004a0:	07fb      	lsls	r3, r7, #31
 80004a2:	0872      	lsrs	r2, r6, #1
 80004a4:	431a      	orrs	r2, r3
 80004a6:	4646      	mov	r6, r8
 80004a8:	087b      	lsrs	r3, r7, #1
 80004aa:	e00e      	b.n	80004ca <__udivmoddi4+0xfa>
 80004ac:	42ab      	cmp	r3, r5
 80004ae:	d101      	bne.n	80004b4 <__udivmoddi4+0xe4>
 80004b0:	42a2      	cmp	r2, r4
 80004b2:	d80c      	bhi.n	80004ce <__udivmoddi4+0xfe>
 80004b4:	1aa4      	subs	r4, r4, r2
 80004b6:	419d      	sbcs	r5, r3
 80004b8:	2001      	movs	r0, #1
 80004ba:	1924      	adds	r4, r4, r4
 80004bc:	416d      	adcs	r5, r5
 80004be:	2100      	movs	r1, #0
 80004c0:	3e01      	subs	r6, #1
 80004c2:	1824      	adds	r4, r4, r0
 80004c4:	414d      	adcs	r5, r1
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	d006      	beq.n	80004d8 <__udivmoddi4+0x108>
 80004ca:	42ab      	cmp	r3, r5
 80004cc:	d9ee      	bls.n	80004ac <__udivmoddi4+0xdc>
 80004ce:	3e01      	subs	r6, #1
 80004d0:	1924      	adds	r4, r4, r4
 80004d2:	416d      	adcs	r5, r5
 80004d4:	2e00      	cmp	r6, #0
 80004d6:	d1f8      	bne.n	80004ca <__udivmoddi4+0xfa>
 80004d8:	9800      	ldr	r0, [sp, #0]
 80004da:	9901      	ldr	r1, [sp, #4]
 80004dc:	465b      	mov	r3, fp
 80004de:	1900      	adds	r0, r0, r4
 80004e0:	4169      	adcs	r1, r5
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	db24      	blt.n	8000530 <__udivmoddi4+0x160>
 80004e6:	002b      	movs	r3, r5
 80004e8:	465a      	mov	r2, fp
 80004ea:	4644      	mov	r4, r8
 80004ec:	40d3      	lsrs	r3, r2
 80004ee:	002a      	movs	r2, r5
 80004f0:	40e2      	lsrs	r2, r4
 80004f2:	001c      	movs	r4, r3
 80004f4:	465b      	mov	r3, fp
 80004f6:	0015      	movs	r5, r2
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	db2a      	blt.n	8000552 <__udivmoddi4+0x182>
 80004fc:	0026      	movs	r6, r4
 80004fe:	409e      	lsls	r6, r3
 8000500:	0033      	movs	r3, r6
 8000502:	0026      	movs	r6, r4
 8000504:	4647      	mov	r7, r8
 8000506:	40be      	lsls	r6, r7
 8000508:	0032      	movs	r2, r6
 800050a:	1a80      	subs	r0, r0, r2
 800050c:	4199      	sbcs	r1, r3
 800050e:	9000      	str	r0, [sp, #0]
 8000510:	9101      	str	r1, [sp, #4]
 8000512:	e79f      	b.n	8000454 <__udivmoddi4+0x84>
 8000514:	42a3      	cmp	r3, r4
 8000516:	d8bc      	bhi.n	8000492 <__udivmoddi4+0xc2>
 8000518:	e783      	b.n	8000422 <__udivmoddi4+0x52>
 800051a:	4642      	mov	r2, r8
 800051c:	2320      	movs	r3, #32
 800051e:	2100      	movs	r1, #0
 8000520:	1a9b      	subs	r3, r3, r2
 8000522:	2200      	movs	r2, #0
 8000524:	9100      	str	r1, [sp, #0]
 8000526:	9201      	str	r2, [sp, #4]
 8000528:	2201      	movs	r2, #1
 800052a:	40da      	lsrs	r2, r3
 800052c:	9201      	str	r2, [sp, #4]
 800052e:	e786      	b.n	800043e <__udivmoddi4+0x6e>
 8000530:	4642      	mov	r2, r8
 8000532:	2320      	movs	r3, #32
 8000534:	1a9b      	subs	r3, r3, r2
 8000536:	002a      	movs	r2, r5
 8000538:	4646      	mov	r6, r8
 800053a:	409a      	lsls	r2, r3
 800053c:	0023      	movs	r3, r4
 800053e:	40f3      	lsrs	r3, r6
 8000540:	4644      	mov	r4, r8
 8000542:	4313      	orrs	r3, r2
 8000544:	002a      	movs	r2, r5
 8000546:	40e2      	lsrs	r2, r4
 8000548:	001c      	movs	r4, r3
 800054a:	465b      	mov	r3, fp
 800054c:	0015      	movs	r5, r2
 800054e:	2b00      	cmp	r3, #0
 8000550:	dad4      	bge.n	80004fc <__udivmoddi4+0x12c>
 8000552:	4642      	mov	r2, r8
 8000554:	002f      	movs	r7, r5
 8000556:	2320      	movs	r3, #32
 8000558:	0026      	movs	r6, r4
 800055a:	4097      	lsls	r7, r2
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	40de      	lsrs	r6, r3
 8000560:	003b      	movs	r3, r7
 8000562:	4333      	orrs	r3, r6
 8000564:	e7cd      	b.n	8000502 <__udivmoddi4+0x132>
 8000566:	46c0      	nop			; (mov r8, r8)

08000568 <__aeabi_fadd>:
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	46c6      	mov	lr, r8
 800056c:	0243      	lsls	r3, r0, #9
 800056e:	0a5b      	lsrs	r3, r3, #9
 8000570:	024e      	lsls	r6, r1, #9
 8000572:	0045      	lsls	r5, r0, #1
 8000574:	004f      	lsls	r7, r1, #1
 8000576:	00da      	lsls	r2, r3, #3
 8000578:	0fc4      	lsrs	r4, r0, #31
 800057a:	469c      	mov	ip, r3
 800057c:	0a70      	lsrs	r0, r6, #9
 800057e:	4690      	mov	r8, r2
 8000580:	b500      	push	{lr}
 8000582:	0e2d      	lsrs	r5, r5, #24
 8000584:	0e3f      	lsrs	r7, r7, #24
 8000586:	0fc9      	lsrs	r1, r1, #31
 8000588:	09b6      	lsrs	r6, r6, #6
 800058a:	428c      	cmp	r4, r1
 800058c:	d04b      	beq.n	8000626 <__aeabi_fadd+0xbe>
 800058e:	1bea      	subs	r2, r5, r7
 8000590:	2a00      	cmp	r2, #0
 8000592:	dd36      	ble.n	8000602 <__aeabi_fadd+0x9a>
 8000594:	2f00      	cmp	r7, #0
 8000596:	d061      	beq.n	800065c <__aeabi_fadd+0xf4>
 8000598:	2dff      	cmp	r5, #255	; 0xff
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x36>
 800059c:	e0ad      	b.n	80006fa <__aeabi_fadd+0x192>
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	04db      	lsls	r3, r3, #19
 80005a2:	431e      	orrs	r6, r3
 80005a4:	2a1b      	cmp	r2, #27
 80005a6:	dc00      	bgt.n	80005aa <__aeabi_fadd+0x42>
 80005a8:	e0d3      	b.n	8000752 <__aeabi_fadd+0x1ea>
 80005aa:	2001      	movs	r0, #1
 80005ac:	4643      	mov	r3, r8
 80005ae:	1a18      	subs	r0, r3, r0
 80005b0:	0143      	lsls	r3, r0, #5
 80005b2:	d400      	bmi.n	80005b6 <__aeabi_fadd+0x4e>
 80005b4:	e08c      	b.n	80006d0 <__aeabi_fadd+0x168>
 80005b6:	0180      	lsls	r0, r0, #6
 80005b8:	0987      	lsrs	r7, r0, #6
 80005ba:	0038      	movs	r0, r7
 80005bc:	f002 fd4e 	bl	800305c <__clzsi2>
 80005c0:	3805      	subs	r0, #5
 80005c2:	4087      	lsls	r7, r0
 80005c4:	4285      	cmp	r5, r0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_fadd+0x62>
 80005c8:	e0b6      	b.n	8000738 <__aeabi_fadd+0x1d0>
 80005ca:	1a2d      	subs	r5, r5, r0
 80005cc:	48b3      	ldr	r0, [pc, #716]	; (800089c <__aeabi_fadd+0x334>)
 80005ce:	4038      	ands	r0, r7
 80005d0:	0743      	lsls	r3, r0, #29
 80005d2:	d004      	beq.n	80005de <__aeabi_fadd+0x76>
 80005d4:	230f      	movs	r3, #15
 80005d6:	4003      	ands	r3, r0
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d000      	beq.n	80005de <__aeabi_fadd+0x76>
 80005dc:	3004      	adds	r0, #4
 80005de:	0143      	lsls	r3, r0, #5
 80005e0:	d400      	bmi.n	80005e4 <__aeabi_fadd+0x7c>
 80005e2:	e078      	b.n	80006d6 <__aeabi_fadd+0x16e>
 80005e4:	1c6a      	adds	r2, r5, #1
 80005e6:	2dfe      	cmp	r5, #254	; 0xfe
 80005e8:	d065      	beq.n	80006b6 <__aeabi_fadd+0x14e>
 80005ea:	0180      	lsls	r0, r0, #6
 80005ec:	0a43      	lsrs	r3, r0, #9
 80005ee:	469c      	mov	ip, r3
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	4663      	mov	r3, ip
 80005f4:	05d0      	lsls	r0, r2, #23
 80005f6:	4318      	orrs	r0, r3
 80005f8:	07e4      	lsls	r4, r4, #31
 80005fa:	4320      	orrs	r0, r4
 80005fc:	bc80      	pop	{r7}
 80005fe:	46b8      	mov	r8, r7
 8000600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000602:	2a00      	cmp	r2, #0
 8000604:	d035      	beq.n	8000672 <__aeabi_fadd+0x10a>
 8000606:	1b7a      	subs	r2, r7, r5
 8000608:	2d00      	cmp	r5, #0
 800060a:	d000      	beq.n	800060e <__aeabi_fadd+0xa6>
 800060c:	e0af      	b.n	800076e <__aeabi_fadd+0x206>
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0xae>
 8000614:	e0a7      	b.n	8000766 <__aeabi_fadd+0x1fe>
 8000616:	1e53      	subs	r3, r2, #1
 8000618:	2a01      	cmp	r2, #1
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0xb6>
 800061c:	e12f      	b.n	800087e <__aeabi_fadd+0x316>
 800061e:	2aff      	cmp	r2, #255	; 0xff
 8000620:	d069      	beq.n	80006f6 <__aeabi_fadd+0x18e>
 8000622:	001a      	movs	r2, r3
 8000624:	e0aa      	b.n	800077c <__aeabi_fadd+0x214>
 8000626:	1be9      	subs	r1, r5, r7
 8000628:	2900      	cmp	r1, #0
 800062a:	dd70      	ble.n	800070e <__aeabi_fadd+0x1a6>
 800062c:	2f00      	cmp	r7, #0
 800062e:	d037      	beq.n	80006a0 <__aeabi_fadd+0x138>
 8000630:	2dff      	cmp	r5, #255	; 0xff
 8000632:	d062      	beq.n	80006fa <__aeabi_fadd+0x192>
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	04db      	lsls	r3, r3, #19
 8000638:	431e      	orrs	r6, r3
 800063a:	291b      	cmp	r1, #27
 800063c:	dc00      	bgt.n	8000640 <__aeabi_fadd+0xd8>
 800063e:	e0b0      	b.n	80007a2 <__aeabi_fadd+0x23a>
 8000640:	2001      	movs	r0, #1
 8000642:	4440      	add	r0, r8
 8000644:	0143      	lsls	r3, r0, #5
 8000646:	d543      	bpl.n	80006d0 <__aeabi_fadd+0x168>
 8000648:	3501      	adds	r5, #1
 800064a:	2dff      	cmp	r5, #255	; 0xff
 800064c:	d033      	beq.n	80006b6 <__aeabi_fadd+0x14e>
 800064e:	2301      	movs	r3, #1
 8000650:	4a93      	ldr	r2, [pc, #588]	; (80008a0 <__aeabi_fadd+0x338>)
 8000652:	4003      	ands	r3, r0
 8000654:	0840      	lsrs	r0, r0, #1
 8000656:	4010      	ands	r0, r2
 8000658:	4318      	orrs	r0, r3
 800065a:	e7b9      	b.n	80005d0 <__aeabi_fadd+0x68>
 800065c:	2e00      	cmp	r6, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0xfa>
 8000660:	e083      	b.n	800076a <__aeabi_fadd+0x202>
 8000662:	1e51      	subs	r1, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x102>
 8000668:	e0d8      	b.n	800081c <__aeabi_fadd+0x2b4>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d045      	beq.n	80006fa <__aeabi_fadd+0x192>
 800066e:	000a      	movs	r2, r1
 8000670:	e798      	b.n	80005a4 <__aeabi_fadd+0x3c>
 8000672:	27fe      	movs	r7, #254	; 0xfe
 8000674:	1c6a      	adds	r2, r5, #1
 8000676:	4217      	tst	r7, r2
 8000678:	d000      	beq.n	800067c <__aeabi_fadd+0x114>
 800067a:	e086      	b.n	800078a <__aeabi_fadd+0x222>
 800067c:	2d00      	cmp	r5, #0
 800067e:	d000      	beq.n	8000682 <__aeabi_fadd+0x11a>
 8000680:	e0b7      	b.n	80007f2 <__aeabi_fadd+0x28a>
 8000682:	4643      	mov	r3, r8
 8000684:	2b00      	cmp	r3, #0
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x122>
 8000688:	e0f3      	b.n	8000872 <__aeabi_fadd+0x30a>
 800068a:	2200      	movs	r2, #0
 800068c:	2e00      	cmp	r6, #0
 800068e:	d0b0      	beq.n	80005f2 <__aeabi_fadd+0x8a>
 8000690:	1b98      	subs	r0, r3, r6
 8000692:	0143      	lsls	r3, r0, #5
 8000694:	d400      	bmi.n	8000698 <__aeabi_fadd+0x130>
 8000696:	e0fa      	b.n	800088e <__aeabi_fadd+0x326>
 8000698:	4643      	mov	r3, r8
 800069a:	000c      	movs	r4, r1
 800069c:	1af0      	subs	r0, r6, r3
 800069e:	e797      	b.n	80005d0 <__aeabi_fadd+0x68>
 80006a0:	2e00      	cmp	r6, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x13e>
 80006a4:	e0c8      	b.n	8000838 <__aeabi_fadd+0x2d0>
 80006a6:	1e4a      	subs	r2, r1, #1
 80006a8:	2901      	cmp	r1, #1
 80006aa:	d100      	bne.n	80006ae <__aeabi_fadd+0x146>
 80006ac:	e0ae      	b.n	800080c <__aeabi_fadd+0x2a4>
 80006ae:	29ff      	cmp	r1, #255	; 0xff
 80006b0:	d023      	beq.n	80006fa <__aeabi_fadd+0x192>
 80006b2:	0011      	movs	r1, r2
 80006b4:	e7c1      	b.n	800063a <__aeabi_fadd+0xd2>
 80006b6:	2300      	movs	r3, #0
 80006b8:	22ff      	movs	r2, #255	; 0xff
 80006ba:	469c      	mov	ip, r3
 80006bc:	e799      	b.n	80005f2 <__aeabi_fadd+0x8a>
 80006be:	21fe      	movs	r1, #254	; 0xfe
 80006c0:	1c6a      	adds	r2, r5, #1
 80006c2:	4211      	tst	r1, r2
 80006c4:	d077      	beq.n	80007b6 <__aeabi_fadd+0x24e>
 80006c6:	2aff      	cmp	r2, #255	; 0xff
 80006c8:	d0f5      	beq.n	80006b6 <__aeabi_fadd+0x14e>
 80006ca:	0015      	movs	r5, r2
 80006cc:	4446      	add	r6, r8
 80006ce:	0870      	lsrs	r0, r6, #1
 80006d0:	0743      	lsls	r3, r0, #29
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fadd+0x16e>
 80006d4:	e77e      	b.n	80005d4 <__aeabi_fadd+0x6c>
 80006d6:	08c3      	lsrs	r3, r0, #3
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d00e      	beq.n	80006fa <__aeabi_fadd+0x192>
 80006dc:	025b      	lsls	r3, r3, #9
 80006de:	0a5b      	lsrs	r3, r3, #9
 80006e0:	469c      	mov	ip, r3
 80006e2:	b2ea      	uxtb	r2, r5
 80006e4:	e785      	b.n	80005f2 <__aeabi_fadd+0x8a>
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d007      	beq.n	80006fa <__aeabi_fadd+0x192>
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	03d2      	lsls	r2, r2, #15
 80006ee:	4213      	tst	r3, r2
 80006f0:	d003      	beq.n	80006fa <__aeabi_fadd+0x192>
 80006f2:	4210      	tst	r0, r2
 80006f4:	d101      	bne.n	80006fa <__aeabi_fadd+0x192>
 80006f6:	000c      	movs	r4, r1
 80006f8:	0003      	movs	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0db      	beq.n	80006b6 <__aeabi_fadd+0x14e>
 80006fe:	2080      	movs	r0, #128	; 0x80
 8000700:	03c0      	lsls	r0, r0, #15
 8000702:	4318      	orrs	r0, r3
 8000704:	0240      	lsls	r0, r0, #9
 8000706:	0a43      	lsrs	r3, r0, #9
 8000708:	469c      	mov	ip, r3
 800070a:	22ff      	movs	r2, #255	; 0xff
 800070c:	e771      	b.n	80005f2 <__aeabi_fadd+0x8a>
 800070e:	2900      	cmp	r1, #0
 8000710:	d0d5      	beq.n	80006be <__aeabi_fadd+0x156>
 8000712:	1b7a      	subs	r2, r7, r5
 8000714:	2d00      	cmp	r5, #0
 8000716:	d160      	bne.n	80007da <__aeabi_fadd+0x272>
 8000718:	4643      	mov	r3, r8
 800071a:	2b00      	cmp	r3, #0
 800071c:	d024      	beq.n	8000768 <__aeabi_fadd+0x200>
 800071e:	1e53      	subs	r3, r2, #1
 8000720:	2a01      	cmp	r2, #1
 8000722:	d073      	beq.n	800080c <__aeabi_fadd+0x2a4>
 8000724:	2aff      	cmp	r2, #255	; 0xff
 8000726:	d0e7      	beq.n	80006f8 <__aeabi_fadd+0x190>
 8000728:	001a      	movs	r2, r3
 800072a:	2a1b      	cmp	r2, #27
 800072c:	dc00      	bgt.n	8000730 <__aeabi_fadd+0x1c8>
 800072e:	e085      	b.n	800083c <__aeabi_fadd+0x2d4>
 8000730:	2001      	movs	r0, #1
 8000732:	003d      	movs	r5, r7
 8000734:	1980      	adds	r0, r0, r6
 8000736:	e785      	b.n	8000644 <__aeabi_fadd+0xdc>
 8000738:	2320      	movs	r3, #32
 800073a:	003a      	movs	r2, r7
 800073c:	1b45      	subs	r5, r0, r5
 800073e:	0038      	movs	r0, r7
 8000740:	3501      	adds	r5, #1
 8000742:	40ea      	lsrs	r2, r5
 8000744:	1b5d      	subs	r5, r3, r5
 8000746:	40a8      	lsls	r0, r5
 8000748:	1e43      	subs	r3, r0, #1
 800074a:	4198      	sbcs	r0, r3
 800074c:	2500      	movs	r5, #0
 800074e:	4310      	orrs	r0, r2
 8000750:	e73e      	b.n	80005d0 <__aeabi_fadd+0x68>
 8000752:	2320      	movs	r3, #32
 8000754:	0030      	movs	r0, r6
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	0031      	movs	r1, r6
 800075a:	4098      	lsls	r0, r3
 800075c:	40d1      	lsrs	r1, r2
 800075e:	1e43      	subs	r3, r0, #1
 8000760:	4198      	sbcs	r0, r3
 8000762:	4308      	orrs	r0, r1
 8000764:	e722      	b.n	80005ac <__aeabi_fadd+0x44>
 8000766:	000c      	movs	r4, r1
 8000768:	0003      	movs	r3, r0
 800076a:	0015      	movs	r5, r2
 800076c:	e7b4      	b.n	80006d8 <__aeabi_fadd+0x170>
 800076e:	2fff      	cmp	r7, #255	; 0xff
 8000770:	d0c1      	beq.n	80006f6 <__aeabi_fadd+0x18e>
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	4640      	mov	r0, r8
 8000776:	04db      	lsls	r3, r3, #19
 8000778:	4318      	orrs	r0, r3
 800077a:	4680      	mov	r8, r0
 800077c:	2a1b      	cmp	r2, #27
 800077e:	dd51      	ble.n	8000824 <__aeabi_fadd+0x2bc>
 8000780:	2001      	movs	r0, #1
 8000782:	000c      	movs	r4, r1
 8000784:	003d      	movs	r5, r7
 8000786:	1a30      	subs	r0, r6, r0
 8000788:	e712      	b.n	80005b0 <__aeabi_fadd+0x48>
 800078a:	4643      	mov	r3, r8
 800078c:	1b9f      	subs	r7, r3, r6
 800078e:	017b      	lsls	r3, r7, #5
 8000790:	d42b      	bmi.n	80007ea <__aeabi_fadd+0x282>
 8000792:	2f00      	cmp	r7, #0
 8000794:	d000      	beq.n	8000798 <__aeabi_fadd+0x230>
 8000796:	e710      	b.n	80005ba <__aeabi_fadd+0x52>
 8000798:	2300      	movs	r3, #0
 800079a:	2400      	movs	r4, #0
 800079c:	2200      	movs	r2, #0
 800079e:	469c      	mov	ip, r3
 80007a0:	e727      	b.n	80005f2 <__aeabi_fadd+0x8a>
 80007a2:	2320      	movs	r3, #32
 80007a4:	0032      	movs	r2, r6
 80007a6:	0030      	movs	r0, r6
 80007a8:	40ca      	lsrs	r2, r1
 80007aa:	1a59      	subs	r1, r3, r1
 80007ac:	4088      	lsls	r0, r1
 80007ae:	1e43      	subs	r3, r0, #1
 80007b0:	4198      	sbcs	r0, r3
 80007b2:	4310      	orrs	r0, r2
 80007b4:	e745      	b.n	8000642 <__aeabi_fadd+0xda>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d14a      	bne.n	8000850 <__aeabi_fadd+0x2e8>
 80007ba:	4643      	mov	r3, r8
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d063      	beq.n	8000888 <__aeabi_fadd+0x320>
 80007c0:	2200      	movs	r2, #0
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x260>
 80007c6:	e714      	b.n	80005f2 <__aeabi_fadd+0x8a>
 80007c8:	0030      	movs	r0, r6
 80007ca:	4440      	add	r0, r8
 80007cc:	0143      	lsls	r3, r0, #5
 80007ce:	d400      	bmi.n	80007d2 <__aeabi_fadd+0x26a>
 80007d0:	e77e      	b.n	80006d0 <__aeabi_fadd+0x168>
 80007d2:	4b32      	ldr	r3, [pc, #200]	; (800089c <__aeabi_fadd+0x334>)
 80007d4:	3501      	adds	r5, #1
 80007d6:	4018      	ands	r0, r3
 80007d8:	e77a      	b.n	80006d0 <__aeabi_fadd+0x168>
 80007da:	2fff      	cmp	r7, #255	; 0xff
 80007dc:	d08c      	beq.n	80006f8 <__aeabi_fadd+0x190>
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	4641      	mov	r1, r8
 80007e2:	04db      	lsls	r3, r3, #19
 80007e4:	4319      	orrs	r1, r3
 80007e6:	4688      	mov	r8, r1
 80007e8:	e79f      	b.n	800072a <__aeabi_fadd+0x1c2>
 80007ea:	4643      	mov	r3, r8
 80007ec:	000c      	movs	r4, r1
 80007ee:	1af7      	subs	r7, r6, r3
 80007f0:	e6e3      	b.n	80005ba <__aeabi_fadd+0x52>
 80007f2:	4642      	mov	r2, r8
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_fadd+0x292>
 80007f8:	e775      	b.n	80006e6 <__aeabi_fadd+0x17e>
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d000      	beq.n	8000800 <__aeabi_fadd+0x298>
 80007fe:	e77a      	b.n	80006f6 <__aeabi_fadd+0x18e>
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	03db      	lsls	r3, r3, #15
 8000804:	2400      	movs	r4, #0
 8000806:	469c      	mov	ip, r3
 8000808:	22ff      	movs	r2, #255	; 0xff
 800080a:	e6f2      	b.n	80005f2 <__aeabi_fadd+0x8a>
 800080c:	0030      	movs	r0, r6
 800080e:	4440      	add	r0, r8
 8000810:	2501      	movs	r5, #1
 8000812:	0143      	lsls	r3, r0, #5
 8000814:	d400      	bmi.n	8000818 <__aeabi_fadd+0x2b0>
 8000816:	e75b      	b.n	80006d0 <__aeabi_fadd+0x168>
 8000818:	2502      	movs	r5, #2
 800081a:	e718      	b.n	800064e <__aeabi_fadd+0xe6>
 800081c:	4643      	mov	r3, r8
 800081e:	2501      	movs	r5, #1
 8000820:	1b98      	subs	r0, r3, r6
 8000822:	e6c5      	b.n	80005b0 <__aeabi_fadd+0x48>
 8000824:	2320      	movs	r3, #32
 8000826:	4644      	mov	r4, r8
 8000828:	4640      	mov	r0, r8
 800082a:	40d4      	lsrs	r4, r2
 800082c:	1a9a      	subs	r2, r3, r2
 800082e:	4090      	lsls	r0, r2
 8000830:	1e43      	subs	r3, r0, #1
 8000832:	4198      	sbcs	r0, r3
 8000834:	4320      	orrs	r0, r4
 8000836:	e7a4      	b.n	8000782 <__aeabi_fadd+0x21a>
 8000838:	000d      	movs	r5, r1
 800083a:	e74d      	b.n	80006d8 <__aeabi_fadd+0x170>
 800083c:	2320      	movs	r3, #32
 800083e:	4641      	mov	r1, r8
 8000840:	4640      	mov	r0, r8
 8000842:	40d1      	lsrs	r1, r2
 8000844:	1a9a      	subs	r2, r3, r2
 8000846:	4090      	lsls	r0, r2
 8000848:	1e43      	subs	r3, r0, #1
 800084a:	4198      	sbcs	r0, r3
 800084c:	4308      	orrs	r0, r1
 800084e:	e770      	b.n	8000732 <__aeabi_fadd+0x1ca>
 8000850:	4642      	mov	r2, r8
 8000852:	2a00      	cmp	r2, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x2f0>
 8000856:	e74f      	b.n	80006f8 <__aeabi_fadd+0x190>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d100      	bne.n	800085e <__aeabi_fadd+0x2f6>
 800085c:	e74d      	b.n	80006fa <__aeabi_fadd+0x192>
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	03d2      	lsls	r2, r2, #15
 8000862:	4213      	tst	r3, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_fadd+0x300>
 8000866:	e748      	b.n	80006fa <__aeabi_fadd+0x192>
 8000868:	4210      	tst	r0, r2
 800086a:	d000      	beq.n	800086e <__aeabi_fadd+0x306>
 800086c:	e745      	b.n	80006fa <__aeabi_fadd+0x192>
 800086e:	0003      	movs	r3, r0
 8000870:	e743      	b.n	80006fa <__aeabi_fadd+0x192>
 8000872:	2e00      	cmp	r6, #0
 8000874:	d090      	beq.n	8000798 <__aeabi_fadd+0x230>
 8000876:	000c      	movs	r4, r1
 8000878:	4684      	mov	ip, r0
 800087a:	2200      	movs	r2, #0
 800087c:	e6b9      	b.n	80005f2 <__aeabi_fadd+0x8a>
 800087e:	4643      	mov	r3, r8
 8000880:	000c      	movs	r4, r1
 8000882:	1af0      	subs	r0, r6, r3
 8000884:	3501      	adds	r5, #1
 8000886:	e693      	b.n	80005b0 <__aeabi_fadd+0x48>
 8000888:	4684      	mov	ip, r0
 800088a:	2200      	movs	r2, #0
 800088c:	e6b1      	b.n	80005f2 <__aeabi_fadd+0x8a>
 800088e:	2800      	cmp	r0, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x32c>
 8000892:	e71d      	b.n	80006d0 <__aeabi_fadd+0x168>
 8000894:	2300      	movs	r3, #0
 8000896:	2400      	movs	r4, #0
 8000898:	469c      	mov	ip, r3
 800089a:	e6aa      	b.n	80005f2 <__aeabi_fadd+0x8a>
 800089c:	fbffffff 	.word	0xfbffffff
 80008a0:	7dffffff 	.word	0x7dffffff

080008a4 <__aeabi_fdiv>:
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	464f      	mov	r7, r9
 80008a8:	4646      	mov	r6, r8
 80008aa:	46d6      	mov	lr, sl
 80008ac:	0245      	lsls	r5, r0, #9
 80008ae:	b5c0      	push	{r6, r7, lr}
 80008b0:	0047      	lsls	r7, r0, #1
 80008b2:	1c0c      	adds	r4, r1, #0
 80008b4:	0a6d      	lsrs	r5, r5, #9
 80008b6:	0e3f      	lsrs	r7, r7, #24
 80008b8:	0fc6      	lsrs	r6, r0, #31
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fdiv+0x1c>
 80008be:	e070      	b.n	80009a2 <__aeabi_fdiv+0xfe>
 80008c0:	2fff      	cmp	r7, #255	; 0xff
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fdiv+0x22>
 80008c4:	e075      	b.n	80009b2 <__aeabi_fdiv+0x10e>
 80008c6:	00eb      	lsls	r3, r5, #3
 80008c8:	2580      	movs	r5, #128	; 0x80
 80008ca:	04ed      	lsls	r5, r5, #19
 80008cc:	431d      	orrs	r5, r3
 80008ce:	2300      	movs	r3, #0
 80008d0:	4699      	mov	r9, r3
 80008d2:	469a      	mov	sl, r3
 80008d4:	3f7f      	subs	r7, #127	; 0x7f
 80008d6:	0260      	lsls	r0, r4, #9
 80008d8:	0a43      	lsrs	r3, r0, #9
 80008da:	4698      	mov	r8, r3
 80008dc:	0063      	lsls	r3, r4, #1
 80008de:	0e1b      	lsrs	r3, r3, #24
 80008e0:	0fe4      	lsrs	r4, r4, #31
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d04e      	beq.n	8000984 <__aeabi_fdiv+0xe0>
 80008e6:	2bff      	cmp	r3, #255	; 0xff
 80008e8:	d046      	beq.n	8000978 <__aeabi_fdiv+0xd4>
 80008ea:	4642      	mov	r2, r8
 80008ec:	00d0      	lsls	r0, r2, #3
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	04d2      	lsls	r2, r2, #19
 80008f2:	4302      	orrs	r2, r0
 80008f4:	4690      	mov	r8, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	3b7f      	subs	r3, #127	; 0x7f
 80008fa:	0031      	movs	r1, r6
 80008fc:	1aff      	subs	r7, r7, r3
 80008fe:	464b      	mov	r3, r9
 8000900:	4061      	eors	r1, r4
 8000902:	b2c9      	uxtb	r1, r1
 8000904:	4313      	orrs	r3, r2
 8000906:	2b0f      	cmp	r3, #15
 8000908:	d900      	bls.n	800090c <__aeabi_fdiv+0x68>
 800090a:	e0b5      	b.n	8000a78 <__aeabi_fdiv+0x1d4>
 800090c:	486e      	ldr	r0, [pc, #440]	; (8000ac8 <__aeabi_fdiv+0x224>)
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	58c3      	ldr	r3, [r0, r3]
 8000912:	469f      	mov	pc, r3
 8000914:	2300      	movs	r3, #0
 8000916:	4698      	mov	r8, r3
 8000918:	0026      	movs	r6, r4
 800091a:	4645      	mov	r5, r8
 800091c:	4692      	mov	sl, r2
 800091e:	4653      	mov	r3, sl
 8000920:	2b02      	cmp	r3, #2
 8000922:	d100      	bne.n	8000926 <__aeabi_fdiv+0x82>
 8000924:	e089      	b.n	8000a3a <__aeabi_fdiv+0x196>
 8000926:	2b03      	cmp	r3, #3
 8000928:	d100      	bne.n	800092c <__aeabi_fdiv+0x88>
 800092a:	e09e      	b.n	8000a6a <__aeabi_fdiv+0x1c6>
 800092c:	2b01      	cmp	r3, #1
 800092e:	d018      	beq.n	8000962 <__aeabi_fdiv+0xbe>
 8000930:	003b      	movs	r3, r7
 8000932:	337f      	adds	r3, #127	; 0x7f
 8000934:	2b00      	cmp	r3, #0
 8000936:	dd69      	ble.n	8000a0c <__aeabi_fdiv+0x168>
 8000938:	076a      	lsls	r2, r5, #29
 800093a:	d004      	beq.n	8000946 <__aeabi_fdiv+0xa2>
 800093c:	220f      	movs	r2, #15
 800093e:	402a      	ands	r2, r5
 8000940:	2a04      	cmp	r2, #4
 8000942:	d000      	beq.n	8000946 <__aeabi_fdiv+0xa2>
 8000944:	3504      	adds	r5, #4
 8000946:	012a      	lsls	r2, r5, #4
 8000948:	d503      	bpl.n	8000952 <__aeabi_fdiv+0xae>
 800094a:	4b60      	ldr	r3, [pc, #384]	; (8000acc <__aeabi_fdiv+0x228>)
 800094c:	401d      	ands	r5, r3
 800094e:	003b      	movs	r3, r7
 8000950:	3380      	adds	r3, #128	; 0x80
 8000952:	2bfe      	cmp	r3, #254	; 0xfe
 8000954:	dd00      	ble.n	8000958 <__aeabi_fdiv+0xb4>
 8000956:	e070      	b.n	8000a3a <__aeabi_fdiv+0x196>
 8000958:	01ad      	lsls	r5, r5, #6
 800095a:	0a6d      	lsrs	r5, r5, #9
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	e002      	b.n	8000966 <__aeabi_fdiv+0xc2>
 8000960:	000e      	movs	r6, r1
 8000962:	2000      	movs	r0, #0
 8000964:	2500      	movs	r5, #0
 8000966:	05c0      	lsls	r0, r0, #23
 8000968:	4328      	orrs	r0, r5
 800096a:	07f6      	lsls	r6, r6, #31
 800096c:	4330      	orrs	r0, r6
 800096e:	bce0      	pop	{r5, r6, r7}
 8000970:	46ba      	mov	sl, r7
 8000972:	46b1      	mov	r9, r6
 8000974:	46a8      	mov	r8, r5
 8000976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000978:	4643      	mov	r3, r8
 800097a:	2b00      	cmp	r3, #0
 800097c:	d13f      	bne.n	80009fe <__aeabi_fdiv+0x15a>
 800097e:	2202      	movs	r2, #2
 8000980:	3fff      	subs	r7, #255	; 0xff
 8000982:	e003      	b.n	800098c <__aeabi_fdiv+0xe8>
 8000984:	4643      	mov	r3, r8
 8000986:	2b00      	cmp	r3, #0
 8000988:	d12d      	bne.n	80009e6 <__aeabi_fdiv+0x142>
 800098a:	2201      	movs	r2, #1
 800098c:	0031      	movs	r1, r6
 800098e:	464b      	mov	r3, r9
 8000990:	4061      	eors	r1, r4
 8000992:	b2c9      	uxtb	r1, r1
 8000994:	4313      	orrs	r3, r2
 8000996:	2b0f      	cmp	r3, #15
 8000998:	d834      	bhi.n	8000a04 <__aeabi_fdiv+0x160>
 800099a:	484d      	ldr	r0, [pc, #308]	; (8000ad0 <__aeabi_fdiv+0x22c>)
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	58c3      	ldr	r3, [r0, r3]
 80009a0:	469f      	mov	pc, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d113      	bne.n	80009ce <__aeabi_fdiv+0x12a>
 80009a6:	2304      	movs	r3, #4
 80009a8:	4699      	mov	r9, r3
 80009aa:	3b03      	subs	r3, #3
 80009ac:	2700      	movs	r7, #0
 80009ae:	469a      	mov	sl, r3
 80009b0:	e791      	b.n	80008d6 <__aeabi_fdiv+0x32>
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d105      	bne.n	80009c2 <__aeabi_fdiv+0x11e>
 80009b6:	2308      	movs	r3, #8
 80009b8:	4699      	mov	r9, r3
 80009ba:	3b06      	subs	r3, #6
 80009bc:	27ff      	movs	r7, #255	; 0xff
 80009be:	469a      	mov	sl, r3
 80009c0:	e789      	b.n	80008d6 <__aeabi_fdiv+0x32>
 80009c2:	230c      	movs	r3, #12
 80009c4:	4699      	mov	r9, r3
 80009c6:	3b09      	subs	r3, #9
 80009c8:	27ff      	movs	r7, #255	; 0xff
 80009ca:	469a      	mov	sl, r3
 80009cc:	e783      	b.n	80008d6 <__aeabi_fdiv+0x32>
 80009ce:	0028      	movs	r0, r5
 80009d0:	f002 fb44 	bl	800305c <__clzsi2>
 80009d4:	2776      	movs	r7, #118	; 0x76
 80009d6:	1f43      	subs	r3, r0, #5
 80009d8:	409d      	lsls	r5, r3
 80009da:	2300      	movs	r3, #0
 80009dc:	427f      	negs	r7, r7
 80009de:	4699      	mov	r9, r3
 80009e0:	469a      	mov	sl, r3
 80009e2:	1a3f      	subs	r7, r7, r0
 80009e4:	e777      	b.n	80008d6 <__aeabi_fdiv+0x32>
 80009e6:	4640      	mov	r0, r8
 80009e8:	f002 fb38 	bl	800305c <__clzsi2>
 80009ec:	4642      	mov	r2, r8
 80009ee:	1f43      	subs	r3, r0, #5
 80009f0:	409a      	lsls	r2, r3
 80009f2:	2376      	movs	r3, #118	; 0x76
 80009f4:	425b      	negs	r3, r3
 80009f6:	4690      	mov	r8, r2
 80009f8:	1a1b      	subs	r3, r3, r0
 80009fa:	2200      	movs	r2, #0
 80009fc:	e77d      	b.n	80008fa <__aeabi_fdiv+0x56>
 80009fe:	23ff      	movs	r3, #255	; 0xff
 8000a00:	2203      	movs	r2, #3
 8000a02:	e77a      	b.n	80008fa <__aeabi_fdiv+0x56>
 8000a04:	000e      	movs	r6, r1
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	2500      	movs	r5, #0
 8000a0a:	e7ac      	b.n	8000966 <__aeabi_fdiv+0xc2>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	1ac0      	subs	r0, r0, r3
 8000a10:	281b      	cmp	r0, #27
 8000a12:	dca6      	bgt.n	8000962 <__aeabi_fdiv+0xbe>
 8000a14:	379e      	adds	r7, #158	; 0x9e
 8000a16:	002a      	movs	r2, r5
 8000a18:	40bd      	lsls	r5, r7
 8000a1a:	40c2      	lsrs	r2, r0
 8000a1c:	1e6b      	subs	r3, r5, #1
 8000a1e:	419d      	sbcs	r5, r3
 8000a20:	4315      	orrs	r5, r2
 8000a22:	076b      	lsls	r3, r5, #29
 8000a24:	d004      	beq.n	8000a30 <__aeabi_fdiv+0x18c>
 8000a26:	230f      	movs	r3, #15
 8000a28:	402b      	ands	r3, r5
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_fdiv+0x18c>
 8000a2e:	3504      	adds	r5, #4
 8000a30:	016b      	lsls	r3, r5, #5
 8000a32:	d544      	bpl.n	8000abe <__aeabi_fdiv+0x21a>
 8000a34:	2001      	movs	r0, #1
 8000a36:	2500      	movs	r5, #0
 8000a38:	e795      	b.n	8000966 <__aeabi_fdiv+0xc2>
 8000a3a:	20ff      	movs	r0, #255	; 0xff
 8000a3c:	2500      	movs	r5, #0
 8000a3e:	e792      	b.n	8000966 <__aeabi_fdiv+0xc2>
 8000a40:	2580      	movs	r5, #128	; 0x80
 8000a42:	2600      	movs	r6, #0
 8000a44:	20ff      	movs	r0, #255	; 0xff
 8000a46:	03ed      	lsls	r5, r5, #15
 8000a48:	e78d      	b.n	8000966 <__aeabi_fdiv+0xc2>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4698      	mov	r8, r3
 8000a4e:	2080      	movs	r0, #128	; 0x80
 8000a50:	03c0      	lsls	r0, r0, #15
 8000a52:	4205      	tst	r5, r0
 8000a54:	d009      	beq.n	8000a6a <__aeabi_fdiv+0x1c6>
 8000a56:	4643      	mov	r3, r8
 8000a58:	4203      	tst	r3, r0
 8000a5a:	d106      	bne.n	8000a6a <__aeabi_fdiv+0x1c6>
 8000a5c:	4645      	mov	r5, r8
 8000a5e:	4305      	orrs	r5, r0
 8000a60:	026d      	lsls	r5, r5, #9
 8000a62:	0026      	movs	r6, r4
 8000a64:	20ff      	movs	r0, #255	; 0xff
 8000a66:	0a6d      	lsrs	r5, r5, #9
 8000a68:	e77d      	b.n	8000966 <__aeabi_fdiv+0xc2>
 8000a6a:	2080      	movs	r0, #128	; 0x80
 8000a6c:	03c0      	lsls	r0, r0, #15
 8000a6e:	4305      	orrs	r5, r0
 8000a70:	026d      	lsls	r5, r5, #9
 8000a72:	20ff      	movs	r0, #255	; 0xff
 8000a74:	0a6d      	lsrs	r5, r5, #9
 8000a76:	e776      	b.n	8000966 <__aeabi_fdiv+0xc2>
 8000a78:	4642      	mov	r2, r8
 8000a7a:	016b      	lsls	r3, r5, #5
 8000a7c:	0150      	lsls	r0, r2, #5
 8000a7e:	4283      	cmp	r3, r0
 8000a80:	d219      	bcs.n	8000ab6 <__aeabi_fdiv+0x212>
 8000a82:	221b      	movs	r2, #27
 8000a84:	2500      	movs	r5, #0
 8000a86:	3f01      	subs	r7, #1
 8000a88:	2601      	movs	r6, #1
 8000a8a:	001c      	movs	r4, r3
 8000a8c:	006d      	lsls	r5, r5, #1
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	db01      	blt.n	8000a98 <__aeabi_fdiv+0x1f4>
 8000a94:	4298      	cmp	r0, r3
 8000a96:	d801      	bhi.n	8000a9c <__aeabi_fdiv+0x1f8>
 8000a98:	1a1b      	subs	r3, r3, r0
 8000a9a:	4335      	orrs	r5, r6
 8000a9c:	3a01      	subs	r2, #1
 8000a9e:	2a00      	cmp	r2, #0
 8000aa0:	d1f3      	bne.n	8000a8a <__aeabi_fdiv+0x1e6>
 8000aa2:	1e5a      	subs	r2, r3, #1
 8000aa4:	4193      	sbcs	r3, r2
 8000aa6:	431d      	orrs	r5, r3
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	337f      	adds	r3, #127	; 0x7f
 8000aac:	000e      	movs	r6, r1
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	dd00      	ble.n	8000ab4 <__aeabi_fdiv+0x210>
 8000ab2:	e741      	b.n	8000938 <__aeabi_fdiv+0x94>
 8000ab4:	e7aa      	b.n	8000a0c <__aeabi_fdiv+0x168>
 8000ab6:	221a      	movs	r2, #26
 8000ab8:	2501      	movs	r5, #1
 8000aba:	1a1b      	subs	r3, r3, r0
 8000abc:	e7e4      	b.n	8000a88 <__aeabi_fdiv+0x1e4>
 8000abe:	01ad      	lsls	r5, r5, #6
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	0a6d      	lsrs	r5, r5, #9
 8000ac4:	e74f      	b.n	8000966 <__aeabi_fdiv+0xc2>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	0800cd80 	.word	0x0800cd80
 8000acc:	f7ffffff 	.word	0xf7ffffff
 8000ad0:	0800cdc0 	.word	0x0800cdc0

08000ad4 <__eqsf2>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0245      	lsls	r5, r0, #9
 8000ada:	024e      	lsls	r6, r1, #9
 8000adc:	004c      	lsls	r4, r1, #1
 8000ade:	0fc3      	lsrs	r3, r0, #31
 8000ae0:	0a6d      	lsrs	r5, r5, #9
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	0e12      	lsrs	r2, r2, #24
 8000ae6:	0a76      	lsrs	r6, r6, #9
 8000ae8:	0e24      	lsrs	r4, r4, #24
 8000aea:	0fc9      	lsrs	r1, r1, #31
 8000aec:	2aff      	cmp	r2, #255	; 0xff
 8000aee:	d006      	beq.n	8000afe <__eqsf2+0x2a>
 8000af0:	2cff      	cmp	r4, #255	; 0xff
 8000af2:	d003      	beq.n	8000afc <__eqsf2+0x28>
 8000af4:	42a2      	cmp	r2, r4
 8000af6:	d101      	bne.n	8000afc <__eqsf2+0x28>
 8000af8:	42b5      	cmp	r5, r6
 8000afa:	d006      	beq.n	8000b0a <__eqsf2+0x36>
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d1fc      	bne.n	8000afc <__eqsf2+0x28>
 8000b02:	2cff      	cmp	r4, #255	; 0xff
 8000b04:	d1fa      	bne.n	8000afc <__eqsf2+0x28>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d1f8      	bne.n	8000afc <__eqsf2+0x28>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d006      	beq.n	8000b1c <__eqsf2+0x48>
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	d1f3      	bne.n	8000afc <__eqsf2+0x28>
 8000b14:	0028      	movs	r0, r5
 8000b16:	1e43      	subs	r3, r0, #1
 8000b18:	4198      	sbcs	r0, r3
 8000b1a:	e7ef      	b.n	8000afc <__eqsf2+0x28>
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e7ed      	b.n	8000afc <__eqsf2+0x28>

08000b20 <__gesf2>:
 8000b20:	b570      	push	{r4, r5, r6, lr}
 8000b22:	0042      	lsls	r2, r0, #1
 8000b24:	0245      	lsls	r5, r0, #9
 8000b26:	024e      	lsls	r6, r1, #9
 8000b28:	004c      	lsls	r4, r1, #1
 8000b2a:	0fc3      	lsrs	r3, r0, #31
 8000b2c:	0a6d      	lsrs	r5, r5, #9
 8000b2e:	0e12      	lsrs	r2, r2, #24
 8000b30:	0a76      	lsrs	r6, r6, #9
 8000b32:	0e24      	lsrs	r4, r4, #24
 8000b34:	0fc8      	lsrs	r0, r1, #31
 8000b36:	2aff      	cmp	r2, #255	; 0xff
 8000b38:	d01b      	beq.n	8000b72 <__gesf2+0x52>
 8000b3a:	2cff      	cmp	r4, #255	; 0xff
 8000b3c:	d00e      	beq.n	8000b5c <__gesf2+0x3c>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d11b      	bne.n	8000b7a <__gesf2+0x5a>
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	d101      	bne.n	8000b4a <__gesf2+0x2a>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d01c      	beq.n	8000b84 <__gesf2+0x64>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d00c      	beq.n	8000b68 <__gesf2+0x48>
 8000b4e:	4283      	cmp	r3, r0
 8000b50:	d01c      	beq.n	8000b8c <__gesf2+0x6c>
 8000b52:	2102      	movs	r1, #2
 8000b54:	1e58      	subs	r0, r3, #1
 8000b56:	4008      	ands	r0, r1
 8000b58:	3801      	subs	r0, #1
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d122      	bne.n	8000ba6 <__gesf2+0x86>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	d1f4      	bne.n	8000b4e <__gesf2+0x2e>
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d1f2      	bne.n	8000b4e <__gesf2+0x2e>
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d1f6      	bne.n	8000b5a <__gesf2+0x3a>
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	4240      	negs	r0, r0
 8000b70:	e7f3      	b.n	8000b5a <__gesf2+0x3a>
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d117      	bne.n	8000ba6 <__gesf2+0x86>
 8000b76:	2cff      	cmp	r4, #255	; 0xff
 8000b78:	d0f0      	beq.n	8000b5c <__gesf2+0x3c>
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d1e7      	bne.n	8000b4e <__gesf2+0x2e>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d1e5      	bne.n	8000b4e <__gesf2+0x2e>
 8000b82:	e7e6      	b.n	8000b52 <__gesf2+0x32>
 8000b84:	2000      	movs	r0, #0
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d0e7      	beq.n	8000b5a <__gesf2+0x3a>
 8000b8a:	e7e2      	b.n	8000b52 <__gesf2+0x32>
 8000b8c:	42a2      	cmp	r2, r4
 8000b8e:	dc05      	bgt.n	8000b9c <__gesf2+0x7c>
 8000b90:	dbea      	blt.n	8000b68 <__gesf2+0x48>
 8000b92:	42b5      	cmp	r5, r6
 8000b94:	d802      	bhi.n	8000b9c <__gesf2+0x7c>
 8000b96:	d3e7      	bcc.n	8000b68 <__gesf2+0x48>
 8000b98:	2000      	movs	r0, #0
 8000b9a:	e7de      	b.n	8000b5a <__gesf2+0x3a>
 8000b9c:	4243      	negs	r3, r0
 8000b9e:	4158      	adcs	r0, r3
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	3801      	subs	r0, #1
 8000ba4:	e7d9      	b.n	8000b5a <__gesf2+0x3a>
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	4240      	negs	r0, r0
 8000baa:	e7d6      	b.n	8000b5a <__gesf2+0x3a>

08000bac <__lesf2>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0042      	lsls	r2, r0, #1
 8000bb0:	0245      	lsls	r5, r0, #9
 8000bb2:	024e      	lsls	r6, r1, #9
 8000bb4:	004c      	lsls	r4, r1, #1
 8000bb6:	0fc3      	lsrs	r3, r0, #31
 8000bb8:	0a6d      	lsrs	r5, r5, #9
 8000bba:	0e12      	lsrs	r2, r2, #24
 8000bbc:	0a76      	lsrs	r6, r6, #9
 8000bbe:	0e24      	lsrs	r4, r4, #24
 8000bc0:	0fc8      	lsrs	r0, r1, #31
 8000bc2:	2aff      	cmp	r2, #255	; 0xff
 8000bc4:	d00b      	beq.n	8000bde <__lesf2+0x32>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d00d      	beq.n	8000be6 <__lesf2+0x3a>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d11f      	bne.n	8000c0e <__lesf2+0x62>
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d116      	bne.n	8000c00 <__lesf2+0x54>
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d114      	bne.n	8000c00 <__lesf2+0x54>
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d010      	beq.n	8000bfe <__lesf2+0x52>
 8000bdc:	e009      	b.n	8000bf2 <__lesf2+0x46>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d10c      	bne.n	8000bfc <__lesf2+0x50>
 8000be2:	2cff      	cmp	r4, #255	; 0xff
 8000be4:	d113      	bne.n	8000c0e <__lesf2+0x62>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d108      	bne.n	8000bfc <__lesf2+0x50>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d008      	beq.n	8000c00 <__lesf2+0x54>
 8000bee:	4283      	cmp	r3, r0
 8000bf0:	d012      	beq.n	8000c18 <__lesf2+0x6c>
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	1e58      	subs	r0, r3, #1
 8000bf6:	4008      	ands	r0, r1
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	e000      	b.n	8000bfe <__lesf2+0x52>
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f4      	bne.n	8000bee <__lesf2+0x42>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1fa      	bne.n	8000bfe <__lesf2+0x52>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f7      	b.n	8000bfe <__lesf2+0x52>
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d1ed      	bne.n	8000bee <__lesf2+0x42>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d1eb      	bne.n	8000bee <__lesf2+0x42>
 8000c16:	e7ec      	b.n	8000bf2 <__lesf2+0x46>
 8000c18:	42a2      	cmp	r2, r4
 8000c1a:	dc05      	bgt.n	8000c28 <__lesf2+0x7c>
 8000c1c:	dbf2      	blt.n	8000c04 <__lesf2+0x58>
 8000c1e:	42b5      	cmp	r5, r6
 8000c20:	d802      	bhi.n	8000c28 <__lesf2+0x7c>
 8000c22:	d3ef      	bcc.n	8000c04 <__lesf2+0x58>
 8000c24:	2000      	movs	r0, #0
 8000c26:	e7ea      	b.n	8000bfe <__lesf2+0x52>
 8000c28:	4243      	negs	r3, r0
 8000c2a:	4158      	adcs	r0, r3
 8000c2c:	0040      	lsls	r0, r0, #1
 8000c2e:	3801      	subs	r0, #1
 8000c30:	e7e5      	b.n	8000bfe <__lesf2+0x52>
 8000c32:	46c0      	nop			; (mov r8, r8)

08000c34 <__aeabi_fmul>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	464f      	mov	r7, r9
 8000c38:	4646      	mov	r6, r8
 8000c3a:	46d6      	mov	lr, sl
 8000c3c:	0244      	lsls	r4, r0, #9
 8000c3e:	0045      	lsls	r5, r0, #1
 8000c40:	b5c0      	push	{r6, r7, lr}
 8000c42:	0a64      	lsrs	r4, r4, #9
 8000c44:	1c0f      	adds	r7, r1, #0
 8000c46:	0e2d      	lsrs	r5, r5, #24
 8000c48:	0fc6      	lsrs	r6, r0, #31
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fmul+0x1c>
 8000c4e:	e08d      	b.n	8000d6c <__aeabi_fmul+0x138>
 8000c50:	2dff      	cmp	r5, #255	; 0xff
 8000c52:	d100      	bne.n	8000c56 <__aeabi_fmul+0x22>
 8000c54:	e092      	b.n	8000d7c <__aeabi_fmul+0x148>
 8000c56:	2300      	movs	r3, #0
 8000c58:	2080      	movs	r0, #128	; 0x80
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	00e4      	lsls	r4, r4, #3
 8000c60:	04c0      	lsls	r0, r0, #19
 8000c62:	4304      	orrs	r4, r0
 8000c64:	3d7f      	subs	r5, #127	; 0x7f
 8000c66:	0278      	lsls	r0, r7, #9
 8000c68:	0a43      	lsrs	r3, r0, #9
 8000c6a:	4698      	mov	r8, r3
 8000c6c:	007b      	lsls	r3, r7, #1
 8000c6e:	0e1b      	lsrs	r3, r3, #24
 8000c70:	0fff      	lsrs	r7, r7, #31
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d100      	bne.n	8000c78 <__aeabi_fmul+0x44>
 8000c76:	e070      	b.n	8000d5a <__aeabi_fmul+0x126>
 8000c78:	2bff      	cmp	r3, #255	; 0xff
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_fmul+0x4a>
 8000c7c:	e086      	b.n	8000d8c <__aeabi_fmul+0x158>
 8000c7e:	4642      	mov	r2, r8
 8000c80:	00d0      	lsls	r0, r2, #3
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	3b7f      	subs	r3, #127	; 0x7f
 8000c86:	18ed      	adds	r5, r5, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	04d2      	lsls	r2, r2, #19
 8000c8c:	4302      	orrs	r2, r0
 8000c8e:	4690      	mov	r8, r2
 8000c90:	469c      	mov	ip, r3
 8000c92:	0031      	movs	r1, r6
 8000c94:	464b      	mov	r3, r9
 8000c96:	4079      	eors	r1, r7
 8000c98:	1c68      	adds	r0, r5, #1
 8000c9a:	2b0f      	cmp	r3, #15
 8000c9c:	d81c      	bhi.n	8000cd8 <__aeabi_fmul+0xa4>
 8000c9e:	4a76      	ldr	r2, [pc, #472]	; (8000e78 <__aeabi_fmul+0x244>)
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	58d3      	ldr	r3, [r2, r3]
 8000ca4:	469f      	mov	pc, r3
 8000ca6:	0039      	movs	r1, r7
 8000ca8:	4644      	mov	r4, r8
 8000caa:	46e2      	mov	sl, ip
 8000cac:	4653      	mov	r3, sl
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d00f      	beq.n	8000cd2 <__aeabi_fmul+0x9e>
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fmul+0x84>
 8000cb6:	e0d7      	b.n	8000e68 <__aeabi_fmul+0x234>
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d137      	bne.n	8000d2c <__aeabi_fmul+0xf8>
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	05c0      	lsls	r0, r0, #23
 8000cc2:	4320      	orrs	r0, r4
 8000cc4:	07c9      	lsls	r1, r1, #31
 8000cc6:	4308      	orrs	r0, r1
 8000cc8:	bce0      	pop	{r5, r6, r7}
 8000cca:	46ba      	mov	sl, r7
 8000ccc:	46b1      	mov	r9, r6
 8000cce:	46a8      	mov	r8, r5
 8000cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd2:	20ff      	movs	r0, #255	; 0xff
 8000cd4:	2400      	movs	r4, #0
 8000cd6:	e7f3      	b.n	8000cc0 <__aeabi_fmul+0x8c>
 8000cd8:	0c26      	lsrs	r6, r4, #16
 8000cda:	0424      	lsls	r4, r4, #16
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	4644      	mov	r4, r8
 8000ce0:	0424      	lsls	r4, r4, #16
 8000ce2:	0c24      	lsrs	r4, r4, #16
 8000ce4:	4643      	mov	r3, r8
 8000ce6:	0027      	movs	r7, r4
 8000ce8:	0c1b      	lsrs	r3, r3, #16
 8000cea:	4357      	muls	r7, r2
 8000cec:	4374      	muls	r4, r6
 8000cee:	435a      	muls	r2, r3
 8000cf0:	435e      	muls	r6, r3
 8000cf2:	1912      	adds	r2, r2, r4
 8000cf4:	0c3b      	lsrs	r3, r7, #16
 8000cf6:	189b      	adds	r3, r3, r2
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	d903      	bls.n	8000d04 <__aeabi_fmul+0xd0>
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	0252      	lsls	r2, r2, #9
 8000d00:	4694      	mov	ip, r2
 8000d02:	4466      	add	r6, ip
 8000d04:	043f      	lsls	r7, r7, #16
 8000d06:	041a      	lsls	r2, r3, #16
 8000d08:	0c3f      	lsrs	r7, r7, #16
 8000d0a:	19d2      	adds	r2, r2, r7
 8000d0c:	0194      	lsls	r4, r2, #6
 8000d0e:	1e67      	subs	r7, r4, #1
 8000d10:	41bc      	sbcs	r4, r7
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	0e92      	lsrs	r2, r2, #26
 8000d16:	199b      	adds	r3, r3, r6
 8000d18:	4314      	orrs	r4, r2
 8000d1a:	019b      	lsls	r3, r3, #6
 8000d1c:	431c      	orrs	r4, r3
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	d400      	bmi.n	8000d24 <__aeabi_fmul+0xf0>
 8000d22:	e09b      	b.n	8000e5c <__aeabi_fmul+0x228>
 8000d24:	2301      	movs	r3, #1
 8000d26:	0862      	lsrs	r2, r4, #1
 8000d28:	401c      	ands	r4, r3
 8000d2a:	4314      	orrs	r4, r2
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	327f      	adds	r2, #127	; 0x7f
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	dd64      	ble.n	8000dfe <__aeabi_fmul+0x1ca>
 8000d34:	0763      	lsls	r3, r4, #29
 8000d36:	d004      	beq.n	8000d42 <__aeabi_fmul+0x10e>
 8000d38:	230f      	movs	r3, #15
 8000d3a:	4023      	ands	r3, r4
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_fmul+0x10e>
 8000d40:	3404      	adds	r4, #4
 8000d42:	0123      	lsls	r3, r4, #4
 8000d44:	d503      	bpl.n	8000d4e <__aeabi_fmul+0x11a>
 8000d46:	0002      	movs	r2, r0
 8000d48:	4b4c      	ldr	r3, [pc, #304]	; (8000e7c <__aeabi_fmul+0x248>)
 8000d4a:	3280      	adds	r2, #128	; 0x80
 8000d4c:	401c      	ands	r4, r3
 8000d4e:	2afe      	cmp	r2, #254	; 0xfe
 8000d50:	dcbf      	bgt.n	8000cd2 <__aeabi_fmul+0x9e>
 8000d52:	01a4      	lsls	r4, r4, #6
 8000d54:	0a64      	lsrs	r4, r4, #9
 8000d56:	b2d0      	uxtb	r0, r2
 8000d58:	e7b2      	b.n	8000cc0 <__aeabi_fmul+0x8c>
 8000d5a:	4643      	mov	r3, r8
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d13d      	bne.n	8000ddc <__aeabi_fmul+0x1a8>
 8000d60:	464a      	mov	r2, r9
 8000d62:	3301      	adds	r3, #1
 8000d64:	431a      	orrs	r2, r3
 8000d66:	4691      	mov	r9, r2
 8000d68:	469c      	mov	ip, r3
 8000d6a:	e792      	b.n	8000c92 <__aeabi_fmul+0x5e>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d129      	bne.n	8000dc4 <__aeabi_fmul+0x190>
 8000d70:	2304      	movs	r3, #4
 8000d72:	4699      	mov	r9, r3
 8000d74:	3b03      	subs	r3, #3
 8000d76:	2500      	movs	r5, #0
 8000d78:	469a      	mov	sl, r3
 8000d7a:	e774      	b.n	8000c66 <__aeabi_fmul+0x32>
 8000d7c:	2c00      	cmp	r4, #0
 8000d7e:	d11b      	bne.n	8000db8 <__aeabi_fmul+0x184>
 8000d80:	2308      	movs	r3, #8
 8000d82:	4699      	mov	r9, r3
 8000d84:	3b06      	subs	r3, #6
 8000d86:	25ff      	movs	r5, #255	; 0xff
 8000d88:	469a      	mov	sl, r3
 8000d8a:	e76c      	b.n	8000c66 <__aeabi_fmul+0x32>
 8000d8c:	4643      	mov	r3, r8
 8000d8e:	35ff      	adds	r5, #255	; 0xff
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10b      	bne.n	8000dac <__aeabi_fmul+0x178>
 8000d94:	2302      	movs	r3, #2
 8000d96:	464a      	mov	r2, r9
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	4691      	mov	r9, r2
 8000d9c:	469c      	mov	ip, r3
 8000d9e:	e778      	b.n	8000c92 <__aeabi_fmul+0x5e>
 8000da0:	4653      	mov	r3, sl
 8000da2:	0031      	movs	r1, r6
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d000      	beq.n	8000daa <__aeabi_fmul+0x176>
 8000da8:	e783      	b.n	8000cb2 <__aeabi_fmul+0x7e>
 8000daa:	e792      	b.n	8000cd2 <__aeabi_fmul+0x9e>
 8000dac:	2303      	movs	r3, #3
 8000dae:	464a      	mov	r2, r9
 8000db0:	431a      	orrs	r2, r3
 8000db2:	4691      	mov	r9, r2
 8000db4:	469c      	mov	ip, r3
 8000db6:	e76c      	b.n	8000c92 <__aeabi_fmul+0x5e>
 8000db8:	230c      	movs	r3, #12
 8000dba:	4699      	mov	r9, r3
 8000dbc:	3b09      	subs	r3, #9
 8000dbe:	25ff      	movs	r5, #255	; 0xff
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	e750      	b.n	8000c66 <__aeabi_fmul+0x32>
 8000dc4:	0020      	movs	r0, r4
 8000dc6:	f002 f949 	bl	800305c <__clzsi2>
 8000dca:	2576      	movs	r5, #118	; 0x76
 8000dcc:	1f43      	subs	r3, r0, #5
 8000dce:	409c      	lsls	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	426d      	negs	r5, r5
 8000dd4:	4699      	mov	r9, r3
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	1a2d      	subs	r5, r5, r0
 8000dda:	e744      	b.n	8000c66 <__aeabi_fmul+0x32>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	f002 f93d 	bl	800305c <__clzsi2>
 8000de2:	4642      	mov	r2, r8
 8000de4:	1f43      	subs	r3, r0, #5
 8000de6:	409a      	lsls	r2, r3
 8000de8:	2300      	movs	r3, #0
 8000dea:	1a2d      	subs	r5, r5, r0
 8000dec:	4690      	mov	r8, r2
 8000dee:	469c      	mov	ip, r3
 8000df0:	3d76      	subs	r5, #118	; 0x76
 8000df2:	e74e      	b.n	8000c92 <__aeabi_fmul+0x5e>
 8000df4:	2480      	movs	r4, #128	; 0x80
 8000df6:	2100      	movs	r1, #0
 8000df8:	20ff      	movs	r0, #255	; 0xff
 8000dfa:	03e4      	lsls	r4, r4, #15
 8000dfc:	e760      	b.n	8000cc0 <__aeabi_fmul+0x8c>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	1a9b      	subs	r3, r3, r2
 8000e02:	2b1b      	cmp	r3, #27
 8000e04:	dd00      	ble.n	8000e08 <__aeabi_fmul+0x1d4>
 8000e06:	e759      	b.n	8000cbc <__aeabi_fmul+0x88>
 8000e08:	0022      	movs	r2, r4
 8000e0a:	309e      	adds	r0, #158	; 0x9e
 8000e0c:	40da      	lsrs	r2, r3
 8000e0e:	4084      	lsls	r4, r0
 8000e10:	0013      	movs	r3, r2
 8000e12:	1e62      	subs	r2, r4, #1
 8000e14:	4194      	sbcs	r4, r2
 8000e16:	431c      	orrs	r4, r3
 8000e18:	0763      	lsls	r3, r4, #29
 8000e1a:	d004      	beq.n	8000e26 <__aeabi_fmul+0x1f2>
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	4023      	ands	r3, r4
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d000      	beq.n	8000e26 <__aeabi_fmul+0x1f2>
 8000e24:	3404      	adds	r4, #4
 8000e26:	0163      	lsls	r3, r4, #5
 8000e28:	d51a      	bpl.n	8000e60 <__aeabi_fmul+0x22c>
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2400      	movs	r4, #0
 8000e2e:	e747      	b.n	8000cc0 <__aeabi_fmul+0x8c>
 8000e30:	2080      	movs	r0, #128	; 0x80
 8000e32:	03c0      	lsls	r0, r0, #15
 8000e34:	4204      	tst	r4, r0
 8000e36:	d009      	beq.n	8000e4c <__aeabi_fmul+0x218>
 8000e38:	4643      	mov	r3, r8
 8000e3a:	4203      	tst	r3, r0
 8000e3c:	d106      	bne.n	8000e4c <__aeabi_fmul+0x218>
 8000e3e:	4644      	mov	r4, r8
 8000e40:	4304      	orrs	r4, r0
 8000e42:	0264      	lsls	r4, r4, #9
 8000e44:	0039      	movs	r1, r7
 8000e46:	20ff      	movs	r0, #255	; 0xff
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	e739      	b.n	8000cc0 <__aeabi_fmul+0x8c>
 8000e4c:	2080      	movs	r0, #128	; 0x80
 8000e4e:	03c0      	lsls	r0, r0, #15
 8000e50:	4304      	orrs	r4, r0
 8000e52:	0264      	lsls	r4, r4, #9
 8000e54:	0031      	movs	r1, r6
 8000e56:	20ff      	movs	r0, #255	; 0xff
 8000e58:	0a64      	lsrs	r4, r4, #9
 8000e5a:	e731      	b.n	8000cc0 <__aeabi_fmul+0x8c>
 8000e5c:	0028      	movs	r0, r5
 8000e5e:	e765      	b.n	8000d2c <__aeabi_fmul+0xf8>
 8000e60:	01a4      	lsls	r4, r4, #6
 8000e62:	2000      	movs	r0, #0
 8000e64:	0a64      	lsrs	r4, r4, #9
 8000e66:	e72b      	b.n	8000cc0 <__aeabi_fmul+0x8c>
 8000e68:	2080      	movs	r0, #128	; 0x80
 8000e6a:	03c0      	lsls	r0, r0, #15
 8000e6c:	4304      	orrs	r4, r0
 8000e6e:	0264      	lsls	r4, r4, #9
 8000e70:	20ff      	movs	r0, #255	; 0xff
 8000e72:	0a64      	lsrs	r4, r4, #9
 8000e74:	e724      	b.n	8000cc0 <__aeabi_fmul+0x8c>
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	0800ce00 	.word	0x0800ce00
 8000e7c:	f7ffffff 	.word	0xf7ffffff

08000e80 <__aeabi_fsub>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	46ce      	mov	lr, r9
 8000e84:	4647      	mov	r7, r8
 8000e86:	0243      	lsls	r3, r0, #9
 8000e88:	0a5b      	lsrs	r3, r3, #9
 8000e8a:	024e      	lsls	r6, r1, #9
 8000e8c:	00da      	lsls	r2, r3, #3
 8000e8e:	4694      	mov	ip, r2
 8000e90:	0a72      	lsrs	r2, r6, #9
 8000e92:	4691      	mov	r9, r2
 8000e94:	0045      	lsls	r5, r0, #1
 8000e96:	004a      	lsls	r2, r1, #1
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	0e2d      	lsrs	r5, r5, #24
 8000e9c:	001f      	movs	r7, r3
 8000e9e:	0fc4      	lsrs	r4, r0, #31
 8000ea0:	0e12      	lsrs	r2, r2, #24
 8000ea2:	0fc9      	lsrs	r1, r1, #31
 8000ea4:	09b6      	lsrs	r6, r6, #6
 8000ea6:	2aff      	cmp	r2, #255	; 0xff
 8000ea8:	d05b      	beq.n	8000f62 <__aeabi_fsub+0xe2>
 8000eaa:	2001      	movs	r0, #1
 8000eac:	4041      	eors	r1, r0
 8000eae:	428c      	cmp	r4, r1
 8000eb0:	d039      	beq.n	8000f26 <__aeabi_fsub+0xa6>
 8000eb2:	1aa8      	subs	r0, r5, r2
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	dd5a      	ble.n	8000f6e <__aeabi_fsub+0xee>
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d06a      	beq.n	8000f92 <__aeabi_fsub+0x112>
 8000ebc:	2dff      	cmp	r5, #255	; 0xff
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x42>
 8000ec0:	e0d9      	b.n	8001076 <__aeabi_fsub+0x1f6>
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	4316      	orrs	r6, r2
 8000ec8:	281b      	cmp	r0, #27
 8000eca:	dc00      	bgt.n	8000ece <__aeabi_fsub+0x4e>
 8000ecc:	e0e9      	b.n	80010a2 <__aeabi_fsub+0x222>
 8000ece:	2001      	movs	r0, #1
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	1a18      	subs	r0, r3, r0
 8000ed4:	0143      	lsls	r3, r0, #5
 8000ed6:	d400      	bmi.n	8000eda <__aeabi_fsub+0x5a>
 8000ed8:	e0b4      	b.n	8001044 <__aeabi_fsub+0x1c4>
 8000eda:	0180      	lsls	r0, r0, #6
 8000edc:	0987      	lsrs	r7, r0, #6
 8000ede:	0038      	movs	r0, r7
 8000ee0:	f002 f8bc 	bl	800305c <__clzsi2>
 8000ee4:	3805      	subs	r0, #5
 8000ee6:	4087      	lsls	r7, r0
 8000ee8:	4285      	cmp	r5, r0
 8000eea:	dc00      	bgt.n	8000eee <__aeabi_fsub+0x6e>
 8000eec:	e0cc      	b.n	8001088 <__aeabi_fsub+0x208>
 8000eee:	1a2d      	subs	r5, r5, r0
 8000ef0:	48b5      	ldr	r0, [pc, #724]	; (80011c8 <__aeabi_fsub+0x348>)
 8000ef2:	4038      	ands	r0, r7
 8000ef4:	0743      	lsls	r3, r0, #29
 8000ef6:	d004      	beq.n	8000f02 <__aeabi_fsub+0x82>
 8000ef8:	230f      	movs	r3, #15
 8000efa:	4003      	ands	r3, r0
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d000      	beq.n	8000f02 <__aeabi_fsub+0x82>
 8000f00:	3004      	adds	r0, #4
 8000f02:	0143      	lsls	r3, r0, #5
 8000f04:	d400      	bmi.n	8000f08 <__aeabi_fsub+0x88>
 8000f06:	e0a0      	b.n	800104a <__aeabi_fsub+0x1ca>
 8000f08:	1c6a      	adds	r2, r5, #1
 8000f0a:	2dfe      	cmp	r5, #254	; 0xfe
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_fsub+0x90>
 8000f0e:	e08d      	b.n	800102c <__aeabi_fsub+0x1ac>
 8000f10:	0180      	lsls	r0, r0, #6
 8000f12:	0a47      	lsrs	r7, r0, #9
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	05d0      	lsls	r0, r2, #23
 8000f18:	4338      	orrs	r0, r7
 8000f1a:	07e4      	lsls	r4, r4, #31
 8000f1c:	4320      	orrs	r0, r4
 8000f1e:	bcc0      	pop	{r6, r7}
 8000f20:	46b9      	mov	r9, r7
 8000f22:	46b0      	mov	r8, r6
 8000f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f26:	1aa8      	subs	r0, r5, r2
 8000f28:	4680      	mov	r8, r0
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	dd45      	ble.n	8000fba <__aeabi_fsub+0x13a>
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d070      	beq.n	8001014 <__aeabi_fsub+0x194>
 8000f32:	2dff      	cmp	r5, #255	; 0xff
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0xb8>
 8000f36:	e09e      	b.n	8001076 <__aeabi_fsub+0x1f6>
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	4643      	mov	r3, r8
 8000f40:	2b1b      	cmp	r3, #27
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_fsub+0xc6>
 8000f44:	e0d2      	b.n	80010ec <__aeabi_fsub+0x26c>
 8000f46:	2001      	movs	r0, #1
 8000f48:	4460      	add	r0, ip
 8000f4a:	0143      	lsls	r3, r0, #5
 8000f4c:	d57a      	bpl.n	8001044 <__aeabi_fsub+0x1c4>
 8000f4e:	3501      	adds	r5, #1
 8000f50:	2dff      	cmp	r5, #255	; 0xff
 8000f52:	d06b      	beq.n	800102c <__aeabi_fsub+0x1ac>
 8000f54:	2301      	movs	r3, #1
 8000f56:	4a9d      	ldr	r2, [pc, #628]	; (80011cc <__aeabi_fsub+0x34c>)
 8000f58:	4003      	ands	r3, r0
 8000f5a:	0840      	lsrs	r0, r0, #1
 8000f5c:	4010      	ands	r0, r2
 8000f5e:	4318      	orrs	r0, r3
 8000f60:	e7c8      	b.n	8000ef4 <__aeabi_fsub+0x74>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d020      	beq.n	8000fa8 <__aeabi_fsub+0x128>
 8000f66:	428c      	cmp	r4, r1
 8000f68:	d023      	beq.n	8000fb2 <__aeabi_fsub+0x132>
 8000f6a:	0028      	movs	r0, r5
 8000f6c:	38ff      	subs	r0, #255	; 0xff
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	d039      	beq.n	8000fe6 <__aeabi_fsub+0x166>
 8000f72:	1b57      	subs	r7, r2, r5
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d000      	beq.n	8000f7a <__aeabi_fsub+0xfa>
 8000f78:	e09d      	b.n	80010b6 <__aeabi_fsub+0x236>
 8000f7a:	4663      	mov	r3, ip
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x102>
 8000f80:	e0db      	b.n	800113a <__aeabi_fsub+0x2ba>
 8000f82:	1e7b      	subs	r3, r7, #1
 8000f84:	2f01      	cmp	r7, #1
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fsub+0x10a>
 8000f88:	e10d      	b.n	80011a6 <__aeabi_fsub+0x326>
 8000f8a:	2fff      	cmp	r7, #255	; 0xff
 8000f8c:	d071      	beq.n	8001072 <__aeabi_fsub+0x1f2>
 8000f8e:	001f      	movs	r7, r3
 8000f90:	e098      	b.n	80010c4 <__aeabi_fsub+0x244>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x118>
 8000f96:	e0a7      	b.n	80010e8 <__aeabi_fsub+0x268>
 8000f98:	1e42      	subs	r2, r0, #1
 8000f9a:	2801      	cmp	r0, #1
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x120>
 8000f9e:	e0e6      	b.n	800116e <__aeabi_fsub+0x2ee>
 8000fa0:	28ff      	cmp	r0, #255	; 0xff
 8000fa2:	d068      	beq.n	8001076 <__aeabi_fsub+0x1f6>
 8000fa4:	0010      	movs	r0, r2
 8000fa6:	e78f      	b.n	8000ec8 <__aeabi_fsub+0x48>
 8000fa8:	2001      	movs	r0, #1
 8000faa:	4041      	eors	r1, r0
 8000fac:	42a1      	cmp	r1, r4
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x132>
 8000fb0:	e77f      	b.n	8000eb2 <__aeabi_fsub+0x32>
 8000fb2:	20ff      	movs	r0, #255	; 0xff
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	4680      	mov	r8, r0
 8000fb8:	44a8      	add	r8, r5
 8000fba:	4640      	mov	r0, r8
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d038      	beq.n	8001032 <__aeabi_fsub+0x1b2>
 8000fc0:	1b51      	subs	r1, r2, r5
 8000fc2:	2d00      	cmp	r5, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x148>
 8000fc6:	e0ae      	b.n	8001126 <__aeabi_fsub+0x2a6>
 8000fc8:	2aff      	cmp	r2, #255	; 0xff
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x14e>
 8000fcc:	e0df      	b.n	800118e <__aeabi_fsub+0x30e>
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	4660      	mov	r0, ip
 8000fd2:	04db      	lsls	r3, r3, #19
 8000fd4:	4318      	orrs	r0, r3
 8000fd6:	4684      	mov	ip, r0
 8000fd8:	291b      	cmp	r1, #27
 8000fda:	dc00      	bgt.n	8000fde <__aeabi_fsub+0x15e>
 8000fdc:	e0d9      	b.n	8001192 <__aeabi_fsub+0x312>
 8000fde:	2001      	movs	r0, #1
 8000fe0:	0015      	movs	r5, r2
 8000fe2:	1980      	adds	r0, r0, r6
 8000fe4:	e7b1      	b.n	8000f4a <__aeabi_fsub+0xca>
 8000fe6:	20fe      	movs	r0, #254	; 0xfe
 8000fe8:	1c6a      	adds	r2, r5, #1
 8000fea:	4210      	tst	r0, r2
 8000fec:	d171      	bne.n	80010d2 <__aeabi_fsub+0x252>
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_fsub+0x174>
 8000ff2:	e0a6      	b.n	8001142 <__aeabi_fsub+0x2c2>
 8000ff4:	4663      	mov	r3, ip
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x17c>
 8000ffa:	e0d9      	b.n	80011b0 <__aeabi_fsub+0x330>
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2e00      	cmp	r6, #0
 8001000:	d100      	bne.n	8001004 <__aeabi_fsub+0x184>
 8001002:	e788      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001004:	1b98      	subs	r0, r3, r6
 8001006:	0143      	lsls	r3, r0, #5
 8001008:	d400      	bmi.n	800100c <__aeabi_fsub+0x18c>
 800100a:	e0e1      	b.n	80011d0 <__aeabi_fsub+0x350>
 800100c:	4663      	mov	r3, ip
 800100e:	000c      	movs	r4, r1
 8001010:	1af0      	subs	r0, r6, r3
 8001012:	e76f      	b.n	8000ef4 <__aeabi_fsub+0x74>
 8001014:	2e00      	cmp	r6, #0
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x19a>
 8001018:	e0b7      	b.n	800118a <__aeabi_fsub+0x30a>
 800101a:	0002      	movs	r2, r0
 800101c:	3a01      	subs	r2, #1
 800101e:	2801      	cmp	r0, #1
 8001020:	d100      	bne.n	8001024 <__aeabi_fsub+0x1a4>
 8001022:	e09c      	b.n	800115e <__aeabi_fsub+0x2de>
 8001024:	28ff      	cmp	r0, #255	; 0xff
 8001026:	d026      	beq.n	8001076 <__aeabi_fsub+0x1f6>
 8001028:	4690      	mov	r8, r2
 800102a:	e788      	b.n	8000f3e <__aeabi_fsub+0xbe>
 800102c:	22ff      	movs	r2, #255	; 0xff
 800102e:	2700      	movs	r7, #0
 8001030:	e771      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001032:	20fe      	movs	r0, #254	; 0xfe
 8001034:	1c6a      	adds	r2, r5, #1
 8001036:	4210      	tst	r0, r2
 8001038:	d064      	beq.n	8001104 <__aeabi_fsub+0x284>
 800103a:	2aff      	cmp	r2, #255	; 0xff
 800103c:	d0f6      	beq.n	800102c <__aeabi_fsub+0x1ac>
 800103e:	0015      	movs	r5, r2
 8001040:	4466      	add	r6, ip
 8001042:	0870      	lsrs	r0, r6, #1
 8001044:	0743      	lsls	r3, r0, #29
 8001046:	d000      	beq.n	800104a <__aeabi_fsub+0x1ca>
 8001048:	e756      	b.n	8000ef8 <__aeabi_fsub+0x78>
 800104a:	08c3      	lsrs	r3, r0, #3
 800104c:	2dff      	cmp	r5, #255	; 0xff
 800104e:	d012      	beq.n	8001076 <__aeabi_fsub+0x1f6>
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	0a5f      	lsrs	r7, r3, #9
 8001054:	b2ea      	uxtb	r2, r5
 8001056:	e75e      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001058:	4662      	mov	r2, ip
 800105a:	2a00      	cmp	r2, #0
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0x1e0>
 800105e:	e096      	b.n	800118e <__aeabi_fsub+0x30e>
 8001060:	2e00      	cmp	r6, #0
 8001062:	d008      	beq.n	8001076 <__aeabi_fsub+0x1f6>
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	03d2      	lsls	r2, r2, #15
 8001068:	4213      	tst	r3, r2
 800106a:	d004      	beq.n	8001076 <__aeabi_fsub+0x1f6>
 800106c:	4648      	mov	r0, r9
 800106e:	4210      	tst	r0, r2
 8001070:	d101      	bne.n	8001076 <__aeabi_fsub+0x1f6>
 8001072:	000c      	movs	r4, r1
 8001074:	464b      	mov	r3, r9
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0d8      	beq.n	800102c <__aeabi_fsub+0x1ac>
 800107a:	2780      	movs	r7, #128	; 0x80
 800107c:	03ff      	lsls	r7, r7, #15
 800107e:	431f      	orrs	r7, r3
 8001080:	027f      	lsls	r7, r7, #9
 8001082:	22ff      	movs	r2, #255	; 0xff
 8001084:	0a7f      	lsrs	r7, r7, #9
 8001086:	e746      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001088:	2320      	movs	r3, #32
 800108a:	003a      	movs	r2, r7
 800108c:	1b45      	subs	r5, r0, r5
 800108e:	0038      	movs	r0, r7
 8001090:	3501      	adds	r5, #1
 8001092:	40ea      	lsrs	r2, r5
 8001094:	1b5d      	subs	r5, r3, r5
 8001096:	40a8      	lsls	r0, r5
 8001098:	1e43      	subs	r3, r0, #1
 800109a:	4198      	sbcs	r0, r3
 800109c:	2500      	movs	r5, #0
 800109e:	4310      	orrs	r0, r2
 80010a0:	e728      	b.n	8000ef4 <__aeabi_fsub+0x74>
 80010a2:	2320      	movs	r3, #32
 80010a4:	1a1b      	subs	r3, r3, r0
 80010a6:	0032      	movs	r2, r6
 80010a8:	409e      	lsls	r6, r3
 80010aa:	40c2      	lsrs	r2, r0
 80010ac:	0030      	movs	r0, r6
 80010ae:	1e43      	subs	r3, r0, #1
 80010b0:	4198      	sbcs	r0, r3
 80010b2:	4310      	orrs	r0, r2
 80010b4:	e70c      	b.n	8000ed0 <__aeabi_fsub+0x50>
 80010b6:	2aff      	cmp	r2, #255	; 0xff
 80010b8:	d0db      	beq.n	8001072 <__aeabi_fsub+0x1f2>
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	4660      	mov	r0, ip
 80010be:	04db      	lsls	r3, r3, #19
 80010c0:	4318      	orrs	r0, r3
 80010c2:	4684      	mov	ip, r0
 80010c4:	2f1b      	cmp	r7, #27
 80010c6:	dd56      	ble.n	8001176 <__aeabi_fsub+0x2f6>
 80010c8:	2001      	movs	r0, #1
 80010ca:	000c      	movs	r4, r1
 80010cc:	0015      	movs	r5, r2
 80010ce:	1a30      	subs	r0, r6, r0
 80010d0:	e700      	b.n	8000ed4 <__aeabi_fsub+0x54>
 80010d2:	4663      	mov	r3, ip
 80010d4:	1b9f      	subs	r7, r3, r6
 80010d6:	017b      	lsls	r3, r7, #5
 80010d8:	d43d      	bmi.n	8001156 <__aeabi_fsub+0x2d6>
 80010da:	2f00      	cmp	r7, #0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_fsub+0x260>
 80010de:	e6fe      	b.n	8000ede <__aeabi_fsub+0x5e>
 80010e0:	2400      	movs	r4, #0
 80010e2:	2200      	movs	r2, #0
 80010e4:	2700      	movs	r7, #0
 80010e6:	e716      	b.n	8000f16 <__aeabi_fsub+0x96>
 80010e8:	0005      	movs	r5, r0
 80010ea:	e7af      	b.n	800104c <__aeabi_fsub+0x1cc>
 80010ec:	0032      	movs	r2, r6
 80010ee:	4643      	mov	r3, r8
 80010f0:	4641      	mov	r1, r8
 80010f2:	40da      	lsrs	r2, r3
 80010f4:	2320      	movs	r3, #32
 80010f6:	1a5b      	subs	r3, r3, r1
 80010f8:	409e      	lsls	r6, r3
 80010fa:	0030      	movs	r0, r6
 80010fc:	1e43      	subs	r3, r0, #1
 80010fe:	4198      	sbcs	r0, r3
 8001100:	4310      	orrs	r0, r2
 8001102:	e721      	b.n	8000f48 <__aeabi_fsub+0xc8>
 8001104:	2d00      	cmp	r5, #0
 8001106:	d1a7      	bne.n	8001058 <__aeabi_fsub+0x1d8>
 8001108:	4663      	mov	r3, ip
 800110a:	2b00      	cmp	r3, #0
 800110c:	d059      	beq.n	80011c2 <__aeabi_fsub+0x342>
 800110e:	2200      	movs	r2, #0
 8001110:	2e00      	cmp	r6, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_fsub+0x296>
 8001114:	e6ff      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001116:	0030      	movs	r0, r6
 8001118:	4460      	add	r0, ip
 800111a:	0143      	lsls	r3, r0, #5
 800111c:	d592      	bpl.n	8001044 <__aeabi_fsub+0x1c4>
 800111e:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <__aeabi_fsub+0x348>)
 8001120:	3501      	adds	r5, #1
 8001122:	4018      	ands	r0, r3
 8001124:	e78e      	b.n	8001044 <__aeabi_fsub+0x1c4>
 8001126:	4663      	mov	r3, ip
 8001128:	2b00      	cmp	r3, #0
 800112a:	d047      	beq.n	80011bc <__aeabi_fsub+0x33c>
 800112c:	1e4b      	subs	r3, r1, #1
 800112e:	2901      	cmp	r1, #1
 8001130:	d015      	beq.n	800115e <__aeabi_fsub+0x2de>
 8001132:	29ff      	cmp	r1, #255	; 0xff
 8001134:	d02b      	beq.n	800118e <__aeabi_fsub+0x30e>
 8001136:	0019      	movs	r1, r3
 8001138:	e74e      	b.n	8000fd8 <__aeabi_fsub+0x158>
 800113a:	000c      	movs	r4, r1
 800113c:	464b      	mov	r3, r9
 800113e:	003d      	movs	r5, r7
 8001140:	e784      	b.n	800104c <__aeabi_fsub+0x1cc>
 8001142:	4662      	mov	r2, ip
 8001144:	2a00      	cmp	r2, #0
 8001146:	d18b      	bne.n	8001060 <__aeabi_fsub+0x1e0>
 8001148:	2e00      	cmp	r6, #0
 800114a:	d192      	bne.n	8001072 <__aeabi_fsub+0x1f2>
 800114c:	2780      	movs	r7, #128	; 0x80
 800114e:	2400      	movs	r4, #0
 8001150:	22ff      	movs	r2, #255	; 0xff
 8001152:	03ff      	lsls	r7, r7, #15
 8001154:	e6df      	b.n	8000f16 <__aeabi_fsub+0x96>
 8001156:	4663      	mov	r3, ip
 8001158:	000c      	movs	r4, r1
 800115a:	1af7      	subs	r7, r6, r3
 800115c:	e6bf      	b.n	8000ede <__aeabi_fsub+0x5e>
 800115e:	0030      	movs	r0, r6
 8001160:	4460      	add	r0, ip
 8001162:	2501      	movs	r5, #1
 8001164:	0143      	lsls	r3, r0, #5
 8001166:	d400      	bmi.n	800116a <__aeabi_fsub+0x2ea>
 8001168:	e76c      	b.n	8001044 <__aeabi_fsub+0x1c4>
 800116a:	2502      	movs	r5, #2
 800116c:	e6f2      	b.n	8000f54 <__aeabi_fsub+0xd4>
 800116e:	4663      	mov	r3, ip
 8001170:	2501      	movs	r5, #1
 8001172:	1b98      	subs	r0, r3, r6
 8001174:	e6ae      	b.n	8000ed4 <__aeabi_fsub+0x54>
 8001176:	2320      	movs	r3, #32
 8001178:	4664      	mov	r4, ip
 800117a:	4660      	mov	r0, ip
 800117c:	40fc      	lsrs	r4, r7
 800117e:	1bdf      	subs	r7, r3, r7
 8001180:	40b8      	lsls	r0, r7
 8001182:	1e43      	subs	r3, r0, #1
 8001184:	4198      	sbcs	r0, r3
 8001186:	4320      	orrs	r0, r4
 8001188:	e79f      	b.n	80010ca <__aeabi_fsub+0x24a>
 800118a:	0005      	movs	r5, r0
 800118c:	e75e      	b.n	800104c <__aeabi_fsub+0x1cc>
 800118e:	464b      	mov	r3, r9
 8001190:	e771      	b.n	8001076 <__aeabi_fsub+0x1f6>
 8001192:	2320      	movs	r3, #32
 8001194:	4665      	mov	r5, ip
 8001196:	4660      	mov	r0, ip
 8001198:	40cd      	lsrs	r5, r1
 800119a:	1a59      	subs	r1, r3, r1
 800119c:	4088      	lsls	r0, r1
 800119e:	1e43      	subs	r3, r0, #1
 80011a0:	4198      	sbcs	r0, r3
 80011a2:	4328      	orrs	r0, r5
 80011a4:	e71c      	b.n	8000fe0 <__aeabi_fsub+0x160>
 80011a6:	4663      	mov	r3, ip
 80011a8:	000c      	movs	r4, r1
 80011aa:	2501      	movs	r5, #1
 80011ac:	1af0      	subs	r0, r6, r3
 80011ae:	e691      	b.n	8000ed4 <__aeabi_fsub+0x54>
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d095      	beq.n	80010e0 <__aeabi_fsub+0x260>
 80011b4:	000c      	movs	r4, r1
 80011b6:	464f      	mov	r7, r9
 80011b8:	2200      	movs	r2, #0
 80011ba:	e6ac      	b.n	8000f16 <__aeabi_fsub+0x96>
 80011bc:	464b      	mov	r3, r9
 80011be:	000d      	movs	r5, r1
 80011c0:	e744      	b.n	800104c <__aeabi_fsub+0x1cc>
 80011c2:	464f      	mov	r7, r9
 80011c4:	2200      	movs	r2, #0
 80011c6:	e6a6      	b.n	8000f16 <__aeabi_fsub+0x96>
 80011c8:	fbffffff 	.word	0xfbffffff
 80011cc:	7dffffff 	.word	0x7dffffff
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d000      	beq.n	80011d6 <__aeabi_fsub+0x356>
 80011d4:	e736      	b.n	8001044 <__aeabi_fsub+0x1c4>
 80011d6:	2400      	movs	r4, #0
 80011d8:	2700      	movs	r7, #0
 80011da:	e69c      	b.n	8000f16 <__aeabi_fsub+0x96>

080011dc <__aeabi_f2iz>:
 80011dc:	0241      	lsls	r1, r0, #9
 80011de:	0042      	lsls	r2, r0, #1
 80011e0:	0fc3      	lsrs	r3, r0, #31
 80011e2:	0a49      	lsrs	r1, r1, #9
 80011e4:	2000      	movs	r0, #0
 80011e6:	0e12      	lsrs	r2, r2, #24
 80011e8:	2a7e      	cmp	r2, #126	; 0x7e
 80011ea:	dd03      	ble.n	80011f4 <__aeabi_f2iz+0x18>
 80011ec:	2a9d      	cmp	r2, #157	; 0x9d
 80011ee:	dd02      	ble.n	80011f6 <__aeabi_f2iz+0x1a>
 80011f0:	4a09      	ldr	r2, [pc, #36]	; (8001218 <__aeabi_f2iz+0x3c>)
 80011f2:	1898      	adds	r0, r3, r2
 80011f4:	4770      	bx	lr
 80011f6:	2080      	movs	r0, #128	; 0x80
 80011f8:	0400      	lsls	r0, r0, #16
 80011fa:	4301      	orrs	r1, r0
 80011fc:	2a95      	cmp	r2, #149	; 0x95
 80011fe:	dc07      	bgt.n	8001210 <__aeabi_f2iz+0x34>
 8001200:	2096      	movs	r0, #150	; 0x96
 8001202:	1a82      	subs	r2, r0, r2
 8001204:	40d1      	lsrs	r1, r2
 8001206:	4248      	negs	r0, r1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f3      	bne.n	80011f4 <__aeabi_f2iz+0x18>
 800120c:	0008      	movs	r0, r1
 800120e:	e7f1      	b.n	80011f4 <__aeabi_f2iz+0x18>
 8001210:	3a96      	subs	r2, #150	; 0x96
 8001212:	4091      	lsls	r1, r2
 8001214:	e7f7      	b.n	8001206 <__aeabi_f2iz+0x2a>
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	7fffffff 	.word	0x7fffffff

0800121c <__aeabi_i2f>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	2800      	cmp	r0, #0
 8001220:	d013      	beq.n	800124a <__aeabi_i2f+0x2e>
 8001222:	17c3      	asrs	r3, r0, #31
 8001224:	18c6      	adds	r6, r0, r3
 8001226:	405e      	eors	r6, r3
 8001228:	0fc4      	lsrs	r4, r0, #31
 800122a:	0030      	movs	r0, r6
 800122c:	f001 ff16 	bl	800305c <__clzsi2>
 8001230:	239e      	movs	r3, #158	; 0x9e
 8001232:	0005      	movs	r5, r0
 8001234:	1a1b      	subs	r3, r3, r0
 8001236:	2b96      	cmp	r3, #150	; 0x96
 8001238:	dc0f      	bgt.n	800125a <__aeabi_i2f+0x3e>
 800123a:	2808      	cmp	r0, #8
 800123c:	dd01      	ble.n	8001242 <__aeabi_i2f+0x26>
 800123e:	3d08      	subs	r5, #8
 8001240:	40ae      	lsls	r6, r5
 8001242:	0276      	lsls	r6, r6, #9
 8001244:	0a76      	lsrs	r6, r6, #9
 8001246:	b2d8      	uxtb	r0, r3
 8001248:	e002      	b.n	8001250 <__aeabi_i2f+0x34>
 800124a:	2400      	movs	r4, #0
 800124c:	2000      	movs	r0, #0
 800124e:	2600      	movs	r6, #0
 8001250:	05c0      	lsls	r0, r0, #23
 8001252:	4330      	orrs	r0, r6
 8001254:	07e4      	lsls	r4, r4, #31
 8001256:	4320      	orrs	r0, r4
 8001258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800125a:	2b99      	cmp	r3, #153	; 0x99
 800125c:	dd0c      	ble.n	8001278 <__aeabi_i2f+0x5c>
 800125e:	2205      	movs	r2, #5
 8001260:	0031      	movs	r1, r6
 8001262:	1a12      	subs	r2, r2, r0
 8001264:	40d1      	lsrs	r1, r2
 8001266:	000a      	movs	r2, r1
 8001268:	0001      	movs	r1, r0
 800126a:	0030      	movs	r0, r6
 800126c:	311b      	adds	r1, #27
 800126e:	4088      	lsls	r0, r1
 8001270:	1e41      	subs	r1, r0, #1
 8001272:	4188      	sbcs	r0, r1
 8001274:	4302      	orrs	r2, r0
 8001276:	0016      	movs	r6, r2
 8001278:	2d05      	cmp	r5, #5
 800127a:	dc12      	bgt.n	80012a2 <__aeabi_i2f+0x86>
 800127c:	0031      	movs	r1, r6
 800127e:	4f0d      	ldr	r7, [pc, #52]	; (80012b4 <__aeabi_i2f+0x98>)
 8001280:	4039      	ands	r1, r7
 8001282:	0772      	lsls	r2, r6, #29
 8001284:	d009      	beq.n	800129a <__aeabi_i2f+0x7e>
 8001286:	200f      	movs	r0, #15
 8001288:	4030      	ands	r0, r6
 800128a:	2804      	cmp	r0, #4
 800128c:	d005      	beq.n	800129a <__aeabi_i2f+0x7e>
 800128e:	3104      	adds	r1, #4
 8001290:	014a      	lsls	r2, r1, #5
 8001292:	d502      	bpl.n	800129a <__aeabi_i2f+0x7e>
 8001294:	239f      	movs	r3, #159	; 0x9f
 8001296:	4039      	ands	r1, r7
 8001298:	1b5b      	subs	r3, r3, r5
 800129a:	0189      	lsls	r1, r1, #6
 800129c:	0a4e      	lsrs	r6, r1, #9
 800129e:	b2d8      	uxtb	r0, r3
 80012a0:	e7d6      	b.n	8001250 <__aeabi_i2f+0x34>
 80012a2:	1f6a      	subs	r2, r5, #5
 80012a4:	4096      	lsls	r6, r2
 80012a6:	0031      	movs	r1, r6
 80012a8:	4f02      	ldr	r7, [pc, #8]	; (80012b4 <__aeabi_i2f+0x98>)
 80012aa:	4039      	ands	r1, r7
 80012ac:	0772      	lsls	r2, r6, #29
 80012ae:	d0f4      	beq.n	800129a <__aeabi_i2f+0x7e>
 80012b0:	e7e9      	b.n	8001286 <__aeabi_i2f+0x6a>
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	fbffffff 	.word	0xfbffffff

080012b8 <__aeabi_ui2f>:
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	1e05      	subs	r5, r0, #0
 80012bc:	d00e      	beq.n	80012dc <__aeabi_ui2f+0x24>
 80012be:	f001 fecd 	bl	800305c <__clzsi2>
 80012c2:	239e      	movs	r3, #158	; 0x9e
 80012c4:	0004      	movs	r4, r0
 80012c6:	1a1b      	subs	r3, r3, r0
 80012c8:	2b96      	cmp	r3, #150	; 0x96
 80012ca:	dc0c      	bgt.n	80012e6 <__aeabi_ui2f+0x2e>
 80012cc:	2808      	cmp	r0, #8
 80012ce:	dd01      	ble.n	80012d4 <__aeabi_ui2f+0x1c>
 80012d0:	3c08      	subs	r4, #8
 80012d2:	40a5      	lsls	r5, r4
 80012d4:	026d      	lsls	r5, r5, #9
 80012d6:	0a6d      	lsrs	r5, r5, #9
 80012d8:	b2d8      	uxtb	r0, r3
 80012da:	e001      	b.n	80012e0 <__aeabi_ui2f+0x28>
 80012dc:	2000      	movs	r0, #0
 80012de:	2500      	movs	r5, #0
 80012e0:	05c0      	lsls	r0, r0, #23
 80012e2:	4328      	orrs	r0, r5
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
 80012e6:	2b99      	cmp	r3, #153	; 0x99
 80012e8:	dd09      	ble.n	80012fe <__aeabi_ui2f+0x46>
 80012ea:	0002      	movs	r2, r0
 80012ec:	0029      	movs	r1, r5
 80012ee:	321b      	adds	r2, #27
 80012f0:	4091      	lsls	r1, r2
 80012f2:	1e4a      	subs	r2, r1, #1
 80012f4:	4191      	sbcs	r1, r2
 80012f6:	2205      	movs	r2, #5
 80012f8:	1a12      	subs	r2, r2, r0
 80012fa:	40d5      	lsrs	r5, r2
 80012fc:	430d      	orrs	r5, r1
 80012fe:	2c05      	cmp	r4, #5
 8001300:	dc12      	bgt.n	8001328 <__aeabi_ui2f+0x70>
 8001302:	0029      	movs	r1, r5
 8001304:	4e0c      	ldr	r6, [pc, #48]	; (8001338 <__aeabi_ui2f+0x80>)
 8001306:	4031      	ands	r1, r6
 8001308:	076a      	lsls	r2, r5, #29
 800130a:	d009      	beq.n	8001320 <__aeabi_ui2f+0x68>
 800130c:	200f      	movs	r0, #15
 800130e:	4028      	ands	r0, r5
 8001310:	2804      	cmp	r0, #4
 8001312:	d005      	beq.n	8001320 <__aeabi_ui2f+0x68>
 8001314:	3104      	adds	r1, #4
 8001316:	014a      	lsls	r2, r1, #5
 8001318:	d502      	bpl.n	8001320 <__aeabi_ui2f+0x68>
 800131a:	239f      	movs	r3, #159	; 0x9f
 800131c:	4031      	ands	r1, r6
 800131e:	1b1b      	subs	r3, r3, r4
 8001320:	0189      	lsls	r1, r1, #6
 8001322:	0a4d      	lsrs	r5, r1, #9
 8001324:	b2d8      	uxtb	r0, r3
 8001326:	e7db      	b.n	80012e0 <__aeabi_ui2f+0x28>
 8001328:	1f62      	subs	r2, r4, #5
 800132a:	4095      	lsls	r5, r2
 800132c:	0029      	movs	r1, r5
 800132e:	4e02      	ldr	r6, [pc, #8]	; (8001338 <__aeabi_ui2f+0x80>)
 8001330:	4031      	ands	r1, r6
 8001332:	076a      	lsls	r2, r5, #29
 8001334:	d0f4      	beq.n	8001320 <__aeabi_ui2f+0x68>
 8001336:	e7e9      	b.n	800130c <__aeabi_ui2f+0x54>
 8001338:	fbffffff 	.word	0xfbffffff

0800133c <__aeabi_dadd>:
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	464f      	mov	r7, r9
 8001340:	4646      	mov	r6, r8
 8001342:	46d6      	mov	lr, sl
 8001344:	000d      	movs	r5, r1
 8001346:	0004      	movs	r4, r0
 8001348:	b5c0      	push	{r6, r7, lr}
 800134a:	001f      	movs	r7, r3
 800134c:	0011      	movs	r1, r2
 800134e:	0328      	lsls	r0, r5, #12
 8001350:	0f62      	lsrs	r2, r4, #29
 8001352:	0a40      	lsrs	r0, r0, #9
 8001354:	4310      	orrs	r0, r2
 8001356:	007a      	lsls	r2, r7, #1
 8001358:	0d52      	lsrs	r2, r2, #21
 800135a:	00e3      	lsls	r3, r4, #3
 800135c:	033c      	lsls	r4, r7, #12
 800135e:	4691      	mov	r9, r2
 8001360:	0a64      	lsrs	r4, r4, #9
 8001362:	0ffa      	lsrs	r2, r7, #31
 8001364:	0f4f      	lsrs	r7, r1, #29
 8001366:	006e      	lsls	r6, r5, #1
 8001368:	4327      	orrs	r7, r4
 800136a:	4692      	mov	sl, r2
 800136c:	46b8      	mov	r8, r7
 800136e:	0d76      	lsrs	r6, r6, #21
 8001370:	0fed      	lsrs	r5, r5, #31
 8001372:	00c9      	lsls	r1, r1, #3
 8001374:	4295      	cmp	r5, r2
 8001376:	d100      	bne.n	800137a <__aeabi_dadd+0x3e>
 8001378:	e099      	b.n	80014ae <__aeabi_dadd+0x172>
 800137a:	464c      	mov	r4, r9
 800137c:	1b34      	subs	r4, r6, r4
 800137e:	46a4      	mov	ip, r4
 8001380:	2c00      	cmp	r4, #0
 8001382:	dc00      	bgt.n	8001386 <__aeabi_dadd+0x4a>
 8001384:	e07c      	b.n	8001480 <__aeabi_dadd+0x144>
 8001386:	464a      	mov	r2, r9
 8001388:	2a00      	cmp	r2, #0
 800138a:	d100      	bne.n	800138e <__aeabi_dadd+0x52>
 800138c:	e0b8      	b.n	8001500 <__aeabi_dadd+0x1c4>
 800138e:	4ac5      	ldr	r2, [pc, #788]	; (80016a4 <__aeabi_dadd+0x368>)
 8001390:	4296      	cmp	r6, r2
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0x5a>
 8001394:	e11c      	b.n	80015d0 <__aeabi_dadd+0x294>
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	003c      	movs	r4, r7
 800139a:	0412      	lsls	r2, r2, #16
 800139c:	4314      	orrs	r4, r2
 800139e:	46a0      	mov	r8, r4
 80013a0:	4662      	mov	r2, ip
 80013a2:	2a38      	cmp	r2, #56	; 0x38
 80013a4:	dd00      	ble.n	80013a8 <__aeabi_dadd+0x6c>
 80013a6:	e161      	b.n	800166c <__aeabi_dadd+0x330>
 80013a8:	2a1f      	cmp	r2, #31
 80013aa:	dd00      	ble.n	80013ae <__aeabi_dadd+0x72>
 80013ac:	e1cc      	b.n	8001748 <__aeabi_dadd+0x40c>
 80013ae:	4664      	mov	r4, ip
 80013b0:	2220      	movs	r2, #32
 80013b2:	1b12      	subs	r2, r2, r4
 80013b4:	4644      	mov	r4, r8
 80013b6:	4094      	lsls	r4, r2
 80013b8:	000f      	movs	r7, r1
 80013ba:	46a1      	mov	r9, r4
 80013bc:	4664      	mov	r4, ip
 80013be:	4091      	lsls	r1, r2
 80013c0:	40e7      	lsrs	r7, r4
 80013c2:	464c      	mov	r4, r9
 80013c4:	1e4a      	subs	r2, r1, #1
 80013c6:	4191      	sbcs	r1, r2
 80013c8:	433c      	orrs	r4, r7
 80013ca:	4642      	mov	r2, r8
 80013cc:	4321      	orrs	r1, r4
 80013ce:	4664      	mov	r4, ip
 80013d0:	40e2      	lsrs	r2, r4
 80013d2:	1a80      	subs	r0, r0, r2
 80013d4:	1a5c      	subs	r4, r3, r1
 80013d6:	42a3      	cmp	r3, r4
 80013d8:	419b      	sbcs	r3, r3
 80013da:	425f      	negs	r7, r3
 80013dc:	1bc7      	subs	r7, r0, r7
 80013de:	023b      	lsls	r3, r7, #8
 80013e0:	d400      	bmi.n	80013e4 <__aeabi_dadd+0xa8>
 80013e2:	e0d0      	b.n	8001586 <__aeabi_dadd+0x24a>
 80013e4:	027f      	lsls	r7, r7, #9
 80013e6:	0a7f      	lsrs	r7, r7, #9
 80013e8:	2f00      	cmp	r7, #0
 80013ea:	d100      	bne.n	80013ee <__aeabi_dadd+0xb2>
 80013ec:	e0ff      	b.n	80015ee <__aeabi_dadd+0x2b2>
 80013ee:	0038      	movs	r0, r7
 80013f0:	f001 fe34 	bl	800305c <__clzsi2>
 80013f4:	0001      	movs	r1, r0
 80013f6:	3908      	subs	r1, #8
 80013f8:	2320      	movs	r3, #32
 80013fa:	0022      	movs	r2, r4
 80013fc:	1a5b      	subs	r3, r3, r1
 80013fe:	408f      	lsls	r7, r1
 8001400:	40da      	lsrs	r2, r3
 8001402:	408c      	lsls	r4, r1
 8001404:	4317      	orrs	r7, r2
 8001406:	42b1      	cmp	r1, r6
 8001408:	da00      	bge.n	800140c <__aeabi_dadd+0xd0>
 800140a:	e0ff      	b.n	800160c <__aeabi_dadd+0x2d0>
 800140c:	1b89      	subs	r1, r1, r6
 800140e:	1c4b      	adds	r3, r1, #1
 8001410:	2b1f      	cmp	r3, #31
 8001412:	dd00      	ble.n	8001416 <__aeabi_dadd+0xda>
 8001414:	e0a8      	b.n	8001568 <__aeabi_dadd+0x22c>
 8001416:	2220      	movs	r2, #32
 8001418:	0039      	movs	r1, r7
 800141a:	1ad2      	subs	r2, r2, r3
 800141c:	0020      	movs	r0, r4
 800141e:	4094      	lsls	r4, r2
 8001420:	4091      	lsls	r1, r2
 8001422:	40d8      	lsrs	r0, r3
 8001424:	1e62      	subs	r2, r4, #1
 8001426:	4194      	sbcs	r4, r2
 8001428:	40df      	lsrs	r7, r3
 800142a:	2600      	movs	r6, #0
 800142c:	4301      	orrs	r1, r0
 800142e:	430c      	orrs	r4, r1
 8001430:	0763      	lsls	r3, r4, #29
 8001432:	d009      	beq.n	8001448 <__aeabi_dadd+0x10c>
 8001434:	230f      	movs	r3, #15
 8001436:	4023      	ands	r3, r4
 8001438:	2b04      	cmp	r3, #4
 800143a:	d005      	beq.n	8001448 <__aeabi_dadd+0x10c>
 800143c:	1d23      	adds	r3, r4, #4
 800143e:	42a3      	cmp	r3, r4
 8001440:	41a4      	sbcs	r4, r4
 8001442:	4264      	negs	r4, r4
 8001444:	193f      	adds	r7, r7, r4
 8001446:	001c      	movs	r4, r3
 8001448:	023b      	lsls	r3, r7, #8
 800144a:	d400      	bmi.n	800144e <__aeabi_dadd+0x112>
 800144c:	e09e      	b.n	800158c <__aeabi_dadd+0x250>
 800144e:	4b95      	ldr	r3, [pc, #596]	; (80016a4 <__aeabi_dadd+0x368>)
 8001450:	3601      	adds	r6, #1
 8001452:	429e      	cmp	r6, r3
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x11c>
 8001456:	e0b7      	b.n	80015c8 <__aeabi_dadd+0x28c>
 8001458:	4a93      	ldr	r2, [pc, #588]	; (80016a8 <__aeabi_dadd+0x36c>)
 800145a:	08e4      	lsrs	r4, r4, #3
 800145c:	4017      	ands	r7, r2
 800145e:	077b      	lsls	r3, r7, #29
 8001460:	0571      	lsls	r1, r6, #21
 8001462:	027f      	lsls	r7, r7, #9
 8001464:	4323      	orrs	r3, r4
 8001466:	0b3f      	lsrs	r7, r7, #12
 8001468:	0d4a      	lsrs	r2, r1, #21
 800146a:	0512      	lsls	r2, r2, #20
 800146c:	433a      	orrs	r2, r7
 800146e:	07ed      	lsls	r5, r5, #31
 8001470:	432a      	orrs	r2, r5
 8001472:	0018      	movs	r0, r3
 8001474:	0011      	movs	r1, r2
 8001476:	bce0      	pop	{r5, r6, r7}
 8001478:	46ba      	mov	sl, r7
 800147a:	46b1      	mov	r9, r6
 800147c:	46a8      	mov	r8, r5
 800147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001480:	2c00      	cmp	r4, #0
 8001482:	d04b      	beq.n	800151c <__aeabi_dadd+0x1e0>
 8001484:	464c      	mov	r4, r9
 8001486:	1ba4      	subs	r4, r4, r6
 8001488:	46a4      	mov	ip, r4
 800148a:	2e00      	cmp	r6, #0
 800148c:	d000      	beq.n	8001490 <__aeabi_dadd+0x154>
 800148e:	e123      	b.n	80016d8 <__aeabi_dadd+0x39c>
 8001490:	0004      	movs	r4, r0
 8001492:	431c      	orrs	r4, r3
 8001494:	d100      	bne.n	8001498 <__aeabi_dadd+0x15c>
 8001496:	e1af      	b.n	80017f8 <__aeabi_dadd+0x4bc>
 8001498:	4662      	mov	r2, ip
 800149a:	1e54      	subs	r4, r2, #1
 800149c:	2a01      	cmp	r2, #1
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x166>
 80014a0:	e215      	b.n	80018ce <__aeabi_dadd+0x592>
 80014a2:	4d80      	ldr	r5, [pc, #512]	; (80016a4 <__aeabi_dadd+0x368>)
 80014a4:	45ac      	cmp	ip, r5
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x16e>
 80014a8:	e1c8      	b.n	800183c <__aeabi_dadd+0x500>
 80014aa:	46a4      	mov	ip, r4
 80014ac:	e11b      	b.n	80016e6 <__aeabi_dadd+0x3aa>
 80014ae:	464a      	mov	r2, r9
 80014b0:	1ab2      	subs	r2, r6, r2
 80014b2:	4694      	mov	ip, r2
 80014b4:	2a00      	cmp	r2, #0
 80014b6:	dc00      	bgt.n	80014ba <__aeabi_dadd+0x17e>
 80014b8:	e0ac      	b.n	8001614 <__aeabi_dadd+0x2d8>
 80014ba:	464a      	mov	r2, r9
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d043      	beq.n	8001548 <__aeabi_dadd+0x20c>
 80014c0:	4a78      	ldr	r2, [pc, #480]	; (80016a4 <__aeabi_dadd+0x368>)
 80014c2:	4296      	cmp	r6, r2
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x18c>
 80014c6:	e1af      	b.n	8001828 <__aeabi_dadd+0x4ec>
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	003c      	movs	r4, r7
 80014cc:	0412      	lsls	r2, r2, #16
 80014ce:	4314      	orrs	r4, r2
 80014d0:	46a0      	mov	r8, r4
 80014d2:	4662      	mov	r2, ip
 80014d4:	2a38      	cmp	r2, #56	; 0x38
 80014d6:	dc67      	bgt.n	80015a8 <__aeabi_dadd+0x26c>
 80014d8:	2a1f      	cmp	r2, #31
 80014da:	dc00      	bgt.n	80014de <__aeabi_dadd+0x1a2>
 80014dc:	e15f      	b.n	800179e <__aeabi_dadd+0x462>
 80014de:	4647      	mov	r7, r8
 80014e0:	3a20      	subs	r2, #32
 80014e2:	40d7      	lsrs	r7, r2
 80014e4:	4662      	mov	r2, ip
 80014e6:	2a20      	cmp	r2, #32
 80014e8:	d005      	beq.n	80014f6 <__aeabi_dadd+0x1ba>
 80014ea:	4664      	mov	r4, ip
 80014ec:	2240      	movs	r2, #64	; 0x40
 80014ee:	1b12      	subs	r2, r2, r4
 80014f0:	4644      	mov	r4, r8
 80014f2:	4094      	lsls	r4, r2
 80014f4:	4321      	orrs	r1, r4
 80014f6:	1e4a      	subs	r2, r1, #1
 80014f8:	4191      	sbcs	r1, r2
 80014fa:	000c      	movs	r4, r1
 80014fc:	433c      	orrs	r4, r7
 80014fe:	e057      	b.n	80015b0 <__aeabi_dadd+0x274>
 8001500:	003a      	movs	r2, r7
 8001502:	430a      	orrs	r2, r1
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x1cc>
 8001506:	e105      	b.n	8001714 <__aeabi_dadd+0x3d8>
 8001508:	0022      	movs	r2, r4
 800150a:	3a01      	subs	r2, #1
 800150c:	2c01      	cmp	r4, #1
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x1d6>
 8001510:	e182      	b.n	8001818 <__aeabi_dadd+0x4dc>
 8001512:	4c64      	ldr	r4, [pc, #400]	; (80016a4 <__aeabi_dadd+0x368>)
 8001514:	45a4      	cmp	ip, r4
 8001516:	d05b      	beq.n	80015d0 <__aeabi_dadd+0x294>
 8001518:	4694      	mov	ip, r2
 800151a:	e741      	b.n	80013a0 <__aeabi_dadd+0x64>
 800151c:	4c63      	ldr	r4, [pc, #396]	; (80016ac <__aeabi_dadd+0x370>)
 800151e:	1c77      	adds	r7, r6, #1
 8001520:	4227      	tst	r7, r4
 8001522:	d000      	beq.n	8001526 <__aeabi_dadd+0x1ea>
 8001524:	e0c4      	b.n	80016b0 <__aeabi_dadd+0x374>
 8001526:	0004      	movs	r4, r0
 8001528:	431c      	orrs	r4, r3
 800152a:	2e00      	cmp	r6, #0
 800152c:	d000      	beq.n	8001530 <__aeabi_dadd+0x1f4>
 800152e:	e169      	b.n	8001804 <__aeabi_dadd+0x4c8>
 8001530:	2c00      	cmp	r4, #0
 8001532:	d100      	bne.n	8001536 <__aeabi_dadd+0x1fa>
 8001534:	e1bf      	b.n	80018b6 <__aeabi_dadd+0x57a>
 8001536:	4644      	mov	r4, r8
 8001538:	430c      	orrs	r4, r1
 800153a:	d000      	beq.n	800153e <__aeabi_dadd+0x202>
 800153c:	e1d0      	b.n	80018e0 <__aeabi_dadd+0x5a4>
 800153e:	0742      	lsls	r2, r0, #29
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	4313      	orrs	r3, r2
 8001544:	08c0      	lsrs	r0, r0, #3
 8001546:	e029      	b.n	800159c <__aeabi_dadd+0x260>
 8001548:	003a      	movs	r2, r7
 800154a:	430a      	orrs	r2, r1
 800154c:	d100      	bne.n	8001550 <__aeabi_dadd+0x214>
 800154e:	e170      	b.n	8001832 <__aeabi_dadd+0x4f6>
 8001550:	4662      	mov	r2, ip
 8001552:	4664      	mov	r4, ip
 8001554:	3a01      	subs	r2, #1
 8001556:	2c01      	cmp	r4, #1
 8001558:	d100      	bne.n	800155c <__aeabi_dadd+0x220>
 800155a:	e0e0      	b.n	800171e <__aeabi_dadd+0x3e2>
 800155c:	4c51      	ldr	r4, [pc, #324]	; (80016a4 <__aeabi_dadd+0x368>)
 800155e:	45a4      	cmp	ip, r4
 8001560:	d100      	bne.n	8001564 <__aeabi_dadd+0x228>
 8001562:	e161      	b.n	8001828 <__aeabi_dadd+0x4ec>
 8001564:	4694      	mov	ip, r2
 8001566:	e7b4      	b.n	80014d2 <__aeabi_dadd+0x196>
 8001568:	003a      	movs	r2, r7
 800156a:	391f      	subs	r1, #31
 800156c:	40ca      	lsrs	r2, r1
 800156e:	0011      	movs	r1, r2
 8001570:	2b20      	cmp	r3, #32
 8001572:	d003      	beq.n	800157c <__aeabi_dadd+0x240>
 8001574:	2240      	movs	r2, #64	; 0x40
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	409f      	lsls	r7, r3
 800157a:	433c      	orrs	r4, r7
 800157c:	1e63      	subs	r3, r4, #1
 800157e:	419c      	sbcs	r4, r3
 8001580:	2700      	movs	r7, #0
 8001582:	2600      	movs	r6, #0
 8001584:	430c      	orrs	r4, r1
 8001586:	0763      	lsls	r3, r4, #29
 8001588:	d000      	beq.n	800158c <__aeabi_dadd+0x250>
 800158a:	e753      	b.n	8001434 <__aeabi_dadd+0xf8>
 800158c:	46b4      	mov	ip, r6
 800158e:	08e4      	lsrs	r4, r4, #3
 8001590:	077b      	lsls	r3, r7, #29
 8001592:	4323      	orrs	r3, r4
 8001594:	08f8      	lsrs	r0, r7, #3
 8001596:	4a43      	ldr	r2, [pc, #268]	; (80016a4 <__aeabi_dadd+0x368>)
 8001598:	4594      	cmp	ip, r2
 800159a:	d01d      	beq.n	80015d8 <__aeabi_dadd+0x29c>
 800159c:	4662      	mov	r2, ip
 800159e:	0307      	lsls	r7, r0, #12
 80015a0:	0552      	lsls	r2, r2, #21
 80015a2:	0b3f      	lsrs	r7, r7, #12
 80015a4:	0d52      	lsrs	r2, r2, #21
 80015a6:	e760      	b.n	800146a <__aeabi_dadd+0x12e>
 80015a8:	4644      	mov	r4, r8
 80015aa:	430c      	orrs	r4, r1
 80015ac:	1e62      	subs	r2, r4, #1
 80015ae:	4194      	sbcs	r4, r2
 80015b0:	18e4      	adds	r4, r4, r3
 80015b2:	429c      	cmp	r4, r3
 80015b4:	419b      	sbcs	r3, r3
 80015b6:	425f      	negs	r7, r3
 80015b8:	183f      	adds	r7, r7, r0
 80015ba:	023b      	lsls	r3, r7, #8
 80015bc:	d5e3      	bpl.n	8001586 <__aeabi_dadd+0x24a>
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <__aeabi_dadd+0x368>)
 80015c0:	3601      	adds	r6, #1
 80015c2:	429e      	cmp	r6, r3
 80015c4:	d000      	beq.n	80015c8 <__aeabi_dadd+0x28c>
 80015c6:	e0b5      	b.n	8001734 <__aeabi_dadd+0x3f8>
 80015c8:	0032      	movs	r2, r6
 80015ca:	2700      	movs	r7, #0
 80015cc:	2300      	movs	r3, #0
 80015ce:	e74c      	b.n	800146a <__aeabi_dadd+0x12e>
 80015d0:	0742      	lsls	r2, r0, #29
 80015d2:	08db      	lsrs	r3, r3, #3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	08c0      	lsrs	r0, r0, #3
 80015d8:	001a      	movs	r2, r3
 80015da:	4302      	orrs	r2, r0
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dadd+0x2a4>
 80015de:	e1e1      	b.n	80019a4 <__aeabi_dadd+0x668>
 80015e0:	2780      	movs	r7, #128	; 0x80
 80015e2:	033f      	lsls	r7, r7, #12
 80015e4:	4307      	orrs	r7, r0
 80015e6:	033f      	lsls	r7, r7, #12
 80015e8:	4a2e      	ldr	r2, [pc, #184]	; (80016a4 <__aeabi_dadd+0x368>)
 80015ea:	0b3f      	lsrs	r7, r7, #12
 80015ec:	e73d      	b.n	800146a <__aeabi_dadd+0x12e>
 80015ee:	0020      	movs	r0, r4
 80015f0:	f001 fd34 	bl	800305c <__clzsi2>
 80015f4:	0001      	movs	r1, r0
 80015f6:	3118      	adds	r1, #24
 80015f8:	291f      	cmp	r1, #31
 80015fa:	dc00      	bgt.n	80015fe <__aeabi_dadd+0x2c2>
 80015fc:	e6fc      	b.n	80013f8 <__aeabi_dadd+0xbc>
 80015fe:	3808      	subs	r0, #8
 8001600:	4084      	lsls	r4, r0
 8001602:	0027      	movs	r7, r4
 8001604:	2400      	movs	r4, #0
 8001606:	42b1      	cmp	r1, r6
 8001608:	db00      	blt.n	800160c <__aeabi_dadd+0x2d0>
 800160a:	e6ff      	b.n	800140c <__aeabi_dadd+0xd0>
 800160c:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <__aeabi_dadd+0x36c>)
 800160e:	1a76      	subs	r6, r6, r1
 8001610:	4017      	ands	r7, r2
 8001612:	e70d      	b.n	8001430 <__aeabi_dadd+0xf4>
 8001614:	2a00      	cmp	r2, #0
 8001616:	d02f      	beq.n	8001678 <__aeabi_dadd+0x33c>
 8001618:	464a      	mov	r2, r9
 800161a:	1b92      	subs	r2, r2, r6
 800161c:	4694      	mov	ip, r2
 800161e:	2e00      	cmp	r6, #0
 8001620:	d100      	bne.n	8001624 <__aeabi_dadd+0x2e8>
 8001622:	e0ad      	b.n	8001780 <__aeabi_dadd+0x444>
 8001624:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <__aeabi_dadd+0x368>)
 8001626:	4591      	cmp	r9, r2
 8001628:	d100      	bne.n	800162c <__aeabi_dadd+0x2f0>
 800162a:	e10f      	b.n	800184c <__aeabi_dadd+0x510>
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	0412      	lsls	r2, r2, #16
 8001630:	4310      	orrs	r0, r2
 8001632:	4662      	mov	r2, ip
 8001634:	2a38      	cmp	r2, #56	; 0x38
 8001636:	dd00      	ble.n	800163a <__aeabi_dadd+0x2fe>
 8001638:	e10f      	b.n	800185a <__aeabi_dadd+0x51e>
 800163a:	2a1f      	cmp	r2, #31
 800163c:	dd00      	ble.n	8001640 <__aeabi_dadd+0x304>
 800163e:	e180      	b.n	8001942 <__aeabi_dadd+0x606>
 8001640:	4664      	mov	r4, ip
 8001642:	2220      	movs	r2, #32
 8001644:	001e      	movs	r6, r3
 8001646:	1b12      	subs	r2, r2, r4
 8001648:	4667      	mov	r7, ip
 800164a:	0004      	movs	r4, r0
 800164c:	4093      	lsls	r3, r2
 800164e:	4094      	lsls	r4, r2
 8001650:	40fe      	lsrs	r6, r7
 8001652:	1e5a      	subs	r2, r3, #1
 8001654:	4193      	sbcs	r3, r2
 8001656:	40f8      	lsrs	r0, r7
 8001658:	4334      	orrs	r4, r6
 800165a:	431c      	orrs	r4, r3
 800165c:	4480      	add	r8, r0
 800165e:	1864      	adds	r4, r4, r1
 8001660:	428c      	cmp	r4, r1
 8001662:	41bf      	sbcs	r7, r7
 8001664:	427f      	negs	r7, r7
 8001666:	464e      	mov	r6, r9
 8001668:	4447      	add	r7, r8
 800166a:	e7a6      	b.n	80015ba <__aeabi_dadd+0x27e>
 800166c:	4642      	mov	r2, r8
 800166e:	430a      	orrs	r2, r1
 8001670:	0011      	movs	r1, r2
 8001672:	1e4a      	subs	r2, r1, #1
 8001674:	4191      	sbcs	r1, r2
 8001676:	e6ad      	b.n	80013d4 <__aeabi_dadd+0x98>
 8001678:	4c0c      	ldr	r4, [pc, #48]	; (80016ac <__aeabi_dadd+0x370>)
 800167a:	1c72      	adds	r2, r6, #1
 800167c:	4222      	tst	r2, r4
 800167e:	d000      	beq.n	8001682 <__aeabi_dadd+0x346>
 8001680:	e0a1      	b.n	80017c6 <__aeabi_dadd+0x48a>
 8001682:	0002      	movs	r2, r0
 8001684:	431a      	orrs	r2, r3
 8001686:	2e00      	cmp	r6, #0
 8001688:	d000      	beq.n	800168c <__aeabi_dadd+0x350>
 800168a:	e0fa      	b.n	8001882 <__aeabi_dadd+0x546>
 800168c:	2a00      	cmp	r2, #0
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x356>
 8001690:	e145      	b.n	800191e <__aeabi_dadd+0x5e2>
 8001692:	003a      	movs	r2, r7
 8001694:	430a      	orrs	r2, r1
 8001696:	d000      	beq.n	800169a <__aeabi_dadd+0x35e>
 8001698:	e146      	b.n	8001928 <__aeabi_dadd+0x5ec>
 800169a:	0742      	lsls	r2, r0, #29
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	4313      	orrs	r3, r2
 80016a0:	08c0      	lsrs	r0, r0, #3
 80016a2:	e77b      	b.n	800159c <__aeabi_dadd+0x260>
 80016a4:	000007ff 	.word	0x000007ff
 80016a8:	ff7fffff 	.word	0xff7fffff
 80016ac:	000007fe 	.word	0x000007fe
 80016b0:	4647      	mov	r7, r8
 80016b2:	1a5c      	subs	r4, r3, r1
 80016b4:	1bc2      	subs	r2, r0, r7
 80016b6:	42a3      	cmp	r3, r4
 80016b8:	41bf      	sbcs	r7, r7
 80016ba:	427f      	negs	r7, r7
 80016bc:	46b9      	mov	r9, r7
 80016be:	0017      	movs	r7, r2
 80016c0:	464a      	mov	r2, r9
 80016c2:	1abf      	subs	r7, r7, r2
 80016c4:	023a      	lsls	r2, r7, #8
 80016c6:	d500      	bpl.n	80016ca <__aeabi_dadd+0x38e>
 80016c8:	e08d      	b.n	80017e6 <__aeabi_dadd+0x4aa>
 80016ca:	0023      	movs	r3, r4
 80016cc:	433b      	orrs	r3, r7
 80016ce:	d000      	beq.n	80016d2 <__aeabi_dadd+0x396>
 80016d0:	e68a      	b.n	80013e8 <__aeabi_dadd+0xac>
 80016d2:	2000      	movs	r0, #0
 80016d4:	2500      	movs	r5, #0
 80016d6:	e761      	b.n	800159c <__aeabi_dadd+0x260>
 80016d8:	4cb4      	ldr	r4, [pc, #720]	; (80019ac <__aeabi_dadd+0x670>)
 80016da:	45a1      	cmp	r9, r4
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dadd+0x3a4>
 80016de:	e0ad      	b.n	800183c <__aeabi_dadd+0x500>
 80016e0:	2480      	movs	r4, #128	; 0x80
 80016e2:	0424      	lsls	r4, r4, #16
 80016e4:	4320      	orrs	r0, r4
 80016e6:	4664      	mov	r4, ip
 80016e8:	2c38      	cmp	r4, #56	; 0x38
 80016ea:	dc3d      	bgt.n	8001768 <__aeabi_dadd+0x42c>
 80016ec:	4662      	mov	r2, ip
 80016ee:	2c1f      	cmp	r4, #31
 80016f0:	dd00      	ble.n	80016f4 <__aeabi_dadd+0x3b8>
 80016f2:	e0b7      	b.n	8001864 <__aeabi_dadd+0x528>
 80016f4:	2520      	movs	r5, #32
 80016f6:	001e      	movs	r6, r3
 80016f8:	1b2d      	subs	r5, r5, r4
 80016fa:	0004      	movs	r4, r0
 80016fc:	40ab      	lsls	r3, r5
 80016fe:	40ac      	lsls	r4, r5
 8001700:	40d6      	lsrs	r6, r2
 8001702:	40d0      	lsrs	r0, r2
 8001704:	4642      	mov	r2, r8
 8001706:	1e5d      	subs	r5, r3, #1
 8001708:	41ab      	sbcs	r3, r5
 800170a:	4334      	orrs	r4, r6
 800170c:	1a12      	subs	r2, r2, r0
 800170e:	4690      	mov	r8, r2
 8001710:	4323      	orrs	r3, r4
 8001712:	e02c      	b.n	800176e <__aeabi_dadd+0x432>
 8001714:	0742      	lsls	r2, r0, #29
 8001716:	08db      	lsrs	r3, r3, #3
 8001718:	4313      	orrs	r3, r2
 800171a:	08c0      	lsrs	r0, r0, #3
 800171c:	e73b      	b.n	8001596 <__aeabi_dadd+0x25a>
 800171e:	185c      	adds	r4, r3, r1
 8001720:	429c      	cmp	r4, r3
 8001722:	419b      	sbcs	r3, r3
 8001724:	4440      	add	r0, r8
 8001726:	425b      	negs	r3, r3
 8001728:	18c7      	adds	r7, r0, r3
 800172a:	2601      	movs	r6, #1
 800172c:	023b      	lsls	r3, r7, #8
 800172e:	d400      	bmi.n	8001732 <__aeabi_dadd+0x3f6>
 8001730:	e729      	b.n	8001586 <__aeabi_dadd+0x24a>
 8001732:	2602      	movs	r6, #2
 8001734:	4a9e      	ldr	r2, [pc, #632]	; (80019b0 <__aeabi_dadd+0x674>)
 8001736:	0863      	lsrs	r3, r4, #1
 8001738:	4017      	ands	r7, r2
 800173a:	2201      	movs	r2, #1
 800173c:	4014      	ands	r4, r2
 800173e:	431c      	orrs	r4, r3
 8001740:	07fb      	lsls	r3, r7, #31
 8001742:	431c      	orrs	r4, r3
 8001744:	087f      	lsrs	r7, r7, #1
 8001746:	e673      	b.n	8001430 <__aeabi_dadd+0xf4>
 8001748:	4644      	mov	r4, r8
 800174a:	3a20      	subs	r2, #32
 800174c:	40d4      	lsrs	r4, r2
 800174e:	4662      	mov	r2, ip
 8001750:	2a20      	cmp	r2, #32
 8001752:	d005      	beq.n	8001760 <__aeabi_dadd+0x424>
 8001754:	4667      	mov	r7, ip
 8001756:	2240      	movs	r2, #64	; 0x40
 8001758:	1bd2      	subs	r2, r2, r7
 800175a:	4647      	mov	r7, r8
 800175c:	4097      	lsls	r7, r2
 800175e:	4339      	orrs	r1, r7
 8001760:	1e4a      	subs	r2, r1, #1
 8001762:	4191      	sbcs	r1, r2
 8001764:	4321      	orrs	r1, r4
 8001766:	e635      	b.n	80013d4 <__aeabi_dadd+0x98>
 8001768:	4303      	orrs	r3, r0
 800176a:	1e58      	subs	r0, r3, #1
 800176c:	4183      	sbcs	r3, r0
 800176e:	1acc      	subs	r4, r1, r3
 8001770:	42a1      	cmp	r1, r4
 8001772:	41bf      	sbcs	r7, r7
 8001774:	4643      	mov	r3, r8
 8001776:	427f      	negs	r7, r7
 8001778:	4655      	mov	r5, sl
 800177a:	464e      	mov	r6, r9
 800177c:	1bdf      	subs	r7, r3, r7
 800177e:	e62e      	b.n	80013de <__aeabi_dadd+0xa2>
 8001780:	0002      	movs	r2, r0
 8001782:	431a      	orrs	r2, r3
 8001784:	d100      	bne.n	8001788 <__aeabi_dadd+0x44c>
 8001786:	e0bd      	b.n	8001904 <__aeabi_dadd+0x5c8>
 8001788:	4662      	mov	r2, ip
 800178a:	4664      	mov	r4, ip
 800178c:	3a01      	subs	r2, #1
 800178e:	2c01      	cmp	r4, #1
 8001790:	d100      	bne.n	8001794 <__aeabi_dadd+0x458>
 8001792:	e0e5      	b.n	8001960 <__aeabi_dadd+0x624>
 8001794:	4c85      	ldr	r4, [pc, #532]	; (80019ac <__aeabi_dadd+0x670>)
 8001796:	45a4      	cmp	ip, r4
 8001798:	d058      	beq.n	800184c <__aeabi_dadd+0x510>
 800179a:	4694      	mov	ip, r2
 800179c:	e749      	b.n	8001632 <__aeabi_dadd+0x2f6>
 800179e:	4664      	mov	r4, ip
 80017a0:	2220      	movs	r2, #32
 80017a2:	1b12      	subs	r2, r2, r4
 80017a4:	4644      	mov	r4, r8
 80017a6:	4094      	lsls	r4, r2
 80017a8:	000f      	movs	r7, r1
 80017aa:	46a1      	mov	r9, r4
 80017ac:	4664      	mov	r4, ip
 80017ae:	4091      	lsls	r1, r2
 80017b0:	40e7      	lsrs	r7, r4
 80017b2:	464c      	mov	r4, r9
 80017b4:	1e4a      	subs	r2, r1, #1
 80017b6:	4191      	sbcs	r1, r2
 80017b8:	433c      	orrs	r4, r7
 80017ba:	4642      	mov	r2, r8
 80017bc:	430c      	orrs	r4, r1
 80017be:	4661      	mov	r1, ip
 80017c0:	40ca      	lsrs	r2, r1
 80017c2:	1880      	adds	r0, r0, r2
 80017c4:	e6f4      	b.n	80015b0 <__aeabi_dadd+0x274>
 80017c6:	4c79      	ldr	r4, [pc, #484]	; (80019ac <__aeabi_dadd+0x670>)
 80017c8:	42a2      	cmp	r2, r4
 80017ca:	d100      	bne.n	80017ce <__aeabi_dadd+0x492>
 80017cc:	e6fd      	b.n	80015ca <__aeabi_dadd+0x28e>
 80017ce:	1859      	adds	r1, r3, r1
 80017d0:	4299      	cmp	r1, r3
 80017d2:	419b      	sbcs	r3, r3
 80017d4:	4440      	add	r0, r8
 80017d6:	425f      	negs	r7, r3
 80017d8:	19c7      	adds	r7, r0, r7
 80017da:	07fc      	lsls	r4, r7, #31
 80017dc:	0849      	lsrs	r1, r1, #1
 80017de:	0016      	movs	r6, r2
 80017e0:	430c      	orrs	r4, r1
 80017e2:	087f      	lsrs	r7, r7, #1
 80017e4:	e6cf      	b.n	8001586 <__aeabi_dadd+0x24a>
 80017e6:	1acc      	subs	r4, r1, r3
 80017e8:	42a1      	cmp	r1, r4
 80017ea:	41bf      	sbcs	r7, r7
 80017ec:	4643      	mov	r3, r8
 80017ee:	427f      	negs	r7, r7
 80017f0:	1a18      	subs	r0, r3, r0
 80017f2:	4655      	mov	r5, sl
 80017f4:	1bc7      	subs	r7, r0, r7
 80017f6:	e5f7      	b.n	80013e8 <__aeabi_dadd+0xac>
 80017f8:	08c9      	lsrs	r1, r1, #3
 80017fa:	077b      	lsls	r3, r7, #29
 80017fc:	4655      	mov	r5, sl
 80017fe:	430b      	orrs	r3, r1
 8001800:	08f8      	lsrs	r0, r7, #3
 8001802:	e6c8      	b.n	8001596 <__aeabi_dadd+0x25a>
 8001804:	2c00      	cmp	r4, #0
 8001806:	d000      	beq.n	800180a <__aeabi_dadd+0x4ce>
 8001808:	e081      	b.n	800190e <__aeabi_dadd+0x5d2>
 800180a:	4643      	mov	r3, r8
 800180c:	430b      	orrs	r3, r1
 800180e:	d115      	bne.n	800183c <__aeabi_dadd+0x500>
 8001810:	2080      	movs	r0, #128	; 0x80
 8001812:	2500      	movs	r5, #0
 8001814:	0300      	lsls	r0, r0, #12
 8001816:	e6e3      	b.n	80015e0 <__aeabi_dadd+0x2a4>
 8001818:	1a5c      	subs	r4, r3, r1
 800181a:	42a3      	cmp	r3, r4
 800181c:	419b      	sbcs	r3, r3
 800181e:	1bc7      	subs	r7, r0, r7
 8001820:	425b      	negs	r3, r3
 8001822:	2601      	movs	r6, #1
 8001824:	1aff      	subs	r7, r7, r3
 8001826:	e5da      	b.n	80013de <__aeabi_dadd+0xa2>
 8001828:	0742      	lsls	r2, r0, #29
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	4313      	orrs	r3, r2
 800182e:	08c0      	lsrs	r0, r0, #3
 8001830:	e6d2      	b.n	80015d8 <__aeabi_dadd+0x29c>
 8001832:	0742      	lsls	r2, r0, #29
 8001834:	08db      	lsrs	r3, r3, #3
 8001836:	4313      	orrs	r3, r2
 8001838:	08c0      	lsrs	r0, r0, #3
 800183a:	e6ac      	b.n	8001596 <__aeabi_dadd+0x25a>
 800183c:	4643      	mov	r3, r8
 800183e:	4642      	mov	r2, r8
 8001840:	08c9      	lsrs	r1, r1, #3
 8001842:	075b      	lsls	r3, r3, #29
 8001844:	4655      	mov	r5, sl
 8001846:	430b      	orrs	r3, r1
 8001848:	08d0      	lsrs	r0, r2, #3
 800184a:	e6c5      	b.n	80015d8 <__aeabi_dadd+0x29c>
 800184c:	4643      	mov	r3, r8
 800184e:	4642      	mov	r2, r8
 8001850:	075b      	lsls	r3, r3, #29
 8001852:	08c9      	lsrs	r1, r1, #3
 8001854:	430b      	orrs	r3, r1
 8001856:	08d0      	lsrs	r0, r2, #3
 8001858:	e6be      	b.n	80015d8 <__aeabi_dadd+0x29c>
 800185a:	4303      	orrs	r3, r0
 800185c:	001c      	movs	r4, r3
 800185e:	1e63      	subs	r3, r4, #1
 8001860:	419c      	sbcs	r4, r3
 8001862:	e6fc      	b.n	800165e <__aeabi_dadd+0x322>
 8001864:	0002      	movs	r2, r0
 8001866:	3c20      	subs	r4, #32
 8001868:	40e2      	lsrs	r2, r4
 800186a:	0014      	movs	r4, r2
 800186c:	4662      	mov	r2, ip
 800186e:	2a20      	cmp	r2, #32
 8001870:	d003      	beq.n	800187a <__aeabi_dadd+0x53e>
 8001872:	2540      	movs	r5, #64	; 0x40
 8001874:	1aad      	subs	r5, r5, r2
 8001876:	40a8      	lsls	r0, r5
 8001878:	4303      	orrs	r3, r0
 800187a:	1e58      	subs	r0, r3, #1
 800187c:	4183      	sbcs	r3, r0
 800187e:	4323      	orrs	r3, r4
 8001880:	e775      	b.n	800176e <__aeabi_dadd+0x432>
 8001882:	2a00      	cmp	r2, #0
 8001884:	d0e2      	beq.n	800184c <__aeabi_dadd+0x510>
 8001886:	003a      	movs	r2, r7
 8001888:	430a      	orrs	r2, r1
 800188a:	d0cd      	beq.n	8001828 <__aeabi_dadd+0x4ec>
 800188c:	0742      	lsls	r2, r0, #29
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	4313      	orrs	r3, r2
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	08c0      	lsrs	r0, r0, #3
 8001896:	0312      	lsls	r2, r2, #12
 8001898:	4210      	tst	r0, r2
 800189a:	d006      	beq.n	80018aa <__aeabi_dadd+0x56e>
 800189c:	08fc      	lsrs	r4, r7, #3
 800189e:	4214      	tst	r4, r2
 80018a0:	d103      	bne.n	80018aa <__aeabi_dadd+0x56e>
 80018a2:	0020      	movs	r0, r4
 80018a4:	08cb      	lsrs	r3, r1, #3
 80018a6:	077a      	lsls	r2, r7, #29
 80018a8:	4313      	orrs	r3, r2
 80018aa:	0f5a      	lsrs	r2, r3, #29
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	0752      	lsls	r2, r2, #29
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	e690      	b.n	80015d8 <__aeabi_dadd+0x29c>
 80018b6:	4643      	mov	r3, r8
 80018b8:	430b      	orrs	r3, r1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x582>
 80018bc:	e709      	b.n	80016d2 <__aeabi_dadd+0x396>
 80018be:	4643      	mov	r3, r8
 80018c0:	4642      	mov	r2, r8
 80018c2:	08c9      	lsrs	r1, r1, #3
 80018c4:	075b      	lsls	r3, r3, #29
 80018c6:	4655      	mov	r5, sl
 80018c8:	430b      	orrs	r3, r1
 80018ca:	08d0      	lsrs	r0, r2, #3
 80018cc:	e666      	b.n	800159c <__aeabi_dadd+0x260>
 80018ce:	1acc      	subs	r4, r1, r3
 80018d0:	42a1      	cmp	r1, r4
 80018d2:	4189      	sbcs	r1, r1
 80018d4:	1a3f      	subs	r7, r7, r0
 80018d6:	4249      	negs	r1, r1
 80018d8:	4655      	mov	r5, sl
 80018da:	2601      	movs	r6, #1
 80018dc:	1a7f      	subs	r7, r7, r1
 80018de:	e57e      	b.n	80013de <__aeabi_dadd+0xa2>
 80018e0:	4642      	mov	r2, r8
 80018e2:	1a5c      	subs	r4, r3, r1
 80018e4:	1a87      	subs	r7, r0, r2
 80018e6:	42a3      	cmp	r3, r4
 80018e8:	4192      	sbcs	r2, r2
 80018ea:	4252      	negs	r2, r2
 80018ec:	1abf      	subs	r7, r7, r2
 80018ee:	023a      	lsls	r2, r7, #8
 80018f0:	d53d      	bpl.n	800196e <__aeabi_dadd+0x632>
 80018f2:	1acc      	subs	r4, r1, r3
 80018f4:	42a1      	cmp	r1, r4
 80018f6:	4189      	sbcs	r1, r1
 80018f8:	4643      	mov	r3, r8
 80018fa:	4249      	negs	r1, r1
 80018fc:	1a1f      	subs	r7, r3, r0
 80018fe:	4655      	mov	r5, sl
 8001900:	1a7f      	subs	r7, r7, r1
 8001902:	e595      	b.n	8001430 <__aeabi_dadd+0xf4>
 8001904:	077b      	lsls	r3, r7, #29
 8001906:	08c9      	lsrs	r1, r1, #3
 8001908:	430b      	orrs	r3, r1
 800190a:	08f8      	lsrs	r0, r7, #3
 800190c:	e643      	b.n	8001596 <__aeabi_dadd+0x25a>
 800190e:	4644      	mov	r4, r8
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	430c      	orrs	r4, r1
 8001914:	d130      	bne.n	8001978 <__aeabi_dadd+0x63c>
 8001916:	0742      	lsls	r2, r0, #29
 8001918:	4313      	orrs	r3, r2
 800191a:	08c0      	lsrs	r0, r0, #3
 800191c:	e65c      	b.n	80015d8 <__aeabi_dadd+0x29c>
 800191e:	077b      	lsls	r3, r7, #29
 8001920:	08c9      	lsrs	r1, r1, #3
 8001922:	430b      	orrs	r3, r1
 8001924:	08f8      	lsrs	r0, r7, #3
 8001926:	e639      	b.n	800159c <__aeabi_dadd+0x260>
 8001928:	185c      	adds	r4, r3, r1
 800192a:	429c      	cmp	r4, r3
 800192c:	419b      	sbcs	r3, r3
 800192e:	4440      	add	r0, r8
 8001930:	425b      	negs	r3, r3
 8001932:	18c7      	adds	r7, r0, r3
 8001934:	023b      	lsls	r3, r7, #8
 8001936:	d400      	bmi.n	800193a <__aeabi_dadd+0x5fe>
 8001938:	e625      	b.n	8001586 <__aeabi_dadd+0x24a>
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <__aeabi_dadd+0x674>)
 800193c:	2601      	movs	r6, #1
 800193e:	401f      	ands	r7, r3
 8001940:	e621      	b.n	8001586 <__aeabi_dadd+0x24a>
 8001942:	0004      	movs	r4, r0
 8001944:	3a20      	subs	r2, #32
 8001946:	40d4      	lsrs	r4, r2
 8001948:	4662      	mov	r2, ip
 800194a:	2a20      	cmp	r2, #32
 800194c:	d004      	beq.n	8001958 <__aeabi_dadd+0x61c>
 800194e:	2240      	movs	r2, #64	; 0x40
 8001950:	4666      	mov	r6, ip
 8001952:	1b92      	subs	r2, r2, r6
 8001954:	4090      	lsls	r0, r2
 8001956:	4303      	orrs	r3, r0
 8001958:	1e5a      	subs	r2, r3, #1
 800195a:	4193      	sbcs	r3, r2
 800195c:	431c      	orrs	r4, r3
 800195e:	e67e      	b.n	800165e <__aeabi_dadd+0x322>
 8001960:	185c      	adds	r4, r3, r1
 8001962:	428c      	cmp	r4, r1
 8001964:	4189      	sbcs	r1, r1
 8001966:	4440      	add	r0, r8
 8001968:	4249      	negs	r1, r1
 800196a:	1847      	adds	r7, r0, r1
 800196c:	e6dd      	b.n	800172a <__aeabi_dadd+0x3ee>
 800196e:	0023      	movs	r3, r4
 8001970:	433b      	orrs	r3, r7
 8001972:	d100      	bne.n	8001976 <__aeabi_dadd+0x63a>
 8001974:	e6ad      	b.n	80016d2 <__aeabi_dadd+0x396>
 8001976:	e606      	b.n	8001586 <__aeabi_dadd+0x24a>
 8001978:	0744      	lsls	r4, r0, #29
 800197a:	4323      	orrs	r3, r4
 800197c:	2480      	movs	r4, #128	; 0x80
 800197e:	08c0      	lsrs	r0, r0, #3
 8001980:	0324      	lsls	r4, r4, #12
 8001982:	4220      	tst	r0, r4
 8001984:	d008      	beq.n	8001998 <__aeabi_dadd+0x65c>
 8001986:	4642      	mov	r2, r8
 8001988:	08d6      	lsrs	r6, r2, #3
 800198a:	4226      	tst	r6, r4
 800198c:	d104      	bne.n	8001998 <__aeabi_dadd+0x65c>
 800198e:	4655      	mov	r5, sl
 8001990:	0030      	movs	r0, r6
 8001992:	08cb      	lsrs	r3, r1, #3
 8001994:	0751      	lsls	r1, r2, #29
 8001996:	430b      	orrs	r3, r1
 8001998:	0f5a      	lsrs	r2, r3, #29
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	0752      	lsls	r2, r2, #29
 80019a0:	4313      	orrs	r3, r2
 80019a2:	e619      	b.n	80015d8 <__aeabi_dadd+0x29c>
 80019a4:	2300      	movs	r3, #0
 80019a6:	4a01      	ldr	r2, [pc, #4]	; (80019ac <__aeabi_dadd+0x670>)
 80019a8:	001f      	movs	r7, r3
 80019aa:	e55e      	b.n	800146a <__aeabi_dadd+0x12e>
 80019ac:	000007ff 	.word	0x000007ff
 80019b0:	ff7fffff 	.word	0xff7fffff

080019b4 <__aeabi_ddiv>:
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b6:	4657      	mov	r7, sl
 80019b8:	464e      	mov	r6, r9
 80019ba:	4645      	mov	r5, r8
 80019bc:	46de      	mov	lr, fp
 80019be:	b5e0      	push	{r5, r6, r7, lr}
 80019c0:	4681      	mov	r9, r0
 80019c2:	0005      	movs	r5, r0
 80019c4:	030c      	lsls	r4, r1, #12
 80019c6:	0048      	lsls	r0, r1, #1
 80019c8:	4692      	mov	sl, r2
 80019ca:	001f      	movs	r7, r3
 80019cc:	b085      	sub	sp, #20
 80019ce:	0b24      	lsrs	r4, r4, #12
 80019d0:	0d40      	lsrs	r0, r0, #21
 80019d2:	0fce      	lsrs	r6, r1, #31
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d100      	bne.n	80019da <__aeabi_ddiv+0x26>
 80019d8:	e156      	b.n	8001c88 <__aeabi_ddiv+0x2d4>
 80019da:	4bd4      	ldr	r3, [pc, #848]	; (8001d2c <__aeabi_ddiv+0x378>)
 80019dc:	4298      	cmp	r0, r3
 80019de:	d100      	bne.n	80019e2 <__aeabi_ddiv+0x2e>
 80019e0:	e172      	b.n	8001cc8 <__aeabi_ddiv+0x314>
 80019e2:	0f6b      	lsrs	r3, r5, #29
 80019e4:	00e4      	lsls	r4, r4, #3
 80019e6:	431c      	orrs	r4, r3
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	041b      	lsls	r3, r3, #16
 80019ec:	4323      	orrs	r3, r4
 80019ee:	4698      	mov	r8, r3
 80019f0:	4bcf      	ldr	r3, [pc, #828]	; (8001d30 <__aeabi_ddiv+0x37c>)
 80019f2:	00ed      	lsls	r5, r5, #3
 80019f4:	469b      	mov	fp, r3
 80019f6:	2300      	movs	r3, #0
 80019f8:	4699      	mov	r9, r3
 80019fa:	4483      	add	fp, r0
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	033c      	lsls	r4, r7, #12
 8001a00:	007b      	lsls	r3, r7, #1
 8001a02:	4650      	mov	r0, sl
 8001a04:	0b24      	lsrs	r4, r4, #12
 8001a06:	0d5b      	lsrs	r3, r3, #21
 8001a08:	0fff      	lsrs	r7, r7, #31
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_ddiv+0x5c>
 8001a0e:	e11f      	b.n	8001c50 <__aeabi_ddiv+0x29c>
 8001a10:	4ac6      	ldr	r2, [pc, #792]	; (8001d2c <__aeabi_ddiv+0x378>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d100      	bne.n	8001a18 <__aeabi_ddiv+0x64>
 8001a16:	e162      	b.n	8001cde <__aeabi_ddiv+0x32a>
 8001a18:	49c5      	ldr	r1, [pc, #788]	; (8001d30 <__aeabi_ddiv+0x37c>)
 8001a1a:	0f42      	lsrs	r2, r0, #29
 8001a1c:	468c      	mov	ip, r1
 8001a1e:	00e4      	lsls	r4, r4, #3
 8001a20:	4659      	mov	r1, fp
 8001a22:	4314      	orrs	r4, r2
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	4463      	add	r3, ip
 8001a28:	0412      	lsls	r2, r2, #16
 8001a2a:	1acb      	subs	r3, r1, r3
 8001a2c:	4314      	orrs	r4, r2
 8001a2e:	469b      	mov	fp, r3
 8001a30:	00c2      	lsls	r2, r0, #3
 8001a32:	2000      	movs	r0, #0
 8001a34:	0033      	movs	r3, r6
 8001a36:	407b      	eors	r3, r7
 8001a38:	469a      	mov	sl, r3
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d827      	bhi.n	8001a90 <__aeabi_ddiv+0xdc>
 8001a40:	49bc      	ldr	r1, [pc, #752]	; (8001d34 <__aeabi_ddiv+0x380>)
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	58cb      	ldr	r3, [r1, r3]
 8001a46:	469f      	mov	pc, r3
 8001a48:	46b2      	mov	sl, r6
 8001a4a:	9b00      	ldr	r3, [sp, #0]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d016      	beq.n	8001a7e <__aeabi_ddiv+0xca>
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0xa2>
 8001a54:	e28e      	b.n	8001f74 <__aeabi_ddiv+0x5c0>
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d000      	beq.n	8001a5c <__aeabi_ddiv+0xa8>
 8001a5a:	e0d9      	b.n	8001c10 <__aeabi_ddiv+0x25c>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2400      	movs	r4, #0
 8001a60:	2500      	movs	r5, #0
 8001a62:	4652      	mov	r2, sl
 8001a64:	051b      	lsls	r3, r3, #20
 8001a66:	4323      	orrs	r3, r4
 8001a68:	07d2      	lsls	r2, r2, #31
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	0028      	movs	r0, r5
 8001a6e:	0019      	movs	r1, r3
 8001a70:	b005      	add	sp, #20
 8001a72:	bcf0      	pop	{r4, r5, r6, r7}
 8001a74:	46bb      	mov	fp, r7
 8001a76:	46b2      	mov	sl, r6
 8001a78:	46a9      	mov	r9, r5
 8001a7a:	46a0      	mov	r8, r4
 8001a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7e:	2400      	movs	r4, #0
 8001a80:	2500      	movs	r5, #0
 8001a82:	4baa      	ldr	r3, [pc, #680]	; (8001d2c <__aeabi_ddiv+0x378>)
 8001a84:	e7ed      	b.n	8001a62 <__aeabi_ddiv+0xae>
 8001a86:	46ba      	mov	sl, r7
 8001a88:	46a0      	mov	r8, r4
 8001a8a:	0015      	movs	r5, r2
 8001a8c:	9000      	str	r0, [sp, #0]
 8001a8e:	e7dc      	b.n	8001a4a <__aeabi_ddiv+0x96>
 8001a90:	4544      	cmp	r4, r8
 8001a92:	d200      	bcs.n	8001a96 <__aeabi_ddiv+0xe2>
 8001a94:	e1c7      	b.n	8001e26 <__aeabi_ddiv+0x472>
 8001a96:	d100      	bne.n	8001a9a <__aeabi_ddiv+0xe6>
 8001a98:	e1c2      	b.n	8001e20 <__aeabi_ddiv+0x46c>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	425b      	negs	r3, r3
 8001a9e:	469c      	mov	ip, r3
 8001aa0:	002e      	movs	r6, r5
 8001aa2:	4640      	mov	r0, r8
 8001aa4:	2500      	movs	r5, #0
 8001aa6:	44e3      	add	fp, ip
 8001aa8:	0223      	lsls	r3, r4, #8
 8001aaa:	0e14      	lsrs	r4, r2, #24
 8001aac:	431c      	orrs	r4, r3
 8001aae:	0c1b      	lsrs	r3, r3, #16
 8001ab0:	4699      	mov	r9, r3
 8001ab2:	0423      	lsls	r3, r4, #16
 8001ab4:	0c1f      	lsrs	r7, r3, #16
 8001ab6:	0212      	lsls	r2, r2, #8
 8001ab8:	4649      	mov	r1, r9
 8001aba:	9200      	str	r2, [sp, #0]
 8001abc:	9701      	str	r7, [sp, #4]
 8001abe:	f7fe fbb3 	bl	8000228 <__aeabi_uidivmod>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	437a      	muls	r2, r7
 8001ac6:	040b      	lsls	r3, r1, #16
 8001ac8:	0c31      	lsrs	r1, r6, #16
 8001aca:	4680      	mov	r8, r0
 8001acc:	4319      	orrs	r1, r3
 8001ace:	428a      	cmp	r2, r1
 8001ad0:	d907      	bls.n	8001ae2 <__aeabi_ddiv+0x12e>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	425b      	negs	r3, r3
 8001ad6:	469c      	mov	ip, r3
 8001ad8:	1909      	adds	r1, r1, r4
 8001ada:	44e0      	add	r8, ip
 8001adc:	428c      	cmp	r4, r1
 8001ade:	d800      	bhi.n	8001ae2 <__aeabi_ddiv+0x12e>
 8001ae0:	e207      	b.n	8001ef2 <__aeabi_ddiv+0x53e>
 8001ae2:	1a88      	subs	r0, r1, r2
 8001ae4:	4649      	mov	r1, r9
 8001ae6:	f7fe fb9f 	bl	8000228 <__aeabi_uidivmod>
 8001aea:	0409      	lsls	r1, r1, #16
 8001aec:	468c      	mov	ip, r1
 8001aee:	0431      	lsls	r1, r6, #16
 8001af0:	4666      	mov	r6, ip
 8001af2:	9a01      	ldr	r2, [sp, #4]
 8001af4:	0c09      	lsrs	r1, r1, #16
 8001af6:	4342      	muls	r2, r0
 8001af8:	0003      	movs	r3, r0
 8001afa:	4331      	orrs	r1, r6
 8001afc:	428a      	cmp	r2, r1
 8001afe:	d904      	bls.n	8001b0a <__aeabi_ddiv+0x156>
 8001b00:	1909      	adds	r1, r1, r4
 8001b02:	3b01      	subs	r3, #1
 8001b04:	428c      	cmp	r4, r1
 8001b06:	d800      	bhi.n	8001b0a <__aeabi_ddiv+0x156>
 8001b08:	e1ed      	b.n	8001ee6 <__aeabi_ddiv+0x532>
 8001b0a:	1a88      	subs	r0, r1, r2
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	0412      	lsls	r2, r2, #16
 8001b10:	431a      	orrs	r2, r3
 8001b12:	4690      	mov	r8, r2
 8001b14:	4641      	mov	r1, r8
 8001b16:	9b00      	ldr	r3, [sp, #0]
 8001b18:	040e      	lsls	r6, r1, #16
 8001b1a:	0c1b      	lsrs	r3, r3, #16
 8001b1c:	001f      	movs	r7, r3
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	9b00      	ldr	r3, [sp, #0]
 8001b22:	0c36      	lsrs	r6, r6, #16
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	0c19      	lsrs	r1, r3, #16
 8001b28:	000b      	movs	r3, r1
 8001b2a:	4373      	muls	r3, r6
 8001b2c:	0c12      	lsrs	r2, r2, #16
 8001b2e:	437e      	muls	r6, r7
 8001b30:	9103      	str	r1, [sp, #12]
 8001b32:	4351      	muls	r1, r2
 8001b34:	437a      	muls	r2, r7
 8001b36:	0c1f      	lsrs	r7, r3, #16
 8001b38:	46bc      	mov	ip, r7
 8001b3a:	1876      	adds	r6, r6, r1
 8001b3c:	4466      	add	r6, ip
 8001b3e:	42b1      	cmp	r1, r6
 8001b40:	d903      	bls.n	8001b4a <__aeabi_ddiv+0x196>
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0249      	lsls	r1, r1, #9
 8001b46:	468c      	mov	ip, r1
 8001b48:	4462      	add	r2, ip
 8001b4a:	0c31      	lsrs	r1, r6, #16
 8001b4c:	188a      	adds	r2, r1, r2
 8001b4e:	0431      	lsls	r1, r6, #16
 8001b50:	041e      	lsls	r6, r3, #16
 8001b52:	0c36      	lsrs	r6, r6, #16
 8001b54:	198e      	adds	r6, r1, r6
 8001b56:	4290      	cmp	r0, r2
 8001b58:	d302      	bcc.n	8001b60 <__aeabi_ddiv+0x1ac>
 8001b5a:	d112      	bne.n	8001b82 <__aeabi_ddiv+0x1ce>
 8001b5c:	42b5      	cmp	r5, r6
 8001b5e:	d210      	bcs.n	8001b82 <__aeabi_ddiv+0x1ce>
 8001b60:	4643      	mov	r3, r8
 8001b62:	1e59      	subs	r1, r3, #1
 8001b64:	9b00      	ldr	r3, [sp, #0]
 8001b66:	469c      	mov	ip, r3
 8001b68:	4465      	add	r5, ip
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	429d      	cmp	r5, r3
 8001b6e:	419b      	sbcs	r3, r3
 8001b70:	425b      	negs	r3, r3
 8001b72:	191b      	adds	r3, r3, r4
 8001b74:	18c0      	adds	r0, r0, r3
 8001b76:	4284      	cmp	r4, r0
 8001b78:	d200      	bcs.n	8001b7c <__aeabi_ddiv+0x1c8>
 8001b7a:	e1a0      	b.n	8001ebe <__aeabi_ddiv+0x50a>
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_ddiv+0x1cc>
 8001b7e:	e19b      	b.n	8001eb8 <__aeabi_ddiv+0x504>
 8001b80:	4688      	mov	r8, r1
 8001b82:	1bae      	subs	r6, r5, r6
 8001b84:	42b5      	cmp	r5, r6
 8001b86:	41ad      	sbcs	r5, r5
 8001b88:	1a80      	subs	r0, r0, r2
 8001b8a:	426d      	negs	r5, r5
 8001b8c:	1b40      	subs	r0, r0, r5
 8001b8e:	4284      	cmp	r4, r0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_ddiv+0x1e0>
 8001b92:	e1d5      	b.n	8001f40 <__aeabi_ddiv+0x58c>
 8001b94:	4649      	mov	r1, r9
 8001b96:	f7fe fb47 	bl	8000228 <__aeabi_uidivmod>
 8001b9a:	9a01      	ldr	r2, [sp, #4]
 8001b9c:	040b      	lsls	r3, r1, #16
 8001b9e:	4342      	muls	r2, r0
 8001ba0:	0c31      	lsrs	r1, r6, #16
 8001ba2:	0005      	movs	r5, r0
 8001ba4:	4319      	orrs	r1, r3
 8001ba6:	428a      	cmp	r2, r1
 8001ba8:	d900      	bls.n	8001bac <__aeabi_ddiv+0x1f8>
 8001baa:	e16c      	b.n	8001e86 <__aeabi_ddiv+0x4d2>
 8001bac:	1a88      	subs	r0, r1, r2
 8001bae:	4649      	mov	r1, r9
 8001bb0:	f7fe fb3a 	bl	8000228 <__aeabi_uidivmod>
 8001bb4:	9a01      	ldr	r2, [sp, #4]
 8001bb6:	0436      	lsls	r6, r6, #16
 8001bb8:	4342      	muls	r2, r0
 8001bba:	0409      	lsls	r1, r1, #16
 8001bbc:	0c36      	lsrs	r6, r6, #16
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	430e      	orrs	r6, r1
 8001bc2:	42b2      	cmp	r2, r6
 8001bc4:	d900      	bls.n	8001bc8 <__aeabi_ddiv+0x214>
 8001bc6:	e153      	b.n	8001e70 <__aeabi_ddiv+0x4bc>
 8001bc8:	9803      	ldr	r0, [sp, #12]
 8001bca:	1ab6      	subs	r6, r6, r2
 8001bcc:	0002      	movs	r2, r0
 8001bce:	042d      	lsls	r5, r5, #16
 8001bd0:	431d      	orrs	r5, r3
 8001bd2:	9f02      	ldr	r7, [sp, #8]
 8001bd4:	042b      	lsls	r3, r5, #16
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	435a      	muls	r2, r3
 8001bda:	437b      	muls	r3, r7
 8001bdc:	469c      	mov	ip, r3
 8001bde:	0c29      	lsrs	r1, r5, #16
 8001be0:	4348      	muls	r0, r1
 8001be2:	0c13      	lsrs	r3, r2, #16
 8001be4:	4484      	add	ip, r0
 8001be6:	4463      	add	r3, ip
 8001be8:	4379      	muls	r1, r7
 8001bea:	4298      	cmp	r0, r3
 8001bec:	d903      	bls.n	8001bf6 <__aeabi_ddiv+0x242>
 8001bee:	2080      	movs	r0, #128	; 0x80
 8001bf0:	0240      	lsls	r0, r0, #9
 8001bf2:	4684      	mov	ip, r0
 8001bf4:	4461      	add	r1, ip
 8001bf6:	0c18      	lsrs	r0, r3, #16
 8001bf8:	0412      	lsls	r2, r2, #16
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	0c12      	lsrs	r2, r2, #16
 8001bfe:	1841      	adds	r1, r0, r1
 8001c00:	189b      	adds	r3, r3, r2
 8001c02:	428e      	cmp	r6, r1
 8001c04:	d200      	bcs.n	8001c08 <__aeabi_ddiv+0x254>
 8001c06:	e0ff      	b.n	8001e08 <__aeabi_ddiv+0x454>
 8001c08:	d100      	bne.n	8001c0c <__aeabi_ddiv+0x258>
 8001c0a:	e0fa      	b.n	8001e02 <__aeabi_ddiv+0x44e>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	431d      	orrs	r5, r3
 8001c10:	4a49      	ldr	r2, [pc, #292]	; (8001d38 <__aeabi_ddiv+0x384>)
 8001c12:	445a      	add	r2, fp
 8001c14:	2a00      	cmp	r2, #0
 8001c16:	dc00      	bgt.n	8001c1a <__aeabi_ddiv+0x266>
 8001c18:	e0aa      	b.n	8001d70 <__aeabi_ddiv+0x3bc>
 8001c1a:	076b      	lsls	r3, r5, #29
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_ddiv+0x26c>
 8001c1e:	e13d      	b.n	8001e9c <__aeabi_ddiv+0x4e8>
 8001c20:	08ed      	lsrs	r5, r5, #3
 8001c22:	4643      	mov	r3, r8
 8001c24:	01db      	lsls	r3, r3, #7
 8001c26:	d506      	bpl.n	8001c36 <__aeabi_ddiv+0x282>
 8001c28:	4642      	mov	r2, r8
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <__aeabi_ddiv+0x388>)
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	4690      	mov	r8, r2
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	00d2      	lsls	r2, r2, #3
 8001c34:	445a      	add	r2, fp
 8001c36:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <__aeabi_ddiv+0x38c>)
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dd00      	ble.n	8001c3e <__aeabi_ddiv+0x28a>
 8001c3c:	e71f      	b.n	8001a7e <__aeabi_ddiv+0xca>
 8001c3e:	4643      	mov	r3, r8
 8001c40:	075b      	lsls	r3, r3, #29
 8001c42:	431d      	orrs	r5, r3
 8001c44:	4643      	mov	r3, r8
 8001c46:	0552      	lsls	r2, r2, #21
 8001c48:	025c      	lsls	r4, r3, #9
 8001c4a:	0b24      	lsrs	r4, r4, #12
 8001c4c:	0d53      	lsrs	r3, r2, #21
 8001c4e:	e708      	b.n	8001a62 <__aeabi_ddiv+0xae>
 8001c50:	4652      	mov	r2, sl
 8001c52:	4322      	orrs	r2, r4
 8001c54:	d100      	bne.n	8001c58 <__aeabi_ddiv+0x2a4>
 8001c56:	e07b      	b.n	8001d50 <__aeabi_ddiv+0x39c>
 8001c58:	2c00      	cmp	r4, #0
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_ddiv+0x2aa>
 8001c5c:	e0fa      	b.n	8001e54 <__aeabi_ddiv+0x4a0>
 8001c5e:	0020      	movs	r0, r4
 8001c60:	f001 f9fc 	bl	800305c <__clzsi2>
 8001c64:	0002      	movs	r2, r0
 8001c66:	3a0b      	subs	r2, #11
 8001c68:	231d      	movs	r3, #29
 8001c6a:	0001      	movs	r1, r0
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	4652      	mov	r2, sl
 8001c70:	3908      	subs	r1, #8
 8001c72:	40da      	lsrs	r2, r3
 8001c74:	408c      	lsls	r4, r1
 8001c76:	4314      	orrs	r4, r2
 8001c78:	4652      	mov	r2, sl
 8001c7a:	408a      	lsls	r2, r1
 8001c7c:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <__aeabi_ddiv+0x390>)
 8001c7e:	4458      	add	r0, fp
 8001c80:	469b      	mov	fp, r3
 8001c82:	4483      	add	fp, r0
 8001c84:	2000      	movs	r0, #0
 8001c86:	e6d5      	b.n	8001a34 <__aeabi_ddiv+0x80>
 8001c88:	464b      	mov	r3, r9
 8001c8a:	4323      	orrs	r3, r4
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	d044      	beq.n	8001d1a <__aeabi_ddiv+0x366>
 8001c90:	2c00      	cmp	r4, #0
 8001c92:	d100      	bne.n	8001c96 <__aeabi_ddiv+0x2e2>
 8001c94:	e0ce      	b.n	8001e34 <__aeabi_ddiv+0x480>
 8001c96:	0020      	movs	r0, r4
 8001c98:	f001 f9e0 	bl	800305c <__clzsi2>
 8001c9c:	0001      	movs	r1, r0
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	390b      	subs	r1, #11
 8001ca2:	231d      	movs	r3, #29
 8001ca4:	1a5b      	subs	r3, r3, r1
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	0010      	movs	r0, r2
 8001caa:	40d9      	lsrs	r1, r3
 8001cac:	3808      	subs	r0, #8
 8001cae:	4084      	lsls	r4, r0
 8001cb0:	000b      	movs	r3, r1
 8001cb2:	464d      	mov	r5, r9
 8001cb4:	4323      	orrs	r3, r4
 8001cb6:	4698      	mov	r8, r3
 8001cb8:	4085      	lsls	r5, r0
 8001cba:	4823      	ldr	r0, [pc, #140]	; (8001d48 <__aeabi_ddiv+0x394>)
 8001cbc:	1a83      	subs	r3, r0, r2
 8001cbe:	469b      	mov	fp, r3
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	4699      	mov	r9, r3
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	e69a      	b.n	80019fe <__aeabi_ddiv+0x4a>
 8001cc8:	464b      	mov	r3, r9
 8001cca:	4323      	orrs	r3, r4
 8001ccc:	4698      	mov	r8, r3
 8001cce:	d11d      	bne.n	8001d0c <__aeabi_ddiv+0x358>
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	4699      	mov	r9, r3
 8001cd4:	3b06      	subs	r3, #6
 8001cd6:	2500      	movs	r5, #0
 8001cd8:	4683      	mov	fp, r0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	e68f      	b.n	80019fe <__aeabi_ddiv+0x4a>
 8001cde:	4652      	mov	r2, sl
 8001ce0:	4322      	orrs	r2, r4
 8001ce2:	d109      	bne.n	8001cf8 <__aeabi_ddiv+0x344>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	4649      	mov	r1, r9
 8001ce8:	4319      	orrs	r1, r3
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <__aeabi_ddiv+0x398>)
 8001cec:	4689      	mov	r9, r1
 8001cee:	469c      	mov	ip, r3
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	44e3      	add	fp, ip
 8001cf6:	e69d      	b.n	8001a34 <__aeabi_ddiv+0x80>
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	464a      	mov	r2, r9
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <__aeabi_ddiv+0x398>)
 8001d00:	4691      	mov	r9, r2
 8001d02:	469c      	mov	ip, r3
 8001d04:	4652      	mov	r2, sl
 8001d06:	2003      	movs	r0, #3
 8001d08:	44e3      	add	fp, ip
 8001d0a:	e693      	b.n	8001a34 <__aeabi_ddiv+0x80>
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	4699      	mov	r9, r3
 8001d10:	3b09      	subs	r3, #9
 8001d12:	46a0      	mov	r8, r4
 8001d14:	4683      	mov	fp, r0
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	e671      	b.n	80019fe <__aeabi_ddiv+0x4a>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	4699      	mov	r9, r3
 8001d1e:	2300      	movs	r3, #0
 8001d20:	469b      	mov	fp, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	2500      	movs	r5, #0
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	e669      	b.n	80019fe <__aeabi_ddiv+0x4a>
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	000007ff 	.word	0x000007ff
 8001d30:	fffffc01 	.word	0xfffffc01
 8001d34:	0800ce40 	.word	0x0800ce40
 8001d38:	000003ff 	.word	0x000003ff
 8001d3c:	feffffff 	.word	0xfeffffff
 8001d40:	000007fe 	.word	0x000007fe
 8001d44:	000003f3 	.word	0x000003f3
 8001d48:	fffffc0d 	.word	0xfffffc0d
 8001d4c:	fffff801 	.word	0xfffff801
 8001d50:	4649      	mov	r1, r9
 8001d52:	2301      	movs	r3, #1
 8001d54:	4319      	orrs	r1, r3
 8001d56:	4689      	mov	r9, r1
 8001d58:	2400      	movs	r4, #0
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	e66a      	b.n	8001a34 <__aeabi_ddiv+0x80>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2480      	movs	r4, #128	; 0x80
 8001d62:	469a      	mov	sl, r3
 8001d64:	2500      	movs	r5, #0
 8001d66:	4b8a      	ldr	r3, [pc, #552]	; (8001f90 <__aeabi_ddiv+0x5dc>)
 8001d68:	0324      	lsls	r4, r4, #12
 8001d6a:	e67a      	b.n	8001a62 <__aeabi_ddiv+0xae>
 8001d6c:	2501      	movs	r5, #1
 8001d6e:	426d      	negs	r5, r5
 8001d70:	2301      	movs	r3, #1
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	2b38      	cmp	r3, #56	; 0x38
 8001d76:	dd00      	ble.n	8001d7a <__aeabi_ddiv+0x3c6>
 8001d78:	e670      	b.n	8001a5c <__aeabi_ddiv+0xa8>
 8001d7a:	2b1f      	cmp	r3, #31
 8001d7c:	dc00      	bgt.n	8001d80 <__aeabi_ddiv+0x3cc>
 8001d7e:	e0bf      	b.n	8001f00 <__aeabi_ddiv+0x54c>
 8001d80:	211f      	movs	r1, #31
 8001d82:	4249      	negs	r1, r1
 8001d84:	1a8a      	subs	r2, r1, r2
 8001d86:	4641      	mov	r1, r8
 8001d88:	40d1      	lsrs	r1, r2
 8001d8a:	000a      	movs	r2, r1
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d004      	beq.n	8001d9a <__aeabi_ddiv+0x3e6>
 8001d90:	4641      	mov	r1, r8
 8001d92:	4b80      	ldr	r3, [pc, #512]	; (8001f94 <__aeabi_ddiv+0x5e0>)
 8001d94:	445b      	add	r3, fp
 8001d96:	4099      	lsls	r1, r3
 8001d98:	430d      	orrs	r5, r1
 8001d9a:	1e6b      	subs	r3, r5, #1
 8001d9c:	419d      	sbcs	r5, r3
 8001d9e:	2307      	movs	r3, #7
 8001da0:	432a      	orrs	r2, r5
 8001da2:	001d      	movs	r5, r3
 8001da4:	2400      	movs	r4, #0
 8001da6:	4015      	ands	r5, r2
 8001da8:	4213      	tst	r3, r2
 8001daa:	d100      	bne.n	8001dae <__aeabi_ddiv+0x3fa>
 8001dac:	e0d4      	b.n	8001f58 <__aeabi_ddiv+0x5a4>
 8001dae:	210f      	movs	r1, #15
 8001db0:	2300      	movs	r3, #0
 8001db2:	4011      	ands	r1, r2
 8001db4:	2904      	cmp	r1, #4
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x406>
 8001db8:	e0cb      	b.n	8001f52 <__aeabi_ddiv+0x59e>
 8001dba:	1d11      	adds	r1, r2, #4
 8001dbc:	4291      	cmp	r1, r2
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	189b      	adds	r3, r3, r2
 8001dc4:	000a      	movs	r2, r1
 8001dc6:	0219      	lsls	r1, r3, #8
 8001dc8:	d400      	bmi.n	8001dcc <__aeabi_ddiv+0x418>
 8001dca:	e0c2      	b.n	8001f52 <__aeabi_ddiv+0x59e>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	2400      	movs	r4, #0
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	e646      	b.n	8001a62 <__aeabi_ddiv+0xae>
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	4641      	mov	r1, r8
 8001dd8:	031b      	lsls	r3, r3, #12
 8001dda:	4219      	tst	r1, r3
 8001ddc:	d008      	beq.n	8001df0 <__aeabi_ddiv+0x43c>
 8001dde:	421c      	tst	r4, r3
 8001de0:	d106      	bne.n	8001df0 <__aeabi_ddiv+0x43c>
 8001de2:	431c      	orrs	r4, r3
 8001de4:	0324      	lsls	r4, r4, #12
 8001de6:	46ba      	mov	sl, r7
 8001de8:	0015      	movs	r5, r2
 8001dea:	4b69      	ldr	r3, [pc, #420]	; (8001f90 <__aeabi_ddiv+0x5dc>)
 8001dec:	0b24      	lsrs	r4, r4, #12
 8001dee:	e638      	b.n	8001a62 <__aeabi_ddiv+0xae>
 8001df0:	2480      	movs	r4, #128	; 0x80
 8001df2:	4643      	mov	r3, r8
 8001df4:	0324      	lsls	r4, r4, #12
 8001df6:	431c      	orrs	r4, r3
 8001df8:	0324      	lsls	r4, r4, #12
 8001dfa:	46b2      	mov	sl, r6
 8001dfc:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <__aeabi_ddiv+0x5dc>)
 8001dfe:	0b24      	lsrs	r4, r4, #12
 8001e00:	e62f      	b.n	8001a62 <__aeabi_ddiv+0xae>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d100      	bne.n	8001e08 <__aeabi_ddiv+0x454>
 8001e06:	e703      	b.n	8001c10 <__aeabi_ddiv+0x25c>
 8001e08:	19a6      	adds	r6, r4, r6
 8001e0a:	1e68      	subs	r0, r5, #1
 8001e0c:	42a6      	cmp	r6, r4
 8001e0e:	d200      	bcs.n	8001e12 <__aeabi_ddiv+0x45e>
 8001e10:	e08d      	b.n	8001f2e <__aeabi_ddiv+0x57a>
 8001e12:	428e      	cmp	r6, r1
 8001e14:	d200      	bcs.n	8001e18 <__aeabi_ddiv+0x464>
 8001e16:	e0a3      	b.n	8001f60 <__aeabi_ddiv+0x5ac>
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x468>
 8001e1a:	e0b3      	b.n	8001f84 <__aeabi_ddiv+0x5d0>
 8001e1c:	0005      	movs	r5, r0
 8001e1e:	e6f5      	b.n	8001c0c <__aeabi_ddiv+0x258>
 8001e20:	42aa      	cmp	r2, r5
 8001e22:	d900      	bls.n	8001e26 <__aeabi_ddiv+0x472>
 8001e24:	e639      	b.n	8001a9a <__aeabi_ddiv+0xe6>
 8001e26:	4643      	mov	r3, r8
 8001e28:	07de      	lsls	r6, r3, #31
 8001e2a:	0858      	lsrs	r0, r3, #1
 8001e2c:	086b      	lsrs	r3, r5, #1
 8001e2e:	431e      	orrs	r6, r3
 8001e30:	07ed      	lsls	r5, r5, #31
 8001e32:	e639      	b.n	8001aa8 <__aeabi_ddiv+0xf4>
 8001e34:	4648      	mov	r0, r9
 8001e36:	f001 f911 	bl	800305c <__clzsi2>
 8001e3a:	0001      	movs	r1, r0
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	3115      	adds	r1, #21
 8001e40:	3220      	adds	r2, #32
 8001e42:	291c      	cmp	r1, #28
 8001e44:	dc00      	bgt.n	8001e48 <__aeabi_ddiv+0x494>
 8001e46:	e72c      	b.n	8001ca2 <__aeabi_ddiv+0x2ee>
 8001e48:	464b      	mov	r3, r9
 8001e4a:	3808      	subs	r0, #8
 8001e4c:	4083      	lsls	r3, r0
 8001e4e:	2500      	movs	r5, #0
 8001e50:	4698      	mov	r8, r3
 8001e52:	e732      	b.n	8001cba <__aeabi_ddiv+0x306>
 8001e54:	f001 f902 	bl	800305c <__clzsi2>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	3215      	adds	r2, #21
 8001e5e:	3020      	adds	r0, #32
 8001e60:	2a1c      	cmp	r2, #28
 8001e62:	dc00      	bgt.n	8001e66 <__aeabi_ddiv+0x4b2>
 8001e64:	e700      	b.n	8001c68 <__aeabi_ddiv+0x2b4>
 8001e66:	4654      	mov	r4, sl
 8001e68:	3b08      	subs	r3, #8
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	409c      	lsls	r4, r3
 8001e6e:	e705      	b.n	8001c7c <__aeabi_ddiv+0x2c8>
 8001e70:	1936      	adds	r6, r6, r4
 8001e72:	3b01      	subs	r3, #1
 8001e74:	42b4      	cmp	r4, r6
 8001e76:	d900      	bls.n	8001e7a <__aeabi_ddiv+0x4c6>
 8001e78:	e6a6      	b.n	8001bc8 <__aeabi_ddiv+0x214>
 8001e7a:	42b2      	cmp	r2, r6
 8001e7c:	d800      	bhi.n	8001e80 <__aeabi_ddiv+0x4cc>
 8001e7e:	e6a3      	b.n	8001bc8 <__aeabi_ddiv+0x214>
 8001e80:	1e83      	subs	r3, r0, #2
 8001e82:	1936      	adds	r6, r6, r4
 8001e84:	e6a0      	b.n	8001bc8 <__aeabi_ddiv+0x214>
 8001e86:	1909      	adds	r1, r1, r4
 8001e88:	3d01      	subs	r5, #1
 8001e8a:	428c      	cmp	r4, r1
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x4dc>
 8001e8e:	e68d      	b.n	8001bac <__aeabi_ddiv+0x1f8>
 8001e90:	428a      	cmp	r2, r1
 8001e92:	d800      	bhi.n	8001e96 <__aeabi_ddiv+0x4e2>
 8001e94:	e68a      	b.n	8001bac <__aeabi_ddiv+0x1f8>
 8001e96:	1e85      	subs	r5, r0, #2
 8001e98:	1909      	adds	r1, r1, r4
 8001e9a:	e687      	b.n	8001bac <__aeabi_ddiv+0x1f8>
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	402b      	ands	r3, r5
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0x4f2>
 8001ea4:	e6bc      	b.n	8001c20 <__aeabi_ddiv+0x26c>
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	42ab      	cmp	r3, r5
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	3504      	adds	r5, #4
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	08ed      	lsrs	r5, r5, #3
 8001eb4:	4498      	add	r8, r3
 8001eb6:	e6b4      	b.n	8001c22 <__aeabi_ddiv+0x26e>
 8001eb8:	42af      	cmp	r7, r5
 8001eba:	d900      	bls.n	8001ebe <__aeabi_ddiv+0x50a>
 8001ebc:	e660      	b.n	8001b80 <__aeabi_ddiv+0x1cc>
 8001ebe:	4282      	cmp	r2, r0
 8001ec0:	d804      	bhi.n	8001ecc <__aeabi_ddiv+0x518>
 8001ec2:	d000      	beq.n	8001ec6 <__aeabi_ddiv+0x512>
 8001ec4:	e65c      	b.n	8001b80 <__aeabi_ddiv+0x1cc>
 8001ec6:	42ae      	cmp	r6, r5
 8001ec8:	d800      	bhi.n	8001ecc <__aeabi_ddiv+0x518>
 8001eca:	e659      	b.n	8001b80 <__aeabi_ddiv+0x1cc>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	425b      	negs	r3, r3
 8001ed0:	469c      	mov	ip, r3
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	44e0      	add	r8, ip
 8001ed6:	469c      	mov	ip, r3
 8001ed8:	4465      	add	r5, ip
 8001eda:	429d      	cmp	r5, r3
 8001edc:	419b      	sbcs	r3, r3
 8001ede:	425b      	negs	r3, r3
 8001ee0:	191b      	adds	r3, r3, r4
 8001ee2:	18c0      	adds	r0, r0, r3
 8001ee4:	e64d      	b.n	8001b82 <__aeabi_ddiv+0x1ce>
 8001ee6:	428a      	cmp	r2, r1
 8001ee8:	d800      	bhi.n	8001eec <__aeabi_ddiv+0x538>
 8001eea:	e60e      	b.n	8001b0a <__aeabi_ddiv+0x156>
 8001eec:	1e83      	subs	r3, r0, #2
 8001eee:	1909      	adds	r1, r1, r4
 8001ef0:	e60b      	b.n	8001b0a <__aeabi_ddiv+0x156>
 8001ef2:	428a      	cmp	r2, r1
 8001ef4:	d800      	bhi.n	8001ef8 <__aeabi_ddiv+0x544>
 8001ef6:	e5f4      	b.n	8001ae2 <__aeabi_ddiv+0x12e>
 8001ef8:	1e83      	subs	r3, r0, #2
 8001efa:	4698      	mov	r8, r3
 8001efc:	1909      	adds	r1, r1, r4
 8001efe:	e5f0      	b.n	8001ae2 <__aeabi_ddiv+0x12e>
 8001f00:	4925      	ldr	r1, [pc, #148]	; (8001f98 <__aeabi_ddiv+0x5e4>)
 8001f02:	0028      	movs	r0, r5
 8001f04:	4459      	add	r1, fp
 8001f06:	408d      	lsls	r5, r1
 8001f08:	4642      	mov	r2, r8
 8001f0a:	408a      	lsls	r2, r1
 8001f0c:	1e69      	subs	r1, r5, #1
 8001f0e:	418d      	sbcs	r5, r1
 8001f10:	4641      	mov	r1, r8
 8001f12:	40d8      	lsrs	r0, r3
 8001f14:	40d9      	lsrs	r1, r3
 8001f16:	4302      	orrs	r2, r0
 8001f18:	432a      	orrs	r2, r5
 8001f1a:	000b      	movs	r3, r1
 8001f1c:	0751      	lsls	r1, r2, #29
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_ddiv+0x56e>
 8001f20:	e751      	b.n	8001dc6 <__aeabi_ddiv+0x412>
 8001f22:	210f      	movs	r1, #15
 8001f24:	4011      	ands	r1, r2
 8001f26:	2904      	cmp	r1, #4
 8001f28:	d000      	beq.n	8001f2c <__aeabi_ddiv+0x578>
 8001f2a:	e746      	b.n	8001dba <__aeabi_ddiv+0x406>
 8001f2c:	e74b      	b.n	8001dc6 <__aeabi_ddiv+0x412>
 8001f2e:	0005      	movs	r5, r0
 8001f30:	428e      	cmp	r6, r1
 8001f32:	d000      	beq.n	8001f36 <__aeabi_ddiv+0x582>
 8001f34:	e66a      	b.n	8001c0c <__aeabi_ddiv+0x258>
 8001f36:	9a00      	ldr	r2, [sp, #0]
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d000      	beq.n	8001f3e <__aeabi_ddiv+0x58a>
 8001f3c:	e666      	b.n	8001c0c <__aeabi_ddiv+0x258>
 8001f3e:	e667      	b.n	8001c10 <__aeabi_ddiv+0x25c>
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <__aeabi_ddiv+0x5e8>)
 8001f42:	445a      	add	r2, fp
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	dc00      	bgt.n	8001f4a <__aeabi_ddiv+0x596>
 8001f48:	e710      	b.n	8001d6c <__aeabi_ddiv+0x3b8>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	4498      	add	r8, r3
 8001f50:	e667      	b.n	8001c22 <__aeabi_ddiv+0x26e>
 8001f52:	075d      	lsls	r5, r3, #29
 8001f54:	025b      	lsls	r3, r3, #9
 8001f56:	0b1c      	lsrs	r4, r3, #12
 8001f58:	08d2      	lsrs	r2, r2, #3
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	4315      	orrs	r5, r2
 8001f5e:	e580      	b.n	8001a62 <__aeabi_ddiv+0xae>
 8001f60:	9800      	ldr	r0, [sp, #0]
 8001f62:	3d02      	subs	r5, #2
 8001f64:	0042      	lsls	r2, r0, #1
 8001f66:	4282      	cmp	r2, r0
 8001f68:	41bf      	sbcs	r7, r7
 8001f6a:	427f      	negs	r7, r7
 8001f6c:	193c      	adds	r4, r7, r4
 8001f6e:	1936      	adds	r6, r6, r4
 8001f70:	9200      	str	r2, [sp, #0]
 8001f72:	e7dd      	b.n	8001f30 <__aeabi_ddiv+0x57c>
 8001f74:	2480      	movs	r4, #128	; 0x80
 8001f76:	4643      	mov	r3, r8
 8001f78:	0324      	lsls	r4, r4, #12
 8001f7a:	431c      	orrs	r4, r3
 8001f7c:	0324      	lsls	r4, r4, #12
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__aeabi_ddiv+0x5dc>)
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	e56e      	b.n	8001a62 <__aeabi_ddiv+0xae>
 8001f84:	9a00      	ldr	r2, [sp, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3ea      	bcc.n	8001f60 <__aeabi_ddiv+0x5ac>
 8001f8a:	0005      	movs	r5, r0
 8001f8c:	e7d3      	b.n	8001f36 <__aeabi_ddiv+0x582>
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	000007ff 	.word	0x000007ff
 8001f94:	0000043e 	.word	0x0000043e
 8001f98:	0000041e 	.word	0x0000041e
 8001f9c:	000003ff 	.word	0x000003ff

08001fa0 <__eqdf2>:
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	464e      	mov	r6, r9
 8001fa4:	4645      	mov	r5, r8
 8001fa6:	46de      	mov	lr, fp
 8001fa8:	4657      	mov	r7, sl
 8001faa:	4690      	mov	r8, r2
 8001fac:	b5e0      	push	{r5, r6, r7, lr}
 8001fae:	0017      	movs	r7, r2
 8001fb0:	031a      	lsls	r2, r3, #12
 8001fb2:	0b12      	lsrs	r2, r2, #12
 8001fb4:	0005      	movs	r5, r0
 8001fb6:	4684      	mov	ip, r0
 8001fb8:	4819      	ldr	r0, [pc, #100]	; (8002020 <__eqdf2+0x80>)
 8001fba:	030e      	lsls	r6, r1, #12
 8001fbc:	004c      	lsls	r4, r1, #1
 8001fbe:	4691      	mov	r9, r2
 8001fc0:	005a      	lsls	r2, r3, #1
 8001fc2:	0fdb      	lsrs	r3, r3, #31
 8001fc4:	469b      	mov	fp, r3
 8001fc6:	0b36      	lsrs	r6, r6, #12
 8001fc8:	0d64      	lsrs	r4, r4, #21
 8001fca:	0fc9      	lsrs	r1, r1, #31
 8001fcc:	0d52      	lsrs	r2, r2, #21
 8001fce:	4284      	cmp	r4, r0
 8001fd0:	d019      	beq.n	8002006 <__eqdf2+0x66>
 8001fd2:	4282      	cmp	r2, r0
 8001fd4:	d010      	beq.n	8001ff8 <__eqdf2+0x58>
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	4294      	cmp	r4, r2
 8001fda:	d10e      	bne.n	8001ffa <__eqdf2+0x5a>
 8001fdc:	454e      	cmp	r6, r9
 8001fde:	d10c      	bne.n	8001ffa <__eqdf2+0x5a>
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	45c4      	cmp	ip, r8
 8001fe4:	d109      	bne.n	8001ffa <__eqdf2+0x5a>
 8001fe6:	4559      	cmp	r1, fp
 8001fe8:	d017      	beq.n	800201a <__eqdf2+0x7a>
 8001fea:	2c00      	cmp	r4, #0
 8001fec:	d105      	bne.n	8001ffa <__eqdf2+0x5a>
 8001fee:	0030      	movs	r0, r6
 8001ff0:	4328      	orrs	r0, r5
 8001ff2:	1e43      	subs	r3, r0, #1
 8001ff4:	4198      	sbcs	r0, r3
 8001ff6:	e000      	b.n	8001ffa <__eqdf2+0x5a>
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffc:	46bb      	mov	fp, r7
 8001ffe:	46b2      	mov	sl, r6
 8002000:	46a9      	mov	r9, r5
 8002002:	46a0      	mov	r8, r4
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002006:	0033      	movs	r3, r6
 8002008:	2001      	movs	r0, #1
 800200a:	432b      	orrs	r3, r5
 800200c:	d1f5      	bne.n	8001ffa <__eqdf2+0x5a>
 800200e:	42a2      	cmp	r2, r4
 8002010:	d1f3      	bne.n	8001ffa <__eqdf2+0x5a>
 8002012:	464b      	mov	r3, r9
 8002014:	433b      	orrs	r3, r7
 8002016:	d1f0      	bne.n	8001ffa <__eqdf2+0x5a>
 8002018:	e7e2      	b.n	8001fe0 <__eqdf2+0x40>
 800201a:	2000      	movs	r0, #0
 800201c:	e7ed      	b.n	8001ffa <__eqdf2+0x5a>
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	000007ff 	.word	0x000007ff

08002024 <__gedf2>:
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	4647      	mov	r7, r8
 8002028:	46ce      	mov	lr, r9
 800202a:	0004      	movs	r4, r0
 800202c:	0018      	movs	r0, r3
 800202e:	0016      	movs	r6, r2
 8002030:	031b      	lsls	r3, r3, #12
 8002032:	0b1b      	lsrs	r3, r3, #12
 8002034:	4d2d      	ldr	r5, [pc, #180]	; (80020ec <__gedf2+0xc8>)
 8002036:	004a      	lsls	r2, r1, #1
 8002038:	4699      	mov	r9, r3
 800203a:	b580      	push	{r7, lr}
 800203c:	0043      	lsls	r3, r0, #1
 800203e:	030f      	lsls	r7, r1, #12
 8002040:	46a4      	mov	ip, r4
 8002042:	46b0      	mov	r8, r6
 8002044:	0b3f      	lsrs	r7, r7, #12
 8002046:	0d52      	lsrs	r2, r2, #21
 8002048:	0fc9      	lsrs	r1, r1, #31
 800204a:	0d5b      	lsrs	r3, r3, #21
 800204c:	0fc0      	lsrs	r0, r0, #31
 800204e:	42aa      	cmp	r2, r5
 8002050:	d021      	beq.n	8002096 <__gedf2+0x72>
 8002052:	42ab      	cmp	r3, r5
 8002054:	d013      	beq.n	800207e <__gedf2+0x5a>
 8002056:	2a00      	cmp	r2, #0
 8002058:	d122      	bne.n	80020a0 <__gedf2+0x7c>
 800205a:	433c      	orrs	r4, r7
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <__gedf2+0x42>
 8002060:	464d      	mov	r5, r9
 8002062:	432e      	orrs	r6, r5
 8002064:	d022      	beq.n	80020ac <__gedf2+0x88>
 8002066:	2c00      	cmp	r4, #0
 8002068:	d010      	beq.n	800208c <__gedf2+0x68>
 800206a:	4281      	cmp	r1, r0
 800206c:	d022      	beq.n	80020b4 <__gedf2+0x90>
 800206e:	2002      	movs	r0, #2
 8002070:	3901      	subs	r1, #1
 8002072:	4008      	ands	r0, r1
 8002074:	3801      	subs	r0, #1
 8002076:	bcc0      	pop	{r6, r7}
 8002078:	46b9      	mov	r9, r7
 800207a:	46b0      	mov	r8, r6
 800207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207e:	464d      	mov	r5, r9
 8002080:	432e      	orrs	r6, r5
 8002082:	d129      	bne.n	80020d8 <__gedf2+0xb4>
 8002084:	2a00      	cmp	r2, #0
 8002086:	d1f0      	bne.n	800206a <__gedf2+0x46>
 8002088:	433c      	orrs	r4, r7
 800208a:	d1ee      	bne.n	800206a <__gedf2+0x46>
 800208c:	2800      	cmp	r0, #0
 800208e:	d1f2      	bne.n	8002076 <__gedf2+0x52>
 8002090:	2001      	movs	r0, #1
 8002092:	4240      	negs	r0, r0
 8002094:	e7ef      	b.n	8002076 <__gedf2+0x52>
 8002096:	003d      	movs	r5, r7
 8002098:	4325      	orrs	r5, r4
 800209a:	d11d      	bne.n	80020d8 <__gedf2+0xb4>
 800209c:	4293      	cmp	r3, r2
 800209e:	d0ee      	beq.n	800207e <__gedf2+0x5a>
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e2      	bne.n	800206a <__gedf2+0x46>
 80020a4:	464c      	mov	r4, r9
 80020a6:	4326      	orrs	r6, r4
 80020a8:	d1df      	bne.n	800206a <__gedf2+0x46>
 80020aa:	e7e0      	b.n	800206e <__gedf2+0x4a>
 80020ac:	2000      	movs	r0, #0
 80020ae:	2c00      	cmp	r4, #0
 80020b0:	d0e1      	beq.n	8002076 <__gedf2+0x52>
 80020b2:	e7dc      	b.n	800206e <__gedf2+0x4a>
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dc0a      	bgt.n	80020ce <__gedf2+0xaa>
 80020b8:	dbe8      	blt.n	800208c <__gedf2+0x68>
 80020ba:	454f      	cmp	r7, r9
 80020bc:	d8d7      	bhi.n	800206e <__gedf2+0x4a>
 80020be:	d00e      	beq.n	80020de <__gedf2+0xba>
 80020c0:	2000      	movs	r0, #0
 80020c2:	454f      	cmp	r7, r9
 80020c4:	d2d7      	bcs.n	8002076 <__gedf2+0x52>
 80020c6:	2900      	cmp	r1, #0
 80020c8:	d0e2      	beq.n	8002090 <__gedf2+0x6c>
 80020ca:	0008      	movs	r0, r1
 80020cc:	e7d3      	b.n	8002076 <__gedf2+0x52>
 80020ce:	4243      	negs	r3, r0
 80020d0:	4158      	adcs	r0, r3
 80020d2:	0040      	lsls	r0, r0, #1
 80020d4:	3801      	subs	r0, #1
 80020d6:	e7ce      	b.n	8002076 <__gedf2+0x52>
 80020d8:	2002      	movs	r0, #2
 80020da:	4240      	negs	r0, r0
 80020dc:	e7cb      	b.n	8002076 <__gedf2+0x52>
 80020de:	45c4      	cmp	ip, r8
 80020e0:	d8c5      	bhi.n	800206e <__gedf2+0x4a>
 80020e2:	2000      	movs	r0, #0
 80020e4:	45c4      	cmp	ip, r8
 80020e6:	d2c6      	bcs.n	8002076 <__gedf2+0x52>
 80020e8:	e7ed      	b.n	80020c6 <__gedf2+0xa2>
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__ledf2>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	4647      	mov	r7, r8
 80020f4:	46ce      	mov	lr, r9
 80020f6:	0004      	movs	r4, r0
 80020f8:	0018      	movs	r0, r3
 80020fa:	0016      	movs	r6, r2
 80020fc:	031b      	lsls	r3, r3, #12
 80020fe:	0b1b      	lsrs	r3, r3, #12
 8002100:	4d2c      	ldr	r5, [pc, #176]	; (80021b4 <__ledf2+0xc4>)
 8002102:	004a      	lsls	r2, r1, #1
 8002104:	4699      	mov	r9, r3
 8002106:	b580      	push	{r7, lr}
 8002108:	0043      	lsls	r3, r0, #1
 800210a:	030f      	lsls	r7, r1, #12
 800210c:	46a4      	mov	ip, r4
 800210e:	46b0      	mov	r8, r6
 8002110:	0b3f      	lsrs	r7, r7, #12
 8002112:	0d52      	lsrs	r2, r2, #21
 8002114:	0fc9      	lsrs	r1, r1, #31
 8002116:	0d5b      	lsrs	r3, r3, #21
 8002118:	0fc0      	lsrs	r0, r0, #31
 800211a:	42aa      	cmp	r2, r5
 800211c:	d00d      	beq.n	800213a <__ledf2+0x4a>
 800211e:	42ab      	cmp	r3, r5
 8002120:	d010      	beq.n	8002144 <__ledf2+0x54>
 8002122:	2a00      	cmp	r2, #0
 8002124:	d127      	bne.n	8002176 <__ledf2+0x86>
 8002126:	433c      	orrs	r4, r7
 8002128:	2b00      	cmp	r3, #0
 800212a:	d111      	bne.n	8002150 <__ledf2+0x60>
 800212c:	464d      	mov	r5, r9
 800212e:	432e      	orrs	r6, r5
 8002130:	d10e      	bne.n	8002150 <__ledf2+0x60>
 8002132:	2000      	movs	r0, #0
 8002134:	2c00      	cmp	r4, #0
 8002136:	d015      	beq.n	8002164 <__ledf2+0x74>
 8002138:	e00e      	b.n	8002158 <__ledf2+0x68>
 800213a:	003d      	movs	r5, r7
 800213c:	4325      	orrs	r5, r4
 800213e:	d110      	bne.n	8002162 <__ledf2+0x72>
 8002140:	4293      	cmp	r3, r2
 8002142:	d118      	bne.n	8002176 <__ledf2+0x86>
 8002144:	464d      	mov	r5, r9
 8002146:	432e      	orrs	r6, r5
 8002148:	d10b      	bne.n	8002162 <__ledf2+0x72>
 800214a:	2a00      	cmp	r2, #0
 800214c:	d102      	bne.n	8002154 <__ledf2+0x64>
 800214e:	433c      	orrs	r4, r7
 8002150:	2c00      	cmp	r4, #0
 8002152:	d00b      	beq.n	800216c <__ledf2+0x7c>
 8002154:	4281      	cmp	r1, r0
 8002156:	d014      	beq.n	8002182 <__ledf2+0x92>
 8002158:	2002      	movs	r0, #2
 800215a:	3901      	subs	r1, #1
 800215c:	4008      	ands	r0, r1
 800215e:	3801      	subs	r0, #1
 8002160:	e000      	b.n	8002164 <__ledf2+0x74>
 8002162:	2002      	movs	r0, #2
 8002164:	bcc0      	pop	{r6, r7}
 8002166:	46b9      	mov	r9, r7
 8002168:	46b0      	mov	r8, r6
 800216a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800216c:	2800      	cmp	r0, #0
 800216e:	d1f9      	bne.n	8002164 <__ledf2+0x74>
 8002170:	2001      	movs	r0, #1
 8002172:	4240      	negs	r0, r0
 8002174:	e7f6      	b.n	8002164 <__ledf2+0x74>
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ec      	bne.n	8002154 <__ledf2+0x64>
 800217a:	464c      	mov	r4, r9
 800217c:	4326      	orrs	r6, r4
 800217e:	d1e9      	bne.n	8002154 <__ledf2+0x64>
 8002180:	e7ea      	b.n	8002158 <__ledf2+0x68>
 8002182:	429a      	cmp	r2, r3
 8002184:	dd04      	ble.n	8002190 <__ledf2+0xa0>
 8002186:	4243      	negs	r3, r0
 8002188:	4158      	adcs	r0, r3
 800218a:	0040      	lsls	r0, r0, #1
 800218c:	3801      	subs	r0, #1
 800218e:	e7e9      	b.n	8002164 <__ledf2+0x74>
 8002190:	429a      	cmp	r2, r3
 8002192:	dbeb      	blt.n	800216c <__ledf2+0x7c>
 8002194:	454f      	cmp	r7, r9
 8002196:	d8df      	bhi.n	8002158 <__ledf2+0x68>
 8002198:	d006      	beq.n	80021a8 <__ledf2+0xb8>
 800219a:	2000      	movs	r0, #0
 800219c:	454f      	cmp	r7, r9
 800219e:	d2e1      	bcs.n	8002164 <__ledf2+0x74>
 80021a0:	2900      	cmp	r1, #0
 80021a2:	d0e5      	beq.n	8002170 <__ledf2+0x80>
 80021a4:	0008      	movs	r0, r1
 80021a6:	e7dd      	b.n	8002164 <__ledf2+0x74>
 80021a8:	45c4      	cmp	ip, r8
 80021aa:	d8d5      	bhi.n	8002158 <__ledf2+0x68>
 80021ac:	2000      	movs	r0, #0
 80021ae:	45c4      	cmp	ip, r8
 80021b0:	d2d8      	bcs.n	8002164 <__ledf2+0x74>
 80021b2:	e7f5      	b.n	80021a0 <__ledf2+0xb0>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__aeabi_dmul>:
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	4657      	mov	r7, sl
 80021bc:	464e      	mov	r6, r9
 80021be:	4645      	mov	r5, r8
 80021c0:	46de      	mov	lr, fp
 80021c2:	b5e0      	push	{r5, r6, r7, lr}
 80021c4:	4698      	mov	r8, r3
 80021c6:	030c      	lsls	r4, r1, #12
 80021c8:	004b      	lsls	r3, r1, #1
 80021ca:	0006      	movs	r6, r0
 80021cc:	4692      	mov	sl, r2
 80021ce:	b087      	sub	sp, #28
 80021d0:	0b24      	lsrs	r4, r4, #12
 80021d2:	0d5b      	lsrs	r3, r3, #21
 80021d4:	0fcf      	lsrs	r7, r1, #31
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <__aeabi_dmul+0x24>
 80021da:	e15c      	b.n	8002496 <__aeabi_dmul+0x2de>
 80021dc:	4ad9      	ldr	r2, [pc, #868]	; (8002544 <__aeabi_dmul+0x38c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dmul+0x2c>
 80021e2:	e175      	b.n	80024d0 <__aeabi_dmul+0x318>
 80021e4:	0f42      	lsrs	r2, r0, #29
 80021e6:	00e4      	lsls	r4, r4, #3
 80021e8:	4314      	orrs	r4, r2
 80021ea:	2280      	movs	r2, #128	; 0x80
 80021ec:	0412      	lsls	r2, r2, #16
 80021ee:	4314      	orrs	r4, r2
 80021f0:	4ad5      	ldr	r2, [pc, #852]	; (8002548 <__aeabi_dmul+0x390>)
 80021f2:	00c5      	lsls	r5, r0, #3
 80021f4:	4694      	mov	ip, r2
 80021f6:	4463      	add	r3, ip
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2300      	movs	r3, #0
 80021fc:	4699      	mov	r9, r3
 80021fe:	469b      	mov	fp, r3
 8002200:	4643      	mov	r3, r8
 8002202:	4642      	mov	r2, r8
 8002204:	031e      	lsls	r6, r3, #12
 8002206:	0fd2      	lsrs	r2, r2, #31
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4650      	mov	r0, sl
 800220c:	4690      	mov	r8, r2
 800220e:	0b36      	lsrs	r6, r6, #12
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	d100      	bne.n	8002216 <__aeabi_dmul+0x5e>
 8002214:	e120      	b.n	8002458 <__aeabi_dmul+0x2a0>
 8002216:	4acb      	ldr	r2, [pc, #812]	; (8002544 <__aeabi_dmul+0x38c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d100      	bne.n	800221e <__aeabi_dmul+0x66>
 800221c:	e162      	b.n	80024e4 <__aeabi_dmul+0x32c>
 800221e:	49ca      	ldr	r1, [pc, #808]	; (8002548 <__aeabi_dmul+0x390>)
 8002220:	0f42      	lsrs	r2, r0, #29
 8002222:	468c      	mov	ip, r1
 8002224:	9900      	ldr	r1, [sp, #0]
 8002226:	4463      	add	r3, ip
 8002228:	00f6      	lsls	r6, r6, #3
 800222a:	468c      	mov	ip, r1
 800222c:	4316      	orrs	r6, r2
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	449c      	add	ip, r3
 8002232:	0412      	lsls	r2, r2, #16
 8002234:	4663      	mov	r3, ip
 8002236:	4316      	orrs	r6, r2
 8002238:	00c2      	lsls	r2, r0, #3
 800223a:	2000      	movs	r0, #0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	9900      	ldr	r1, [sp, #0]
 8002240:	4643      	mov	r3, r8
 8002242:	3101      	adds	r1, #1
 8002244:	468c      	mov	ip, r1
 8002246:	4649      	mov	r1, r9
 8002248:	407b      	eors	r3, r7
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	290f      	cmp	r1, #15
 800224e:	d826      	bhi.n	800229e <__aeabi_dmul+0xe6>
 8002250:	4bbe      	ldr	r3, [pc, #760]	; (800254c <__aeabi_dmul+0x394>)
 8002252:	0089      	lsls	r1, r1, #2
 8002254:	5859      	ldr	r1, [r3, r1]
 8002256:	468f      	mov	pc, r1
 8002258:	4643      	mov	r3, r8
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	0034      	movs	r4, r6
 800225e:	0015      	movs	r5, r2
 8002260:	4683      	mov	fp, r0
 8002262:	465b      	mov	r3, fp
 8002264:	2b02      	cmp	r3, #2
 8002266:	d016      	beq.n	8002296 <__aeabi_dmul+0xde>
 8002268:	2b03      	cmp	r3, #3
 800226a:	d100      	bne.n	800226e <__aeabi_dmul+0xb6>
 800226c:	e203      	b.n	8002676 <__aeabi_dmul+0x4be>
 800226e:	2b01      	cmp	r3, #1
 8002270:	d000      	beq.n	8002274 <__aeabi_dmul+0xbc>
 8002272:	e0cd      	b.n	8002410 <__aeabi_dmul+0x258>
 8002274:	2200      	movs	r2, #0
 8002276:	2400      	movs	r4, #0
 8002278:	2500      	movs	r5, #0
 800227a:	9b01      	ldr	r3, [sp, #4]
 800227c:	0512      	lsls	r2, r2, #20
 800227e:	4322      	orrs	r2, r4
 8002280:	07db      	lsls	r3, r3, #31
 8002282:	431a      	orrs	r2, r3
 8002284:	0028      	movs	r0, r5
 8002286:	0011      	movs	r1, r2
 8002288:	b007      	add	sp, #28
 800228a:	bcf0      	pop	{r4, r5, r6, r7}
 800228c:	46bb      	mov	fp, r7
 800228e:	46b2      	mov	sl, r6
 8002290:	46a9      	mov	r9, r5
 8002292:	46a0      	mov	r8, r4
 8002294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002296:	2400      	movs	r4, #0
 8002298:	2500      	movs	r5, #0
 800229a:	4aaa      	ldr	r2, [pc, #680]	; (8002544 <__aeabi_dmul+0x38c>)
 800229c:	e7ed      	b.n	800227a <__aeabi_dmul+0xc2>
 800229e:	0c28      	lsrs	r0, r5, #16
 80022a0:	042d      	lsls	r5, r5, #16
 80022a2:	0c2d      	lsrs	r5, r5, #16
 80022a4:	002b      	movs	r3, r5
 80022a6:	0c11      	lsrs	r1, r2, #16
 80022a8:	0412      	lsls	r2, r2, #16
 80022aa:	0c12      	lsrs	r2, r2, #16
 80022ac:	4353      	muls	r3, r2
 80022ae:	4698      	mov	r8, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	002f      	movs	r7, r5
 80022b4:	4343      	muls	r3, r0
 80022b6:	4699      	mov	r9, r3
 80022b8:	434f      	muls	r7, r1
 80022ba:	444f      	add	r7, r9
 80022bc:	46bb      	mov	fp, r7
 80022be:	4647      	mov	r7, r8
 80022c0:	000b      	movs	r3, r1
 80022c2:	0c3f      	lsrs	r7, r7, #16
 80022c4:	46ba      	mov	sl, r7
 80022c6:	4343      	muls	r3, r0
 80022c8:	44da      	add	sl, fp
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	45d1      	cmp	r9, sl
 80022ce:	d904      	bls.n	80022da <__aeabi_dmul+0x122>
 80022d0:	2780      	movs	r7, #128	; 0x80
 80022d2:	027f      	lsls	r7, r7, #9
 80022d4:	46b9      	mov	r9, r7
 80022d6:	444b      	add	r3, r9
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	4653      	mov	r3, sl
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	469b      	mov	fp, r3
 80022e0:	4653      	mov	r3, sl
 80022e2:	041f      	lsls	r7, r3, #16
 80022e4:	4643      	mov	r3, r8
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	4698      	mov	r8, r3
 80022ec:	003b      	movs	r3, r7
 80022ee:	4443      	add	r3, r8
 80022f0:	9304      	str	r3, [sp, #16]
 80022f2:	0c33      	lsrs	r3, r6, #16
 80022f4:	0436      	lsls	r6, r6, #16
 80022f6:	0c36      	lsrs	r6, r6, #16
 80022f8:	4698      	mov	r8, r3
 80022fa:	0033      	movs	r3, r6
 80022fc:	4343      	muls	r3, r0
 80022fe:	4699      	mov	r9, r3
 8002300:	4643      	mov	r3, r8
 8002302:	4343      	muls	r3, r0
 8002304:	002f      	movs	r7, r5
 8002306:	469a      	mov	sl, r3
 8002308:	4643      	mov	r3, r8
 800230a:	4377      	muls	r7, r6
 800230c:	435d      	muls	r5, r3
 800230e:	0c38      	lsrs	r0, r7, #16
 8002310:	444d      	add	r5, r9
 8002312:	1945      	adds	r5, r0, r5
 8002314:	45a9      	cmp	r9, r5
 8002316:	d903      	bls.n	8002320 <__aeabi_dmul+0x168>
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	025b      	lsls	r3, r3, #9
 800231c:	4699      	mov	r9, r3
 800231e:	44ca      	add	sl, r9
 8002320:	043f      	lsls	r7, r7, #16
 8002322:	0c28      	lsrs	r0, r5, #16
 8002324:	0c3f      	lsrs	r7, r7, #16
 8002326:	042d      	lsls	r5, r5, #16
 8002328:	19ed      	adds	r5, r5, r7
 800232a:	0c27      	lsrs	r7, r4, #16
 800232c:	0424      	lsls	r4, r4, #16
 800232e:	0c24      	lsrs	r4, r4, #16
 8002330:	0003      	movs	r3, r0
 8002332:	0020      	movs	r0, r4
 8002334:	4350      	muls	r0, r2
 8002336:	437a      	muls	r2, r7
 8002338:	4691      	mov	r9, r2
 800233a:	003a      	movs	r2, r7
 800233c:	4453      	add	r3, sl
 800233e:	9305      	str	r3, [sp, #20]
 8002340:	0c03      	lsrs	r3, r0, #16
 8002342:	469a      	mov	sl, r3
 8002344:	434a      	muls	r2, r1
 8002346:	4361      	muls	r1, r4
 8002348:	4449      	add	r1, r9
 800234a:	4451      	add	r1, sl
 800234c:	44ab      	add	fp, r5
 800234e:	4589      	cmp	r9, r1
 8002350:	d903      	bls.n	800235a <__aeabi_dmul+0x1a2>
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	025b      	lsls	r3, r3, #9
 8002356:	4699      	mov	r9, r3
 8002358:	444a      	add	r2, r9
 800235a:	0400      	lsls	r0, r0, #16
 800235c:	0c0b      	lsrs	r3, r1, #16
 800235e:	0c00      	lsrs	r0, r0, #16
 8002360:	0409      	lsls	r1, r1, #16
 8002362:	1809      	adds	r1, r1, r0
 8002364:	0020      	movs	r0, r4
 8002366:	4699      	mov	r9, r3
 8002368:	4643      	mov	r3, r8
 800236a:	4370      	muls	r0, r6
 800236c:	435c      	muls	r4, r3
 800236e:	437e      	muls	r6, r7
 8002370:	435f      	muls	r7, r3
 8002372:	0c03      	lsrs	r3, r0, #16
 8002374:	4698      	mov	r8, r3
 8002376:	19a4      	adds	r4, r4, r6
 8002378:	4444      	add	r4, r8
 800237a:	444a      	add	r2, r9
 800237c:	9703      	str	r7, [sp, #12]
 800237e:	42a6      	cmp	r6, r4
 8002380:	d904      	bls.n	800238c <__aeabi_dmul+0x1d4>
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	025b      	lsls	r3, r3, #9
 8002386:	4698      	mov	r8, r3
 8002388:	4447      	add	r7, r8
 800238a:	9703      	str	r7, [sp, #12]
 800238c:	0423      	lsls	r3, r4, #16
 800238e:	9e02      	ldr	r6, [sp, #8]
 8002390:	469a      	mov	sl, r3
 8002392:	9b05      	ldr	r3, [sp, #20]
 8002394:	445e      	add	r6, fp
 8002396:	4698      	mov	r8, r3
 8002398:	42ae      	cmp	r6, r5
 800239a:	41ad      	sbcs	r5, r5
 800239c:	1876      	adds	r6, r6, r1
 800239e:	428e      	cmp	r6, r1
 80023a0:	4189      	sbcs	r1, r1
 80023a2:	0400      	lsls	r0, r0, #16
 80023a4:	0c00      	lsrs	r0, r0, #16
 80023a6:	4450      	add	r0, sl
 80023a8:	4440      	add	r0, r8
 80023aa:	426d      	negs	r5, r5
 80023ac:	1947      	adds	r7, r0, r5
 80023ae:	46b8      	mov	r8, r7
 80023b0:	4693      	mov	fp, r2
 80023b2:	4249      	negs	r1, r1
 80023b4:	4689      	mov	r9, r1
 80023b6:	44c3      	add	fp, r8
 80023b8:	44d9      	add	r9, fp
 80023ba:	4298      	cmp	r0, r3
 80023bc:	4180      	sbcs	r0, r0
 80023be:	45a8      	cmp	r8, r5
 80023c0:	41ad      	sbcs	r5, r5
 80023c2:	4593      	cmp	fp, r2
 80023c4:	4192      	sbcs	r2, r2
 80023c6:	4589      	cmp	r9, r1
 80023c8:	4189      	sbcs	r1, r1
 80023ca:	426d      	negs	r5, r5
 80023cc:	4240      	negs	r0, r0
 80023ce:	4328      	orrs	r0, r5
 80023d0:	0c24      	lsrs	r4, r4, #16
 80023d2:	4252      	negs	r2, r2
 80023d4:	4249      	negs	r1, r1
 80023d6:	430a      	orrs	r2, r1
 80023d8:	9b03      	ldr	r3, [sp, #12]
 80023da:	1900      	adds	r0, r0, r4
 80023dc:	1880      	adds	r0, r0, r2
 80023de:	18c7      	adds	r7, r0, r3
 80023e0:	464b      	mov	r3, r9
 80023e2:	0ddc      	lsrs	r4, r3, #23
 80023e4:	9b04      	ldr	r3, [sp, #16]
 80023e6:	0275      	lsls	r5, r6, #9
 80023e8:	431d      	orrs	r5, r3
 80023ea:	1e6a      	subs	r2, r5, #1
 80023ec:	4195      	sbcs	r5, r2
 80023ee:	464b      	mov	r3, r9
 80023f0:	0df6      	lsrs	r6, r6, #23
 80023f2:	027f      	lsls	r7, r7, #9
 80023f4:	4335      	orrs	r5, r6
 80023f6:	025a      	lsls	r2, r3, #9
 80023f8:	433c      	orrs	r4, r7
 80023fa:	4315      	orrs	r5, r2
 80023fc:	01fb      	lsls	r3, r7, #7
 80023fe:	d400      	bmi.n	8002402 <__aeabi_dmul+0x24a>
 8002400:	e11c      	b.n	800263c <__aeabi_dmul+0x484>
 8002402:	2101      	movs	r1, #1
 8002404:	086a      	lsrs	r2, r5, #1
 8002406:	400d      	ands	r5, r1
 8002408:	4315      	orrs	r5, r2
 800240a:	07e2      	lsls	r2, r4, #31
 800240c:	4315      	orrs	r5, r2
 800240e:	0864      	lsrs	r4, r4, #1
 8002410:	494f      	ldr	r1, [pc, #316]	; (8002550 <__aeabi_dmul+0x398>)
 8002412:	4461      	add	r1, ip
 8002414:	2900      	cmp	r1, #0
 8002416:	dc00      	bgt.n	800241a <__aeabi_dmul+0x262>
 8002418:	e0b0      	b.n	800257c <__aeabi_dmul+0x3c4>
 800241a:	076b      	lsls	r3, r5, #29
 800241c:	d009      	beq.n	8002432 <__aeabi_dmul+0x27a>
 800241e:	220f      	movs	r2, #15
 8002420:	402a      	ands	r2, r5
 8002422:	2a04      	cmp	r2, #4
 8002424:	d005      	beq.n	8002432 <__aeabi_dmul+0x27a>
 8002426:	1d2a      	adds	r2, r5, #4
 8002428:	42aa      	cmp	r2, r5
 800242a:	41ad      	sbcs	r5, r5
 800242c:	426d      	negs	r5, r5
 800242e:	1964      	adds	r4, r4, r5
 8002430:	0015      	movs	r5, r2
 8002432:	01e3      	lsls	r3, r4, #7
 8002434:	d504      	bpl.n	8002440 <__aeabi_dmul+0x288>
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	4a46      	ldr	r2, [pc, #280]	; (8002554 <__aeabi_dmul+0x39c>)
 800243a:	00c9      	lsls	r1, r1, #3
 800243c:	4014      	ands	r4, r2
 800243e:	4461      	add	r1, ip
 8002440:	4a45      	ldr	r2, [pc, #276]	; (8002558 <__aeabi_dmul+0x3a0>)
 8002442:	4291      	cmp	r1, r2
 8002444:	dd00      	ble.n	8002448 <__aeabi_dmul+0x290>
 8002446:	e726      	b.n	8002296 <__aeabi_dmul+0xde>
 8002448:	0762      	lsls	r2, r4, #29
 800244a:	08ed      	lsrs	r5, r5, #3
 800244c:	0264      	lsls	r4, r4, #9
 800244e:	0549      	lsls	r1, r1, #21
 8002450:	4315      	orrs	r5, r2
 8002452:	0b24      	lsrs	r4, r4, #12
 8002454:	0d4a      	lsrs	r2, r1, #21
 8002456:	e710      	b.n	800227a <__aeabi_dmul+0xc2>
 8002458:	4652      	mov	r2, sl
 800245a:	4332      	orrs	r2, r6
 800245c:	d100      	bne.n	8002460 <__aeabi_dmul+0x2a8>
 800245e:	e07f      	b.n	8002560 <__aeabi_dmul+0x3a8>
 8002460:	2e00      	cmp	r6, #0
 8002462:	d100      	bne.n	8002466 <__aeabi_dmul+0x2ae>
 8002464:	e0dc      	b.n	8002620 <__aeabi_dmul+0x468>
 8002466:	0030      	movs	r0, r6
 8002468:	f000 fdf8 	bl	800305c <__clzsi2>
 800246c:	0002      	movs	r2, r0
 800246e:	3a0b      	subs	r2, #11
 8002470:	231d      	movs	r3, #29
 8002472:	0001      	movs	r1, r0
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	4652      	mov	r2, sl
 8002478:	3908      	subs	r1, #8
 800247a:	40da      	lsrs	r2, r3
 800247c:	408e      	lsls	r6, r1
 800247e:	4316      	orrs	r6, r2
 8002480:	4652      	mov	r2, sl
 8002482:	408a      	lsls	r2, r1
 8002484:	9b00      	ldr	r3, [sp, #0]
 8002486:	4935      	ldr	r1, [pc, #212]	; (800255c <__aeabi_dmul+0x3a4>)
 8002488:	1a18      	subs	r0, r3, r0
 800248a:	0003      	movs	r3, r0
 800248c:	468c      	mov	ip, r1
 800248e:	4463      	add	r3, ip
 8002490:	2000      	movs	r0, #0
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	e6d3      	b.n	800223e <__aeabi_dmul+0x86>
 8002496:	0025      	movs	r5, r4
 8002498:	4305      	orrs	r5, r0
 800249a:	d04a      	beq.n	8002532 <__aeabi_dmul+0x37a>
 800249c:	2c00      	cmp	r4, #0
 800249e:	d100      	bne.n	80024a2 <__aeabi_dmul+0x2ea>
 80024a0:	e0b0      	b.n	8002604 <__aeabi_dmul+0x44c>
 80024a2:	0020      	movs	r0, r4
 80024a4:	f000 fdda 	bl	800305c <__clzsi2>
 80024a8:	0001      	movs	r1, r0
 80024aa:	0002      	movs	r2, r0
 80024ac:	390b      	subs	r1, #11
 80024ae:	231d      	movs	r3, #29
 80024b0:	0010      	movs	r0, r2
 80024b2:	1a5b      	subs	r3, r3, r1
 80024b4:	0031      	movs	r1, r6
 80024b6:	0035      	movs	r5, r6
 80024b8:	3808      	subs	r0, #8
 80024ba:	4084      	lsls	r4, r0
 80024bc:	40d9      	lsrs	r1, r3
 80024be:	4085      	lsls	r5, r0
 80024c0:	430c      	orrs	r4, r1
 80024c2:	4826      	ldr	r0, [pc, #152]	; (800255c <__aeabi_dmul+0x3a4>)
 80024c4:	1a83      	subs	r3, r0, r2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2300      	movs	r3, #0
 80024ca:	4699      	mov	r9, r3
 80024cc:	469b      	mov	fp, r3
 80024ce:	e697      	b.n	8002200 <__aeabi_dmul+0x48>
 80024d0:	0005      	movs	r5, r0
 80024d2:	4325      	orrs	r5, r4
 80024d4:	d126      	bne.n	8002524 <__aeabi_dmul+0x36c>
 80024d6:	2208      	movs	r2, #8
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2302      	movs	r3, #2
 80024dc:	2400      	movs	r4, #0
 80024de:	4691      	mov	r9, r2
 80024e0:	469b      	mov	fp, r3
 80024e2:	e68d      	b.n	8002200 <__aeabi_dmul+0x48>
 80024e4:	4652      	mov	r2, sl
 80024e6:	9b00      	ldr	r3, [sp, #0]
 80024e8:	4332      	orrs	r2, r6
 80024ea:	d110      	bne.n	800250e <__aeabi_dmul+0x356>
 80024ec:	4915      	ldr	r1, [pc, #84]	; (8002544 <__aeabi_dmul+0x38c>)
 80024ee:	2600      	movs	r6, #0
 80024f0:	468c      	mov	ip, r1
 80024f2:	4463      	add	r3, ip
 80024f4:	4649      	mov	r1, r9
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2302      	movs	r3, #2
 80024fa:	4319      	orrs	r1, r3
 80024fc:	4689      	mov	r9, r1
 80024fe:	2002      	movs	r0, #2
 8002500:	e69d      	b.n	800223e <__aeabi_dmul+0x86>
 8002502:	465b      	mov	r3, fp
 8002504:	9701      	str	r7, [sp, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d000      	beq.n	800250c <__aeabi_dmul+0x354>
 800250a:	e6ad      	b.n	8002268 <__aeabi_dmul+0xb0>
 800250c:	e6c3      	b.n	8002296 <__aeabi_dmul+0xde>
 800250e:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <__aeabi_dmul+0x38c>)
 8002510:	2003      	movs	r0, #3
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	464a      	mov	r2, r9
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2303      	movs	r3, #3
 800251c:	431a      	orrs	r2, r3
 800251e:	4691      	mov	r9, r2
 8002520:	4652      	mov	r2, sl
 8002522:	e68c      	b.n	800223e <__aeabi_dmul+0x86>
 8002524:	220c      	movs	r2, #12
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2303      	movs	r3, #3
 800252a:	0005      	movs	r5, r0
 800252c:	4691      	mov	r9, r2
 800252e:	469b      	mov	fp, r3
 8002530:	e666      	b.n	8002200 <__aeabi_dmul+0x48>
 8002532:	2304      	movs	r3, #4
 8002534:	4699      	mov	r9, r3
 8002536:	2300      	movs	r3, #0
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	2400      	movs	r4, #0
 800253e:	469b      	mov	fp, r3
 8002540:	e65e      	b.n	8002200 <__aeabi_dmul+0x48>
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	000007ff 	.word	0x000007ff
 8002548:	fffffc01 	.word	0xfffffc01
 800254c:	0800ce80 	.word	0x0800ce80
 8002550:	000003ff 	.word	0x000003ff
 8002554:	feffffff 	.word	0xfeffffff
 8002558:	000007fe 	.word	0x000007fe
 800255c:	fffffc0d 	.word	0xfffffc0d
 8002560:	4649      	mov	r1, r9
 8002562:	2301      	movs	r3, #1
 8002564:	4319      	orrs	r1, r3
 8002566:	4689      	mov	r9, r1
 8002568:	2600      	movs	r6, #0
 800256a:	2001      	movs	r0, #1
 800256c:	e667      	b.n	800223e <__aeabi_dmul+0x86>
 800256e:	2300      	movs	r3, #0
 8002570:	2480      	movs	r4, #128	; 0x80
 8002572:	2500      	movs	r5, #0
 8002574:	4a43      	ldr	r2, [pc, #268]	; (8002684 <__aeabi_dmul+0x4cc>)
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	0324      	lsls	r4, r4, #12
 800257a:	e67e      	b.n	800227a <__aeabi_dmul+0xc2>
 800257c:	2001      	movs	r0, #1
 800257e:	1a40      	subs	r0, r0, r1
 8002580:	2838      	cmp	r0, #56	; 0x38
 8002582:	dd00      	ble.n	8002586 <__aeabi_dmul+0x3ce>
 8002584:	e676      	b.n	8002274 <__aeabi_dmul+0xbc>
 8002586:	281f      	cmp	r0, #31
 8002588:	dd5b      	ble.n	8002642 <__aeabi_dmul+0x48a>
 800258a:	221f      	movs	r2, #31
 800258c:	0023      	movs	r3, r4
 800258e:	4252      	negs	r2, r2
 8002590:	1a51      	subs	r1, r2, r1
 8002592:	40cb      	lsrs	r3, r1
 8002594:	0019      	movs	r1, r3
 8002596:	2820      	cmp	r0, #32
 8002598:	d003      	beq.n	80025a2 <__aeabi_dmul+0x3ea>
 800259a:	4a3b      	ldr	r2, [pc, #236]	; (8002688 <__aeabi_dmul+0x4d0>)
 800259c:	4462      	add	r2, ip
 800259e:	4094      	lsls	r4, r2
 80025a0:	4325      	orrs	r5, r4
 80025a2:	1e6a      	subs	r2, r5, #1
 80025a4:	4195      	sbcs	r5, r2
 80025a6:	002a      	movs	r2, r5
 80025a8:	430a      	orrs	r2, r1
 80025aa:	2107      	movs	r1, #7
 80025ac:	000d      	movs	r5, r1
 80025ae:	2400      	movs	r4, #0
 80025b0:	4015      	ands	r5, r2
 80025b2:	4211      	tst	r1, r2
 80025b4:	d05b      	beq.n	800266e <__aeabi_dmul+0x4b6>
 80025b6:	210f      	movs	r1, #15
 80025b8:	2400      	movs	r4, #0
 80025ba:	4011      	ands	r1, r2
 80025bc:	2904      	cmp	r1, #4
 80025be:	d053      	beq.n	8002668 <__aeabi_dmul+0x4b0>
 80025c0:	1d11      	adds	r1, r2, #4
 80025c2:	4291      	cmp	r1, r2
 80025c4:	4192      	sbcs	r2, r2
 80025c6:	4252      	negs	r2, r2
 80025c8:	18a4      	adds	r4, r4, r2
 80025ca:	000a      	movs	r2, r1
 80025cc:	0223      	lsls	r3, r4, #8
 80025ce:	d54b      	bpl.n	8002668 <__aeabi_dmul+0x4b0>
 80025d0:	2201      	movs	r2, #1
 80025d2:	2400      	movs	r4, #0
 80025d4:	2500      	movs	r5, #0
 80025d6:	e650      	b.n	800227a <__aeabi_dmul+0xc2>
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	031b      	lsls	r3, r3, #12
 80025dc:	421c      	tst	r4, r3
 80025de:	d009      	beq.n	80025f4 <__aeabi_dmul+0x43c>
 80025e0:	421e      	tst	r6, r3
 80025e2:	d107      	bne.n	80025f4 <__aeabi_dmul+0x43c>
 80025e4:	4333      	orrs	r3, r6
 80025e6:	031c      	lsls	r4, r3, #12
 80025e8:	4643      	mov	r3, r8
 80025ea:	0015      	movs	r5, r2
 80025ec:	0b24      	lsrs	r4, r4, #12
 80025ee:	4a25      	ldr	r2, [pc, #148]	; (8002684 <__aeabi_dmul+0x4cc>)
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	e642      	b.n	800227a <__aeabi_dmul+0xc2>
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	0312      	lsls	r2, r2, #12
 80025f8:	4314      	orrs	r4, r2
 80025fa:	0324      	lsls	r4, r4, #12
 80025fc:	4a21      	ldr	r2, [pc, #132]	; (8002684 <__aeabi_dmul+0x4cc>)
 80025fe:	0b24      	lsrs	r4, r4, #12
 8002600:	9701      	str	r7, [sp, #4]
 8002602:	e63a      	b.n	800227a <__aeabi_dmul+0xc2>
 8002604:	f000 fd2a 	bl	800305c <__clzsi2>
 8002608:	0001      	movs	r1, r0
 800260a:	0002      	movs	r2, r0
 800260c:	3115      	adds	r1, #21
 800260e:	3220      	adds	r2, #32
 8002610:	291c      	cmp	r1, #28
 8002612:	dc00      	bgt.n	8002616 <__aeabi_dmul+0x45e>
 8002614:	e74b      	b.n	80024ae <__aeabi_dmul+0x2f6>
 8002616:	0034      	movs	r4, r6
 8002618:	3808      	subs	r0, #8
 800261a:	2500      	movs	r5, #0
 800261c:	4084      	lsls	r4, r0
 800261e:	e750      	b.n	80024c2 <__aeabi_dmul+0x30a>
 8002620:	f000 fd1c 	bl	800305c <__clzsi2>
 8002624:	0003      	movs	r3, r0
 8002626:	001a      	movs	r2, r3
 8002628:	3215      	adds	r2, #21
 800262a:	3020      	adds	r0, #32
 800262c:	2a1c      	cmp	r2, #28
 800262e:	dc00      	bgt.n	8002632 <__aeabi_dmul+0x47a>
 8002630:	e71e      	b.n	8002470 <__aeabi_dmul+0x2b8>
 8002632:	4656      	mov	r6, sl
 8002634:	3b08      	subs	r3, #8
 8002636:	2200      	movs	r2, #0
 8002638:	409e      	lsls	r6, r3
 800263a:	e723      	b.n	8002484 <__aeabi_dmul+0x2cc>
 800263c:	9b00      	ldr	r3, [sp, #0]
 800263e:	469c      	mov	ip, r3
 8002640:	e6e6      	b.n	8002410 <__aeabi_dmul+0x258>
 8002642:	4912      	ldr	r1, [pc, #72]	; (800268c <__aeabi_dmul+0x4d4>)
 8002644:	0022      	movs	r2, r4
 8002646:	4461      	add	r1, ip
 8002648:	002e      	movs	r6, r5
 800264a:	408d      	lsls	r5, r1
 800264c:	408a      	lsls	r2, r1
 800264e:	40c6      	lsrs	r6, r0
 8002650:	1e69      	subs	r1, r5, #1
 8002652:	418d      	sbcs	r5, r1
 8002654:	4332      	orrs	r2, r6
 8002656:	432a      	orrs	r2, r5
 8002658:	40c4      	lsrs	r4, r0
 800265a:	0753      	lsls	r3, r2, #29
 800265c:	d0b6      	beq.n	80025cc <__aeabi_dmul+0x414>
 800265e:	210f      	movs	r1, #15
 8002660:	4011      	ands	r1, r2
 8002662:	2904      	cmp	r1, #4
 8002664:	d1ac      	bne.n	80025c0 <__aeabi_dmul+0x408>
 8002666:	e7b1      	b.n	80025cc <__aeabi_dmul+0x414>
 8002668:	0765      	lsls	r5, r4, #29
 800266a:	0264      	lsls	r4, r4, #9
 800266c:	0b24      	lsrs	r4, r4, #12
 800266e:	08d2      	lsrs	r2, r2, #3
 8002670:	4315      	orrs	r5, r2
 8002672:	2200      	movs	r2, #0
 8002674:	e601      	b.n	800227a <__aeabi_dmul+0xc2>
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	0312      	lsls	r2, r2, #12
 800267a:	4314      	orrs	r4, r2
 800267c:	0324      	lsls	r4, r4, #12
 800267e:	4a01      	ldr	r2, [pc, #4]	; (8002684 <__aeabi_dmul+0x4cc>)
 8002680:	0b24      	lsrs	r4, r4, #12
 8002682:	e5fa      	b.n	800227a <__aeabi_dmul+0xc2>
 8002684:	000007ff 	.word	0x000007ff
 8002688:	0000043e 	.word	0x0000043e
 800268c:	0000041e 	.word	0x0000041e

08002690 <__aeabi_dsub>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	4657      	mov	r7, sl
 8002694:	464e      	mov	r6, r9
 8002696:	4645      	mov	r5, r8
 8002698:	46de      	mov	lr, fp
 800269a:	b5e0      	push	{r5, r6, r7, lr}
 800269c:	001e      	movs	r6, r3
 800269e:	0017      	movs	r7, r2
 80026a0:	004a      	lsls	r2, r1, #1
 80026a2:	030b      	lsls	r3, r1, #12
 80026a4:	0d52      	lsrs	r2, r2, #21
 80026a6:	0a5b      	lsrs	r3, r3, #9
 80026a8:	4690      	mov	r8, r2
 80026aa:	0f42      	lsrs	r2, r0, #29
 80026ac:	431a      	orrs	r2, r3
 80026ae:	0fcd      	lsrs	r5, r1, #31
 80026b0:	4ccd      	ldr	r4, [pc, #820]	; (80029e8 <__aeabi_dsub+0x358>)
 80026b2:	0331      	lsls	r1, r6, #12
 80026b4:	00c3      	lsls	r3, r0, #3
 80026b6:	4694      	mov	ip, r2
 80026b8:	0070      	lsls	r0, r6, #1
 80026ba:	0f7a      	lsrs	r2, r7, #29
 80026bc:	0a49      	lsrs	r1, r1, #9
 80026be:	00ff      	lsls	r7, r7, #3
 80026c0:	469a      	mov	sl, r3
 80026c2:	46b9      	mov	r9, r7
 80026c4:	0d40      	lsrs	r0, r0, #21
 80026c6:	0ff6      	lsrs	r6, r6, #31
 80026c8:	4311      	orrs	r1, r2
 80026ca:	42a0      	cmp	r0, r4
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x40>
 80026ce:	e0b1      	b.n	8002834 <__aeabi_dsub+0x1a4>
 80026d0:	2201      	movs	r2, #1
 80026d2:	4056      	eors	r6, r2
 80026d4:	46b3      	mov	fp, r6
 80026d6:	42b5      	cmp	r5, r6
 80026d8:	d100      	bne.n	80026dc <__aeabi_dsub+0x4c>
 80026da:	e088      	b.n	80027ee <__aeabi_dsub+0x15e>
 80026dc:	4642      	mov	r2, r8
 80026de:	1a12      	subs	r2, r2, r0
 80026e0:	2a00      	cmp	r2, #0
 80026e2:	dc00      	bgt.n	80026e6 <__aeabi_dsub+0x56>
 80026e4:	e0ae      	b.n	8002844 <__aeabi_dsub+0x1b4>
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x5c>
 80026ea:	e0c1      	b.n	8002870 <__aeabi_dsub+0x1e0>
 80026ec:	48be      	ldr	r0, [pc, #760]	; (80029e8 <__aeabi_dsub+0x358>)
 80026ee:	4580      	cmp	r8, r0
 80026f0:	d100      	bne.n	80026f4 <__aeabi_dsub+0x64>
 80026f2:	e151      	b.n	8002998 <__aeabi_dsub+0x308>
 80026f4:	2080      	movs	r0, #128	; 0x80
 80026f6:	0400      	lsls	r0, r0, #16
 80026f8:	4301      	orrs	r1, r0
 80026fa:	2a38      	cmp	r2, #56	; 0x38
 80026fc:	dd00      	ble.n	8002700 <__aeabi_dsub+0x70>
 80026fe:	e17b      	b.n	80029f8 <__aeabi_dsub+0x368>
 8002700:	2a1f      	cmp	r2, #31
 8002702:	dd00      	ble.n	8002706 <__aeabi_dsub+0x76>
 8002704:	e1ee      	b.n	8002ae4 <__aeabi_dsub+0x454>
 8002706:	2020      	movs	r0, #32
 8002708:	003e      	movs	r6, r7
 800270a:	1a80      	subs	r0, r0, r2
 800270c:	000c      	movs	r4, r1
 800270e:	40d6      	lsrs	r6, r2
 8002710:	40d1      	lsrs	r1, r2
 8002712:	4087      	lsls	r7, r0
 8002714:	4662      	mov	r2, ip
 8002716:	4084      	lsls	r4, r0
 8002718:	1a52      	subs	r2, r2, r1
 800271a:	1e78      	subs	r0, r7, #1
 800271c:	4187      	sbcs	r7, r0
 800271e:	4694      	mov	ip, r2
 8002720:	4334      	orrs	r4, r6
 8002722:	4327      	orrs	r7, r4
 8002724:	1bdc      	subs	r4, r3, r7
 8002726:	42a3      	cmp	r3, r4
 8002728:	419b      	sbcs	r3, r3
 800272a:	4662      	mov	r2, ip
 800272c:	425b      	negs	r3, r3
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	4699      	mov	r9, r3
 8002732:	464b      	mov	r3, r9
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	d400      	bmi.n	800273a <__aeabi_dsub+0xaa>
 8002738:	e118      	b.n	800296c <__aeabi_dsub+0x2dc>
 800273a:	464b      	mov	r3, r9
 800273c:	0258      	lsls	r0, r3, #9
 800273e:	0a43      	lsrs	r3, r0, #9
 8002740:	4699      	mov	r9, r3
 8002742:	464b      	mov	r3, r9
 8002744:	2b00      	cmp	r3, #0
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0xba>
 8002748:	e137      	b.n	80029ba <__aeabi_dsub+0x32a>
 800274a:	4648      	mov	r0, r9
 800274c:	f000 fc86 	bl	800305c <__clzsi2>
 8002750:	0001      	movs	r1, r0
 8002752:	3908      	subs	r1, #8
 8002754:	2320      	movs	r3, #32
 8002756:	0022      	movs	r2, r4
 8002758:	4648      	mov	r0, r9
 800275a:	1a5b      	subs	r3, r3, r1
 800275c:	40da      	lsrs	r2, r3
 800275e:	4088      	lsls	r0, r1
 8002760:	408c      	lsls	r4, r1
 8002762:	4643      	mov	r3, r8
 8002764:	4310      	orrs	r0, r2
 8002766:	4588      	cmp	r8, r1
 8002768:	dd00      	ble.n	800276c <__aeabi_dsub+0xdc>
 800276a:	e136      	b.n	80029da <__aeabi_dsub+0x34a>
 800276c:	1ac9      	subs	r1, r1, r3
 800276e:	1c4b      	adds	r3, r1, #1
 8002770:	2b1f      	cmp	r3, #31
 8002772:	dd00      	ble.n	8002776 <__aeabi_dsub+0xe6>
 8002774:	e0ea      	b.n	800294c <__aeabi_dsub+0x2bc>
 8002776:	2220      	movs	r2, #32
 8002778:	0026      	movs	r6, r4
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	0001      	movs	r1, r0
 800277e:	4094      	lsls	r4, r2
 8002780:	40de      	lsrs	r6, r3
 8002782:	40d8      	lsrs	r0, r3
 8002784:	2300      	movs	r3, #0
 8002786:	4091      	lsls	r1, r2
 8002788:	1e62      	subs	r2, r4, #1
 800278a:	4194      	sbcs	r4, r2
 800278c:	4681      	mov	r9, r0
 800278e:	4698      	mov	r8, r3
 8002790:	4331      	orrs	r1, r6
 8002792:	430c      	orrs	r4, r1
 8002794:	0763      	lsls	r3, r4, #29
 8002796:	d009      	beq.n	80027ac <__aeabi_dsub+0x11c>
 8002798:	230f      	movs	r3, #15
 800279a:	4023      	ands	r3, r4
 800279c:	2b04      	cmp	r3, #4
 800279e:	d005      	beq.n	80027ac <__aeabi_dsub+0x11c>
 80027a0:	1d23      	adds	r3, r4, #4
 80027a2:	42a3      	cmp	r3, r4
 80027a4:	41a4      	sbcs	r4, r4
 80027a6:	4264      	negs	r4, r4
 80027a8:	44a1      	add	r9, r4
 80027aa:	001c      	movs	r4, r3
 80027ac:	464b      	mov	r3, r9
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	d400      	bmi.n	80027b4 <__aeabi_dsub+0x124>
 80027b2:	e0de      	b.n	8002972 <__aeabi_dsub+0x2e2>
 80027b4:	4641      	mov	r1, r8
 80027b6:	4b8c      	ldr	r3, [pc, #560]	; (80029e8 <__aeabi_dsub+0x358>)
 80027b8:	3101      	adds	r1, #1
 80027ba:	4299      	cmp	r1, r3
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x130>
 80027be:	e0e7      	b.n	8002990 <__aeabi_dsub+0x300>
 80027c0:	464b      	mov	r3, r9
 80027c2:	488a      	ldr	r0, [pc, #552]	; (80029ec <__aeabi_dsub+0x35c>)
 80027c4:	08e4      	lsrs	r4, r4, #3
 80027c6:	4003      	ands	r3, r0
 80027c8:	0018      	movs	r0, r3
 80027ca:	0549      	lsls	r1, r1, #21
 80027cc:	075b      	lsls	r3, r3, #29
 80027ce:	0240      	lsls	r0, r0, #9
 80027d0:	4323      	orrs	r3, r4
 80027d2:	0d4a      	lsrs	r2, r1, #21
 80027d4:	0b04      	lsrs	r4, r0, #12
 80027d6:	0512      	lsls	r2, r2, #20
 80027d8:	07ed      	lsls	r5, r5, #31
 80027da:	4322      	orrs	r2, r4
 80027dc:	432a      	orrs	r2, r5
 80027de:	0018      	movs	r0, r3
 80027e0:	0011      	movs	r1, r2
 80027e2:	bcf0      	pop	{r4, r5, r6, r7}
 80027e4:	46bb      	mov	fp, r7
 80027e6:	46b2      	mov	sl, r6
 80027e8:	46a9      	mov	r9, r5
 80027ea:	46a0      	mov	r8, r4
 80027ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027ee:	4642      	mov	r2, r8
 80027f0:	1a12      	subs	r2, r2, r0
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	dd52      	ble.n	800289c <__aeabi_dsub+0x20c>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x16c>
 80027fa:	e09c      	b.n	8002936 <__aeabi_dsub+0x2a6>
 80027fc:	45a0      	cmp	r8, r4
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x172>
 8002800:	e0ca      	b.n	8002998 <__aeabi_dsub+0x308>
 8002802:	2080      	movs	r0, #128	; 0x80
 8002804:	0400      	lsls	r0, r0, #16
 8002806:	4301      	orrs	r1, r0
 8002808:	2a38      	cmp	r2, #56	; 0x38
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x17e>
 800280c:	e149      	b.n	8002aa2 <__aeabi_dsub+0x412>
 800280e:	2a1f      	cmp	r2, #31
 8002810:	dc00      	bgt.n	8002814 <__aeabi_dsub+0x184>
 8002812:	e197      	b.n	8002b44 <__aeabi_dsub+0x4b4>
 8002814:	0010      	movs	r0, r2
 8002816:	000e      	movs	r6, r1
 8002818:	3820      	subs	r0, #32
 800281a:	40c6      	lsrs	r6, r0
 800281c:	2a20      	cmp	r2, #32
 800281e:	d004      	beq.n	800282a <__aeabi_dsub+0x19a>
 8002820:	2040      	movs	r0, #64	; 0x40
 8002822:	1a82      	subs	r2, r0, r2
 8002824:	4091      	lsls	r1, r2
 8002826:	430f      	orrs	r7, r1
 8002828:	46b9      	mov	r9, r7
 800282a:	464c      	mov	r4, r9
 800282c:	1e62      	subs	r2, r4, #1
 800282e:	4194      	sbcs	r4, r2
 8002830:	4334      	orrs	r4, r6
 8002832:	e13a      	b.n	8002aaa <__aeabi_dsub+0x41a>
 8002834:	000a      	movs	r2, r1
 8002836:	433a      	orrs	r2, r7
 8002838:	d028      	beq.n	800288c <__aeabi_dsub+0x1fc>
 800283a:	46b3      	mov	fp, r6
 800283c:	42b5      	cmp	r5, r6
 800283e:	d02b      	beq.n	8002898 <__aeabi_dsub+0x208>
 8002840:	4a6b      	ldr	r2, [pc, #428]	; (80029f0 <__aeabi_dsub+0x360>)
 8002842:	4442      	add	r2, r8
 8002844:	2a00      	cmp	r2, #0
 8002846:	d05d      	beq.n	8002904 <__aeabi_dsub+0x274>
 8002848:	4642      	mov	r2, r8
 800284a:	4644      	mov	r4, r8
 800284c:	1a82      	subs	r2, r0, r2
 800284e:	2c00      	cmp	r4, #0
 8002850:	d000      	beq.n	8002854 <__aeabi_dsub+0x1c4>
 8002852:	e0f5      	b.n	8002a40 <__aeabi_dsub+0x3b0>
 8002854:	4665      	mov	r5, ip
 8002856:	431d      	orrs	r5, r3
 8002858:	d100      	bne.n	800285c <__aeabi_dsub+0x1cc>
 800285a:	e19c      	b.n	8002b96 <__aeabi_dsub+0x506>
 800285c:	1e55      	subs	r5, r2, #1
 800285e:	2a01      	cmp	r2, #1
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x1d4>
 8002862:	e1fb      	b.n	8002c5c <__aeabi_dsub+0x5cc>
 8002864:	4c60      	ldr	r4, [pc, #384]	; (80029e8 <__aeabi_dsub+0x358>)
 8002866:	42a2      	cmp	r2, r4
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x1dc>
 800286a:	e1bd      	b.n	8002be8 <__aeabi_dsub+0x558>
 800286c:	002a      	movs	r2, r5
 800286e:	e0f0      	b.n	8002a52 <__aeabi_dsub+0x3c2>
 8002870:	0008      	movs	r0, r1
 8002872:	4338      	orrs	r0, r7
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x1e8>
 8002876:	e0c3      	b.n	8002a00 <__aeabi_dsub+0x370>
 8002878:	1e50      	subs	r0, r2, #1
 800287a:	2a01      	cmp	r2, #1
 800287c:	d100      	bne.n	8002880 <__aeabi_dsub+0x1f0>
 800287e:	e1a8      	b.n	8002bd2 <__aeabi_dsub+0x542>
 8002880:	4c59      	ldr	r4, [pc, #356]	; (80029e8 <__aeabi_dsub+0x358>)
 8002882:	42a2      	cmp	r2, r4
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x1f8>
 8002886:	e087      	b.n	8002998 <__aeabi_dsub+0x308>
 8002888:	0002      	movs	r2, r0
 800288a:	e736      	b.n	80026fa <__aeabi_dsub+0x6a>
 800288c:	2201      	movs	r2, #1
 800288e:	4056      	eors	r6, r2
 8002890:	46b3      	mov	fp, r6
 8002892:	42b5      	cmp	r5, r6
 8002894:	d000      	beq.n	8002898 <__aeabi_dsub+0x208>
 8002896:	e721      	b.n	80026dc <__aeabi_dsub+0x4c>
 8002898:	4a55      	ldr	r2, [pc, #340]	; (80029f0 <__aeabi_dsub+0x360>)
 800289a:	4442      	add	r2, r8
 800289c:	2a00      	cmp	r2, #0
 800289e:	d100      	bne.n	80028a2 <__aeabi_dsub+0x212>
 80028a0:	e0b5      	b.n	8002a0e <__aeabi_dsub+0x37e>
 80028a2:	4642      	mov	r2, r8
 80028a4:	4644      	mov	r4, r8
 80028a6:	1a82      	subs	r2, r0, r2
 80028a8:	2c00      	cmp	r4, #0
 80028aa:	d100      	bne.n	80028ae <__aeabi_dsub+0x21e>
 80028ac:	e138      	b.n	8002b20 <__aeabi_dsub+0x490>
 80028ae:	4e4e      	ldr	r6, [pc, #312]	; (80029e8 <__aeabi_dsub+0x358>)
 80028b0:	42b0      	cmp	r0, r6
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x226>
 80028b4:	e1de      	b.n	8002c74 <__aeabi_dsub+0x5e4>
 80028b6:	2680      	movs	r6, #128	; 0x80
 80028b8:	4664      	mov	r4, ip
 80028ba:	0436      	lsls	r6, r6, #16
 80028bc:	4334      	orrs	r4, r6
 80028be:	46a4      	mov	ip, r4
 80028c0:	2a38      	cmp	r2, #56	; 0x38
 80028c2:	dd00      	ble.n	80028c6 <__aeabi_dsub+0x236>
 80028c4:	e196      	b.n	8002bf4 <__aeabi_dsub+0x564>
 80028c6:	2a1f      	cmp	r2, #31
 80028c8:	dd00      	ble.n	80028cc <__aeabi_dsub+0x23c>
 80028ca:	e224      	b.n	8002d16 <__aeabi_dsub+0x686>
 80028cc:	2620      	movs	r6, #32
 80028ce:	1ab4      	subs	r4, r6, r2
 80028d0:	46a2      	mov	sl, r4
 80028d2:	4664      	mov	r4, ip
 80028d4:	4656      	mov	r6, sl
 80028d6:	40b4      	lsls	r4, r6
 80028d8:	46a1      	mov	r9, r4
 80028da:	001c      	movs	r4, r3
 80028dc:	464e      	mov	r6, r9
 80028de:	40d4      	lsrs	r4, r2
 80028e0:	4326      	orrs	r6, r4
 80028e2:	0034      	movs	r4, r6
 80028e4:	4656      	mov	r6, sl
 80028e6:	40b3      	lsls	r3, r6
 80028e8:	1e5e      	subs	r6, r3, #1
 80028ea:	41b3      	sbcs	r3, r6
 80028ec:	431c      	orrs	r4, r3
 80028ee:	4663      	mov	r3, ip
 80028f0:	40d3      	lsrs	r3, r2
 80028f2:	18c9      	adds	r1, r1, r3
 80028f4:	19e4      	adds	r4, r4, r7
 80028f6:	42bc      	cmp	r4, r7
 80028f8:	41bf      	sbcs	r7, r7
 80028fa:	427f      	negs	r7, r7
 80028fc:	46b9      	mov	r9, r7
 80028fe:	4680      	mov	r8, r0
 8002900:	4489      	add	r9, r1
 8002902:	e0d8      	b.n	8002ab6 <__aeabi_dsub+0x426>
 8002904:	4640      	mov	r0, r8
 8002906:	4c3b      	ldr	r4, [pc, #236]	; (80029f4 <__aeabi_dsub+0x364>)
 8002908:	3001      	adds	r0, #1
 800290a:	4220      	tst	r0, r4
 800290c:	d000      	beq.n	8002910 <__aeabi_dsub+0x280>
 800290e:	e0b4      	b.n	8002a7a <__aeabi_dsub+0x3ea>
 8002910:	4640      	mov	r0, r8
 8002912:	2800      	cmp	r0, #0
 8002914:	d000      	beq.n	8002918 <__aeabi_dsub+0x288>
 8002916:	e144      	b.n	8002ba2 <__aeabi_dsub+0x512>
 8002918:	4660      	mov	r0, ip
 800291a:	4318      	orrs	r0, r3
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x290>
 800291e:	e190      	b.n	8002c42 <__aeabi_dsub+0x5b2>
 8002920:	0008      	movs	r0, r1
 8002922:	4338      	orrs	r0, r7
 8002924:	d000      	beq.n	8002928 <__aeabi_dsub+0x298>
 8002926:	e1aa      	b.n	8002c7e <__aeabi_dsub+0x5ee>
 8002928:	4661      	mov	r1, ip
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	0749      	lsls	r1, r1, #29
 800292e:	430b      	orrs	r3, r1
 8002930:	4661      	mov	r1, ip
 8002932:	08cc      	lsrs	r4, r1, #3
 8002934:	e027      	b.n	8002986 <__aeabi_dsub+0x2f6>
 8002936:	0008      	movs	r0, r1
 8002938:	4338      	orrs	r0, r7
 800293a:	d061      	beq.n	8002a00 <__aeabi_dsub+0x370>
 800293c:	1e50      	subs	r0, r2, #1
 800293e:	2a01      	cmp	r2, #1
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x2b4>
 8002942:	e139      	b.n	8002bb8 <__aeabi_dsub+0x528>
 8002944:	42a2      	cmp	r2, r4
 8002946:	d027      	beq.n	8002998 <__aeabi_dsub+0x308>
 8002948:	0002      	movs	r2, r0
 800294a:	e75d      	b.n	8002808 <__aeabi_dsub+0x178>
 800294c:	0002      	movs	r2, r0
 800294e:	391f      	subs	r1, #31
 8002950:	40ca      	lsrs	r2, r1
 8002952:	0011      	movs	r1, r2
 8002954:	2b20      	cmp	r3, #32
 8002956:	d003      	beq.n	8002960 <__aeabi_dsub+0x2d0>
 8002958:	2240      	movs	r2, #64	; 0x40
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	4098      	lsls	r0, r3
 800295e:	4304      	orrs	r4, r0
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	2300      	movs	r3, #0
 8002966:	4699      	mov	r9, r3
 8002968:	4698      	mov	r8, r3
 800296a:	430c      	orrs	r4, r1
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d000      	beq.n	8002972 <__aeabi_dsub+0x2e2>
 8002970:	e712      	b.n	8002798 <__aeabi_dsub+0x108>
 8002972:	464b      	mov	r3, r9
 8002974:	464a      	mov	r2, r9
 8002976:	08e4      	lsrs	r4, r4, #3
 8002978:	075b      	lsls	r3, r3, #29
 800297a:	4323      	orrs	r3, r4
 800297c:	08d4      	lsrs	r4, r2, #3
 800297e:	4642      	mov	r2, r8
 8002980:	4919      	ldr	r1, [pc, #100]	; (80029e8 <__aeabi_dsub+0x358>)
 8002982:	428a      	cmp	r2, r1
 8002984:	d00e      	beq.n	80029a4 <__aeabi_dsub+0x314>
 8002986:	0324      	lsls	r4, r4, #12
 8002988:	0552      	lsls	r2, r2, #21
 800298a:	0b24      	lsrs	r4, r4, #12
 800298c:	0d52      	lsrs	r2, r2, #21
 800298e:	e722      	b.n	80027d6 <__aeabi_dsub+0x146>
 8002990:	000a      	movs	r2, r1
 8002992:	2400      	movs	r4, #0
 8002994:	2300      	movs	r3, #0
 8002996:	e71e      	b.n	80027d6 <__aeabi_dsub+0x146>
 8002998:	08db      	lsrs	r3, r3, #3
 800299a:	4662      	mov	r2, ip
 800299c:	0752      	lsls	r2, r2, #29
 800299e:	4313      	orrs	r3, r2
 80029a0:	4662      	mov	r2, ip
 80029a2:	08d4      	lsrs	r4, r2, #3
 80029a4:	001a      	movs	r2, r3
 80029a6:	4322      	orrs	r2, r4
 80029a8:	d100      	bne.n	80029ac <__aeabi_dsub+0x31c>
 80029aa:	e1fc      	b.n	8002da6 <__aeabi_dsub+0x716>
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	0312      	lsls	r2, r2, #12
 80029b0:	4314      	orrs	r4, r2
 80029b2:	0324      	lsls	r4, r4, #12
 80029b4:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <__aeabi_dsub+0x358>)
 80029b6:	0b24      	lsrs	r4, r4, #12
 80029b8:	e70d      	b.n	80027d6 <__aeabi_dsub+0x146>
 80029ba:	0020      	movs	r0, r4
 80029bc:	f000 fb4e 	bl	800305c <__clzsi2>
 80029c0:	0001      	movs	r1, r0
 80029c2:	3118      	adds	r1, #24
 80029c4:	291f      	cmp	r1, #31
 80029c6:	dc00      	bgt.n	80029ca <__aeabi_dsub+0x33a>
 80029c8:	e6c4      	b.n	8002754 <__aeabi_dsub+0xc4>
 80029ca:	3808      	subs	r0, #8
 80029cc:	4084      	lsls	r4, r0
 80029ce:	4643      	mov	r3, r8
 80029d0:	0020      	movs	r0, r4
 80029d2:	2400      	movs	r4, #0
 80029d4:	4588      	cmp	r8, r1
 80029d6:	dc00      	bgt.n	80029da <__aeabi_dsub+0x34a>
 80029d8:	e6c8      	b.n	800276c <__aeabi_dsub+0xdc>
 80029da:	4a04      	ldr	r2, [pc, #16]	; (80029ec <__aeabi_dsub+0x35c>)
 80029dc:	1a5b      	subs	r3, r3, r1
 80029de:	4010      	ands	r0, r2
 80029e0:	4698      	mov	r8, r3
 80029e2:	4681      	mov	r9, r0
 80029e4:	e6d6      	b.n	8002794 <__aeabi_dsub+0x104>
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	000007ff 	.word	0x000007ff
 80029ec:	ff7fffff 	.word	0xff7fffff
 80029f0:	fffff801 	.word	0xfffff801
 80029f4:	000007fe 	.word	0x000007fe
 80029f8:	430f      	orrs	r7, r1
 80029fa:	1e7a      	subs	r2, r7, #1
 80029fc:	4197      	sbcs	r7, r2
 80029fe:	e691      	b.n	8002724 <__aeabi_dsub+0x94>
 8002a00:	4661      	mov	r1, ip
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	0749      	lsls	r1, r1, #29
 8002a06:	430b      	orrs	r3, r1
 8002a08:	4661      	mov	r1, ip
 8002a0a:	08cc      	lsrs	r4, r1, #3
 8002a0c:	e7b8      	b.n	8002980 <__aeabi_dsub+0x2f0>
 8002a0e:	4640      	mov	r0, r8
 8002a10:	4cd3      	ldr	r4, [pc, #844]	; (8002d60 <__aeabi_dsub+0x6d0>)
 8002a12:	3001      	adds	r0, #1
 8002a14:	4220      	tst	r0, r4
 8002a16:	d000      	beq.n	8002a1a <__aeabi_dsub+0x38a>
 8002a18:	e0a2      	b.n	8002b60 <__aeabi_dsub+0x4d0>
 8002a1a:	4640      	mov	r0, r8
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	d000      	beq.n	8002a22 <__aeabi_dsub+0x392>
 8002a20:	e101      	b.n	8002c26 <__aeabi_dsub+0x596>
 8002a22:	4660      	mov	r0, ip
 8002a24:	4318      	orrs	r0, r3
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dsub+0x39a>
 8002a28:	e15e      	b.n	8002ce8 <__aeabi_dsub+0x658>
 8002a2a:	0008      	movs	r0, r1
 8002a2c:	4338      	orrs	r0, r7
 8002a2e:	d000      	beq.n	8002a32 <__aeabi_dsub+0x3a2>
 8002a30:	e15f      	b.n	8002cf2 <__aeabi_dsub+0x662>
 8002a32:	4661      	mov	r1, ip
 8002a34:	08db      	lsrs	r3, r3, #3
 8002a36:	0749      	lsls	r1, r1, #29
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	4661      	mov	r1, ip
 8002a3c:	08cc      	lsrs	r4, r1, #3
 8002a3e:	e7a2      	b.n	8002986 <__aeabi_dsub+0x2f6>
 8002a40:	4dc8      	ldr	r5, [pc, #800]	; (8002d64 <__aeabi_dsub+0x6d4>)
 8002a42:	42a8      	cmp	r0, r5
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x3b8>
 8002a46:	e0cf      	b.n	8002be8 <__aeabi_dsub+0x558>
 8002a48:	2580      	movs	r5, #128	; 0x80
 8002a4a:	4664      	mov	r4, ip
 8002a4c:	042d      	lsls	r5, r5, #16
 8002a4e:	432c      	orrs	r4, r5
 8002a50:	46a4      	mov	ip, r4
 8002a52:	2a38      	cmp	r2, #56	; 0x38
 8002a54:	dc56      	bgt.n	8002b04 <__aeabi_dsub+0x474>
 8002a56:	2a1f      	cmp	r2, #31
 8002a58:	dd00      	ble.n	8002a5c <__aeabi_dsub+0x3cc>
 8002a5a:	e0d1      	b.n	8002c00 <__aeabi_dsub+0x570>
 8002a5c:	2520      	movs	r5, #32
 8002a5e:	001e      	movs	r6, r3
 8002a60:	1aad      	subs	r5, r5, r2
 8002a62:	4664      	mov	r4, ip
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	40ac      	lsls	r4, r5
 8002a68:	40d6      	lsrs	r6, r2
 8002a6a:	1e5d      	subs	r5, r3, #1
 8002a6c:	41ab      	sbcs	r3, r5
 8002a6e:	4334      	orrs	r4, r6
 8002a70:	4323      	orrs	r3, r4
 8002a72:	4664      	mov	r4, ip
 8002a74:	40d4      	lsrs	r4, r2
 8002a76:	1b09      	subs	r1, r1, r4
 8002a78:	e049      	b.n	8002b0e <__aeabi_dsub+0x47e>
 8002a7a:	4660      	mov	r0, ip
 8002a7c:	1bdc      	subs	r4, r3, r7
 8002a7e:	1a46      	subs	r6, r0, r1
 8002a80:	42a3      	cmp	r3, r4
 8002a82:	4180      	sbcs	r0, r0
 8002a84:	4240      	negs	r0, r0
 8002a86:	4681      	mov	r9, r0
 8002a88:	0030      	movs	r0, r6
 8002a8a:	464e      	mov	r6, r9
 8002a8c:	1b80      	subs	r0, r0, r6
 8002a8e:	4681      	mov	r9, r0
 8002a90:	0200      	lsls	r0, r0, #8
 8002a92:	d476      	bmi.n	8002b82 <__aeabi_dsub+0x4f2>
 8002a94:	464b      	mov	r3, r9
 8002a96:	4323      	orrs	r3, r4
 8002a98:	d000      	beq.n	8002a9c <__aeabi_dsub+0x40c>
 8002a9a:	e652      	b.n	8002742 <__aeabi_dsub+0xb2>
 8002a9c:	2400      	movs	r4, #0
 8002a9e:	2500      	movs	r5, #0
 8002aa0:	e771      	b.n	8002986 <__aeabi_dsub+0x2f6>
 8002aa2:	4339      	orrs	r1, r7
 8002aa4:	000c      	movs	r4, r1
 8002aa6:	1e62      	subs	r2, r4, #1
 8002aa8:	4194      	sbcs	r4, r2
 8002aaa:	18e4      	adds	r4, r4, r3
 8002aac:	429c      	cmp	r4, r3
 8002aae:	419b      	sbcs	r3, r3
 8002ab0:	425b      	negs	r3, r3
 8002ab2:	4463      	add	r3, ip
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	d400      	bmi.n	8002abe <__aeabi_dsub+0x42e>
 8002abc:	e756      	b.n	800296c <__aeabi_dsub+0x2dc>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	469c      	mov	ip, r3
 8002ac2:	4ba8      	ldr	r3, [pc, #672]	; (8002d64 <__aeabi_dsub+0x6d4>)
 8002ac4:	44e0      	add	r8, ip
 8002ac6:	4598      	cmp	r8, r3
 8002ac8:	d038      	beq.n	8002b3c <__aeabi_dsub+0x4ac>
 8002aca:	464b      	mov	r3, r9
 8002acc:	48a6      	ldr	r0, [pc, #664]	; (8002d68 <__aeabi_dsub+0x6d8>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4003      	ands	r3, r0
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	0863      	lsrs	r3, r4, #1
 8002ad6:	4014      	ands	r4, r2
 8002ad8:	431c      	orrs	r4, r3
 8002ada:	07c3      	lsls	r3, r0, #31
 8002adc:	431c      	orrs	r4, r3
 8002ade:	0843      	lsrs	r3, r0, #1
 8002ae0:	4699      	mov	r9, r3
 8002ae2:	e657      	b.n	8002794 <__aeabi_dsub+0x104>
 8002ae4:	0010      	movs	r0, r2
 8002ae6:	000e      	movs	r6, r1
 8002ae8:	3820      	subs	r0, #32
 8002aea:	40c6      	lsrs	r6, r0
 8002aec:	2a20      	cmp	r2, #32
 8002aee:	d004      	beq.n	8002afa <__aeabi_dsub+0x46a>
 8002af0:	2040      	movs	r0, #64	; 0x40
 8002af2:	1a82      	subs	r2, r0, r2
 8002af4:	4091      	lsls	r1, r2
 8002af6:	430f      	orrs	r7, r1
 8002af8:	46b9      	mov	r9, r7
 8002afa:	464f      	mov	r7, r9
 8002afc:	1e7a      	subs	r2, r7, #1
 8002afe:	4197      	sbcs	r7, r2
 8002b00:	4337      	orrs	r7, r6
 8002b02:	e60f      	b.n	8002724 <__aeabi_dsub+0x94>
 8002b04:	4662      	mov	r2, ip
 8002b06:	431a      	orrs	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	1e5a      	subs	r2, r3, #1
 8002b0c:	4193      	sbcs	r3, r2
 8002b0e:	1afc      	subs	r4, r7, r3
 8002b10:	42a7      	cmp	r7, r4
 8002b12:	41bf      	sbcs	r7, r7
 8002b14:	427f      	negs	r7, r7
 8002b16:	1bcb      	subs	r3, r1, r7
 8002b18:	4699      	mov	r9, r3
 8002b1a:	465d      	mov	r5, fp
 8002b1c:	4680      	mov	r8, r0
 8002b1e:	e608      	b.n	8002732 <__aeabi_dsub+0xa2>
 8002b20:	4666      	mov	r6, ip
 8002b22:	431e      	orrs	r6, r3
 8002b24:	d100      	bne.n	8002b28 <__aeabi_dsub+0x498>
 8002b26:	e0be      	b.n	8002ca6 <__aeabi_dsub+0x616>
 8002b28:	1e56      	subs	r6, r2, #1
 8002b2a:	2a01      	cmp	r2, #1
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dsub+0x4a0>
 8002b2e:	e109      	b.n	8002d44 <__aeabi_dsub+0x6b4>
 8002b30:	4c8c      	ldr	r4, [pc, #560]	; (8002d64 <__aeabi_dsub+0x6d4>)
 8002b32:	42a2      	cmp	r2, r4
 8002b34:	d100      	bne.n	8002b38 <__aeabi_dsub+0x4a8>
 8002b36:	e119      	b.n	8002d6c <__aeabi_dsub+0x6dc>
 8002b38:	0032      	movs	r2, r6
 8002b3a:	e6c1      	b.n	80028c0 <__aeabi_dsub+0x230>
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	2400      	movs	r4, #0
 8002b40:	2300      	movs	r3, #0
 8002b42:	e648      	b.n	80027d6 <__aeabi_dsub+0x146>
 8002b44:	2020      	movs	r0, #32
 8002b46:	000c      	movs	r4, r1
 8002b48:	1a80      	subs	r0, r0, r2
 8002b4a:	003e      	movs	r6, r7
 8002b4c:	4087      	lsls	r7, r0
 8002b4e:	4084      	lsls	r4, r0
 8002b50:	40d6      	lsrs	r6, r2
 8002b52:	1e78      	subs	r0, r7, #1
 8002b54:	4187      	sbcs	r7, r0
 8002b56:	40d1      	lsrs	r1, r2
 8002b58:	4334      	orrs	r4, r6
 8002b5a:	433c      	orrs	r4, r7
 8002b5c:	448c      	add	ip, r1
 8002b5e:	e7a4      	b.n	8002aaa <__aeabi_dsub+0x41a>
 8002b60:	4a80      	ldr	r2, [pc, #512]	; (8002d64 <__aeabi_dsub+0x6d4>)
 8002b62:	4290      	cmp	r0, r2
 8002b64:	d100      	bne.n	8002b68 <__aeabi_dsub+0x4d8>
 8002b66:	e0e9      	b.n	8002d3c <__aeabi_dsub+0x6ac>
 8002b68:	19df      	adds	r7, r3, r7
 8002b6a:	429f      	cmp	r7, r3
 8002b6c:	419b      	sbcs	r3, r3
 8002b6e:	4461      	add	r1, ip
 8002b70:	425b      	negs	r3, r3
 8002b72:	18c9      	adds	r1, r1, r3
 8002b74:	07cc      	lsls	r4, r1, #31
 8002b76:	087f      	lsrs	r7, r7, #1
 8002b78:	084b      	lsrs	r3, r1, #1
 8002b7a:	4699      	mov	r9, r3
 8002b7c:	4680      	mov	r8, r0
 8002b7e:	433c      	orrs	r4, r7
 8002b80:	e6f4      	b.n	800296c <__aeabi_dsub+0x2dc>
 8002b82:	1afc      	subs	r4, r7, r3
 8002b84:	42a7      	cmp	r7, r4
 8002b86:	41bf      	sbcs	r7, r7
 8002b88:	4663      	mov	r3, ip
 8002b8a:	427f      	negs	r7, r7
 8002b8c:	1ac9      	subs	r1, r1, r3
 8002b8e:	1bcb      	subs	r3, r1, r7
 8002b90:	4699      	mov	r9, r3
 8002b92:	465d      	mov	r5, fp
 8002b94:	e5d5      	b.n	8002742 <__aeabi_dsub+0xb2>
 8002b96:	08ff      	lsrs	r7, r7, #3
 8002b98:	074b      	lsls	r3, r1, #29
 8002b9a:	465d      	mov	r5, fp
 8002b9c:	433b      	orrs	r3, r7
 8002b9e:	08cc      	lsrs	r4, r1, #3
 8002ba0:	e6ee      	b.n	8002980 <__aeabi_dsub+0x2f0>
 8002ba2:	4662      	mov	r2, ip
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	d000      	beq.n	8002baa <__aeabi_dsub+0x51a>
 8002ba8:	e082      	b.n	8002cb0 <__aeabi_dsub+0x620>
 8002baa:	000b      	movs	r3, r1
 8002bac:	433b      	orrs	r3, r7
 8002bae:	d11b      	bne.n	8002be8 <__aeabi_dsub+0x558>
 8002bb0:	2480      	movs	r4, #128	; 0x80
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	0324      	lsls	r4, r4, #12
 8002bb6:	e6f9      	b.n	80029ac <__aeabi_dsub+0x31c>
 8002bb8:	19dc      	adds	r4, r3, r7
 8002bba:	429c      	cmp	r4, r3
 8002bbc:	419b      	sbcs	r3, r3
 8002bbe:	4461      	add	r1, ip
 8002bc0:	4689      	mov	r9, r1
 8002bc2:	425b      	negs	r3, r3
 8002bc4:	4499      	add	r9, r3
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	d444      	bmi.n	8002c56 <__aeabi_dsub+0x5c6>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	4698      	mov	r8, r3
 8002bd0:	e6cc      	b.n	800296c <__aeabi_dsub+0x2dc>
 8002bd2:	1bdc      	subs	r4, r3, r7
 8002bd4:	4662      	mov	r2, ip
 8002bd6:	42a3      	cmp	r3, r4
 8002bd8:	419b      	sbcs	r3, r3
 8002bda:	1a51      	subs	r1, r2, r1
 8002bdc:	425b      	negs	r3, r3
 8002bde:	1acb      	subs	r3, r1, r3
 8002be0:	4699      	mov	r9, r3
 8002be2:	2301      	movs	r3, #1
 8002be4:	4698      	mov	r8, r3
 8002be6:	e5a4      	b.n	8002732 <__aeabi_dsub+0xa2>
 8002be8:	08ff      	lsrs	r7, r7, #3
 8002bea:	074b      	lsls	r3, r1, #29
 8002bec:	465d      	mov	r5, fp
 8002bee:	433b      	orrs	r3, r7
 8002bf0:	08cc      	lsrs	r4, r1, #3
 8002bf2:	e6d7      	b.n	80029a4 <__aeabi_dsub+0x314>
 8002bf4:	4662      	mov	r2, ip
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	0014      	movs	r4, r2
 8002bfa:	1e63      	subs	r3, r4, #1
 8002bfc:	419c      	sbcs	r4, r3
 8002bfe:	e679      	b.n	80028f4 <__aeabi_dsub+0x264>
 8002c00:	0015      	movs	r5, r2
 8002c02:	4664      	mov	r4, ip
 8002c04:	3d20      	subs	r5, #32
 8002c06:	40ec      	lsrs	r4, r5
 8002c08:	46a0      	mov	r8, r4
 8002c0a:	2a20      	cmp	r2, #32
 8002c0c:	d005      	beq.n	8002c1a <__aeabi_dsub+0x58a>
 8002c0e:	2540      	movs	r5, #64	; 0x40
 8002c10:	4664      	mov	r4, ip
 8002c12:	1aaa      	subs	r2, r5, r2
 8002c14:	4094      	lsls	r4, r2
 8002c16:	4323      	orrs	r3, r4
 8002c18:	469a      	mov	sl, r3
 8002c1a:	4654      	mov	r4, sl
 8002c1c:	1e63      	subs	r3, r4, #1
 8002c1e:	419c      	sbcs	r4, r3
 8002c20:	4643      	mov	r3, r8
 8002c22:	4323      	orrs	r3, r4
 8002c24:	e773      	b.n	8002b0e <__aeabi_dsub+0x47e>
 8002c26:	4662      	mov	r2, ip
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	d023      	beq.n	8002c74 <__aeabi_dsub+0x5e4>
 8002c2c:	000a      	movs	r2, r1
 8002c2e:	433a      	orrs	r2, r7
 8002c30:	d000      	beq.n	8002c34 <__aeabi_dsub+0x5a4>
 8002c32:	e0a0      	b.n	8002d76 <__aeabi_dsub+0x6e6>
 8002c34:	4662      	mov	r2, ip
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	0752      	lsls	r2, r2, #29
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	4662      	mov	r2, ip
 8002c3e:	08d4      	lsrs	r4, r2, #3
 8002c40:	e6b0      	b.n	80029a4 <__aeabi_dsub+0x314>
 8002c42:	000b      	movs	r3, r1
 8002c44:	433b      	orrs	r3, r7
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x5ba>
 8002c48:	e728      	b.n	8002a9c <__aeabi_dsub+0x40c>
 8002c4a:	08ff      	lsrs	r7, r7, #3
 8002c4c:	074b      	lsls	r3, r1, #29
 8002c4e:	465d      	mov	r5, fp
 8002c50:	433b      	orrs	r3, r7
 8002c52:	08cc      	lsrs	r4, r1, #3
 8002c54:	e697      	b.n	8002986 <__aeabi_dsub+0x2f6>
 8002c56:	2302      	movs	r3, #2
 8002c58:	4698      	mov	r8, r3
 8002c5a:	e736      	b.n	8002aca <__aeabi_dsub+0x43a>
 8002c5c:	1afc      	subs	r4, r7, r3
 8002c5e:	42a7      	cmp	r7, r4
 8002c60:	41bf      	sbcs	r7, r7
 8002c62:	4663      	mov	r3, ip
 8002c64:	427f      	negs	r7, r7
 8002c66:	1ac9      	subs	r1, r1, r3
 8002c68:	1bcb      	subs	r3, r1, r7
 8002c6a:	4699      	mov	r9, r3
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	465d      	mov	r5, fp
 8002c70:	4698      	mov	r8, r3
 8002c72:	e55e      	b.n	8002732 <__aeabi_dsub+0xa2>
 8002c74:	074b      	lsls	r3, r1, #29
 8002c76:	08ff      	lsrs	r7, r7, #3
 8002c78:	433b      	orrs	r3, r7
 8002c7a:	08cc      	lsrs	r4, r1, #3
 8002c7c:	e692      	b.n	80029a4 <__aeabi_dsub+0x314>
 8002c7e:	1bdc      	subs	r4, r3, r7
 8002c80:	4660      	mov	r0, ip
 8002c82:	42a3      	cmp	r3, r4
 8002c84:	41b6      	sbcs	r6, r6
 8002c86:	1a40      	subs	r0, r0, r1
 8002c88:	4276      	negs	r6, r6
 8002c8a:	1b80      	subs	r0, r0, r6
 8002c8c:	4681      	mov	r9, r0
 8002c8e:	0200      	lsls	r0, r0, #8
 8002c90:	d560      	bpl.n	8002d54 <__aeabi_dsub+0x6c4>
 8002c92:	1afc      	subs	r4, r7, r3
 8002c94:	42a7      	cmp	r7, r4
 8002c96:	41bf      	sbcs	r7, r7
 8002c98:	4663      	mov	r3, ip
 8002c9a:	427f      	negs	r7, r7
 8002c9c:	1ac9      	subs	r1, r1, r3
 8002c9e:	1bcb      	subs	r3, r1, r7
 8002ca0:	4699      	mov	r9, r3
 8002ca2:	465d      	mov	r5, fp
 8002ca4:	e576      	b.n	8002794 <__aeabi_dsub+0x104>
 8002ca6:	08ff      	lsrs	r7, r7, #3
 8002ca8:	074b      	lsls	r3, r1, #29
 8002caa:	433b      	orrs	r3, r7
 8002cac:	08cc      	lsrs	r4, r1, #3
 8002cae:	e667      	b.n	8002980 <__aeabi_dsub+0x2f0>
 8002cb0:	000a      	movs	r2, r1
 8002cb2:	08db      	lsrs	r3, r3, #3
 8002cb4:	433a      	orrs	r2, r7
 8002cb6:	d100      	bne.n	8002cba <__aeabi_dsub+0x62a>
 8002cb8:	e66f      	b.n	800299a <__aeabi_dsub+0x30a>
 8002cba:	4662      	mov	r2, ip
 8002cbc:	0752      	lsls	r2, r2, #29
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	4662      	mov	r2, ip
 8002cc2:	08d4      	lsrs	r4, r2, #3
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	0312      	lsls	r2, r2, #12
 8002cc8:	4214      	tst	r4, r2
 8002cca:	d007      	beq.n	8002cdc <__aeabi_dsub+0x64c>
 8002ccc:	08c8      	lsrs	r0, r1, #3
 8002cce:	4210      	tst	r0, r2
 8002cd0:	d104      	bne.n	8002cdc <__aeabi_dsub+0x64c>
 8002cd2:	465d      	mov	r5, fp
 8002cd4:	0004      	movs	r4, r0
 8002cd6:	08fb      	lsrs	r3, r7, #3
 8002cd8:	0749      	lsls	r1, r1, #29
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	0f5a      	lsrs	r2, r3, #29
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	08db      	lsrs	r3, r3, #3
 8002ce2:	0752      	lsls	r2, r2, #29
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	e65d      	b.n	80029a4 <__aeabi_dsub+0x314>
 8002ce8:	074b      	lsls	r3, r1, #29
 8002cea:	08ff      	lsrs	r7, r7, #3
 8002cec:	433b      	orrs	r3, r7
 8002cee:	08cc      	lsrs	r4, r1, #3
 8002cf0:	e649      	b.n	8002986 <__aeabi_dsub+0x2f6>
 8002cf2:	19dc      	adds	r4, r3, r7
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	419b      	sbcs	r3, r3
 8002cf8:	4461      	add	r1, ip
 8002cfa:	4689      	mov	r9, r1
 8002cfc:	425b      	negs	r3, r3
 8002cfe:	4499      	add	r9, r3
 8002d00:	464b      	mov	r3, r9
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	d400      	bmi.n	8002d08 <__aeabi_dsub+0x678>
 8002d06:	e631      	b.n	800296c <__aeabi_dsub+0x2dc>
 8002d08:	464a      	mov	r2, r9
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <__aeabi_dsub+0x6d8>)
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	2301      	movs	r3, #1
 8002d10:	4691      	mov	r9, r2
 8002d12:	4698      	mov	r8, r3
 8002d14:	e62a      	b.n	800296c <__aeabi_dsub+0x2dc>
 8002d16:	0016      	movs	r6, r2
 8002d18:	4664      	mov	r4, ip
 8002d1a:	3e20      	subs	r6, #32
 8002d1c:	40f4      	lsrs	r4, r6
 8002d1e:	46a0      	mov	r8, r4
 8002d20:	2a20      	cmp	r2, #32
 8002d22:	d005      	beq.n	8002d30 <__aeabi_dsub+0x6a0>
 8002d24:	2640      	movs	r6, #64	; 0x40
 8002d26:	4664      	mov	r4, ip
 8002d28:	1ab2      	subs	r2, r6, r2
 8002d2a:	4094      	lsls	r4, r2
 8002d2c:	4323      	orrs	r3, r4
 8002d2e:	469a      	mov	sl, r3
 8002d30:	4654      	mov	r4, sl
 8002d32:	1e63      	subs	r3, r4, #1
 8002d34:	419c      	sbcs	r4, r3
 8002d36:	4643      	mov	r3, r8
 8002d38:	431c      	orrs	r4, r3
 8002d3a:	e5db      	b.n	80028f4 <__aeabi_dsub+0x264>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	2400      	movs	r4, #0
 8002d40:	2300      	movs	r3, #0
 8002d42:	e548      	b.n	80027d6 <__aeabi_dsub+0x146>
 8002d44:	19dc      	adds	r4, r3, r7
 8002d46:	42bc      	cmp	r4, r7
 8002d48:	41bf      	sbcs	r7, r7
 8002d4a:	4461      	add	r1, ip
 8002d4c:	4689      	mov	r9, r1
 8002d4e:	427f      	negs	r7, r7
 8002d50:	44b9      	add	r9, r7
 8002d52:	e738      	b.n	8002bc6 <__aeabi_dsub+0x536>
 8002d54:	464b      	mov	r3, r9
 8002d56:	4323      	orrs	r3, r4
 8002d58:	d100      	bne.n	8002d5c <__aeabi_dsub+0x6cc>
 8002d5a:	e69f      	b.n	8002a9c <__aeabi_dsub+0x40c>
 8002d5c:	e606      	b.n	800296c <__aeabi_dsub+0x2dc>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	000007fe 	.word	0x000007fe
 8002d64:	000007ff 	.word	0x000007ff
 8002d68:	ff7fffff 	.word	0xff7fffff
 8002d6c:	08ff      	lsrs	r7, r7, #3
 8002d6e:	074b      	lsls	r3, r1, #29
 8002d70:	433b      	orrs	r3, r7
 8002d72:	08cc      	lsrs	r4, r1, #3
 8002d74:	e616      	b.n	80029a4 <__aeabi_dsub+0x314>
 8002d76:	4662      	mov	r2, ip
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	0752      	lsls	r2, r2, #29
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	4662      	mov	r2, ip
 8002d80:	08d4      	lsrs	r4, r2, #3
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	0312      	lsls	r2, r2, #12
 8002d86:	4214      	tst	r4, r2
 8002d88:	d007      	beq.n	8002d9a <__aeabi_dsub+0x70a>
 8002d8a:	08c8      	lsrs	r0, r1, #3
 8002d8c:	4210      	tst	r0, r2
 8002d8e:	d104      	bne.n	8002d9a <__aeabi_dsub+0x70a>
 8002d90:	465d      	mov	r5, fp
 8002d92:	0004      	movs	r4, r0
 8002d94:	08fb      	lsrs	r3, r7, #3
 8002d96:	0749      	lsls	r1, r1, #29
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	0f5a      	lsrs	r2, r3, #29
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	0752      	lsls	r2, r2, #29
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	4313      	orrs	r3, r2
 8002da4:	e5fe      	b.n	80029a4 <__aeabi_dsub+0x314>
 8002da6:	2300      	movs	r3, #0
 8002da8:	4a01      	ldr	r2, [pc, #4]	; (8002db0 <__aeabi_dsub+0x720>)
 8002daa:	001c      	movs	r4, r3
 8002dac:	e513      	b.n	80027d6 <__aeabi_dsub+0x146>
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	000007ff 	.word	0x000007ff

08002db4 <__aeabi_dcmpun>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	0005      	movs	r5, r0
 8002db8:	480c      	ldr	r0, [pc, #48]	; (8002dec <__aeabi_dcmpun+0x38>)
 8002dba:	031c      	lsls	r4, r3, #12
 8002dbc:	0016      	movs	r6, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	030a      	lsls	r2, r1, #12
 8002dc2:	0049      	lsls	r1, r1, #1
 8002dc4:	0b12      	lsrs	r2, r2, #12
 8002dc6:	0d49      	lsrs	r1, r1, #21
 8002dc8:	0b24      	lsrs	r4, r4, #12
 8002dca:	0d5b      	lsrs	r3, r3, #21
 8002dcc:	4281      	cmp	r1, r0
 8002dce:	d008      	beq.n	8002de2 <__aeabi_dcmpun+0x2e>
 8002dd0:	4a06      	ldr	r2, [pc, #24]	; (8002dec <__aeabi_dcmpun+0x38>)
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d103      	bne.n	8002de0 <__aeabi_dcmpun+0x2c>
 8002dd8:	0020      	movs	r0, r4
 8002dda:	4330      	orrs	r0, r6
 8002ddc:	1e43      	subs	r3, r0, #1
 8002dde:	4198      	sbcs	r0, r3
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	2001      	movs	r0, #1
 8002de4:	432a      	orrs	r2, r5
 8002de6:	d1fb      	bne.n	8002de0 <__aeabi_dcmpun+0x2c>
 8002de8:	e7f2      	b.n	8002dd0 <__aeabi_dcmpun+0x1c>
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	000007ff 	.word	0x000007ff

08002df0 <__aeabi_d2iz>:
 8002df0:	000a      	movs	r2, r1
 8002df2:	b530      	push	{r4, r5, lr}
 8002df4:	4c13      	ldr	r4, [pc, #76]	; (8002e44 <__aeabi_d2iz+0x54>)
 8002df6:	0053      	lsls	r3, r2, #1
 8002df8:	0309      	lsls	r1, r1, #12
 8002dfa:	0005      	movs	r5, r0
 8002dfc:	0b09      	lsrs	r1, r1, #12
 8002dfe:	2000      	movs	r0, #0
 8002e00:	0d5b      	lsrs	r3, r3, #21
 8002e02:	0fd2      	lsrs	r2, r2, #31
 8002e04:	42a3      	cmp	r3, r4
 8002e06:	dd04      	ble.n	8002e12 <__aeabi_d2iz+0x22>
 8002e08:	480f      	ldr	r0, [pc, #60]	; (8002e48 <__aeabi_d2iz+0x58>)
 8002e0a:	4283      	cmp	r3, r0
 8002e0c:	dd02      	ble.n	8002e14 <__aeabi_d2iz+0x24>
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <__aeabi_d2iz+0x5c>)
 8002e10:	18d0      	adds	r0, r2, r3
 8002e12:	bd30      	pop	{r4, r5, pc}
 8002e14:	2080      	movs	r0, #128	; 0x80
 8002e16:	0340      	lsls	r0, r0, #13
 8002e18:	4301      	orrs	r1, r0
 8002e1a:	480d      	ldr	r0, [pc, #52]	; (8002e50 <__aeabi_d2iz+0x60>)
 8002e1c:	1ac0      	subs	r0, r0, r3
 8002e1e:	281f      	cmp	r0, #31
 8002e20:	dd08      	ble.n	8002e34 <__aeabi_d2iz+0x44>
 8002e22:	480c      	ldr	r0, [pc, #48]	; (8002e54 <__aeabi_d2iz+0x64>)
 8002e24:	1ac3      	subs	r3, r0, r3
 8002e26:	40d9      	lsrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4258      	negs	r0, r3
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	d1f0      	bne.n	8002e12 <__aeabi_d2iz+0x22>
 8002e30:	0018      	movs	r0, r3
 8002e32:	e7ee      	b.n	8002e12 <__aeabi_d2iz+0x22>
 8002e34:	4c08      	ldr	r4, [pc, #32]	; (8002e58 <__aeabi_d2iz+0x68>)
 8002e36:	40c5      	lsrs	r5, r0
 8002e38:	46a4      	mov	ip, r4
 8002e3a:	4463      	add	r3, ip
 8002e3c:	4099      	lsls	r1, r3
 8002e3e:	000b      	movs	r3, r1
 8002e40:	432b      	orrs	r3, r5
 8002e42:	e7f2      	b.n	8002e2a <__aeabi_d2iz+0x3a>
 8002e44:	000003fe 	.word	0x000003fe
 8002e48:	0000041d 	.word	0x0000041d
 8002e4c:	7fffffff 	.word	0x7fffffff
 8002e50:	00000433 	.word	0x00000433
 8002e54:	00000413 	.word	0x00000413
 8002e58:	fffffbed 	.word	0xfffffbed

08002e5c <__aeabi_i2d>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d016      	beq.n	8002e90 <__aeabi_i2d+0x34>
 8002e62:	17c3      	asrs	r3, r0, #31
 8002e64:	18c5      	adds	r5, r0, r3
 8002e66:	405d      	eors	r5, r3
 8002e68:	0fc4      	lsrs	r4, r0, #31
 8002e6a:	0028      	movs	r0, r5
 8002e6c:	f000 f8f6 	bl	800305c <__clzsi2>
 8002e70:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <__aeabi_i2d+0x5c>)
 8002e72:	1a12      	subs	r2, r2, r0
 8002e74:	280a      	cmp	r0, #10
 8002e76:	dc16      	bgt.n	8002ea6 <__aeabi_i2d+0x4a>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	002e      	movs	r6, r5
 8002e7c:	3315      	adds	r3, #21
 8002e7e:	409e      	lsls	r6, r3
 8002e80:	230b      	movs	r3, #11
 8002e82:	1a18      	subs	r0, r3, r0
 8002e84:	40c5      	lsrs	r5, r0
 8002e86:	0552      	lsls	r2, r2, #21
 8002e88:	032d      	lsls	r5, r5, #12
 8002e8a:	0b2d      	lsrs	r5, r5, #12
 8002e8c:	0d53      	lsrs	r3, r2, #21
 8002e8e:	e003      	b.n	8002e98 <__aeabi_i2d+0x3c>
 8002e90:	2400      	movs	r4, #0
 8002e92:	2300      	movs	r3, #0
 8002e94:	2500      	movs	r5, #0
 8002e96:	2600      	movs	r6, #0
 8002e98:	051b      	lsls	r3, r3, #20
 8002e9a:	432b      	orrs	r3, r5
 8002e9c:	07e4      	lsls	r4, r4, #31
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	0030      	movs	r0, r6
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	bd70      	pop	{r4, r5, r6, pc}
 8002ea6:	380b      	subs	r0, #11
 8002ea8:	4085      	lsls	r5, r0
 8002eaa:	0552      	lsls	r2, r2, #21
 8002eac:	032d      	lsls	r5, r5, #12
 8002eae:	2600      	movs	r6, #0
 8002eb0:	0b2d      	lsrs	r5, r5, #12
 8002eb2:	0d53      	lsrs	r3, r2, #21
 8002eb4:	e7f0      	b.n	8002e98 <__aeabi_i2d+0x3c>
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	0000041e 	.word	0x0000041e

08002ebc <__aeabi_f2d>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	0043      	lsls	r3, r0, #1
 8002ec0:	0246      	lsls	r6, r0, #9
 8002ec2:	0fc4      	lsrs	r4, r0, #31
 8002ec4:	20fe      	movs	r0, #254	; 0xfe
 8002ec6:	0e1b      	lsrs	r3, r3, #24
 8002ec8:	1c59      	adds	r1, r3, #1
 8002eca:	0a75      	lsrs	r5, r6, #9
 8002ecc:	4208      	tst	r0, r1
 8002ece:	d00c      	beq.n	8002eea <__aeabi_f2d+0x2e>
 8002ed0:	22e0      	movs	r2, #224	; 0xe0
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	4694      	mov	ip, r2
 8002ed6:	076d      	lsls	r5, r5, #29
 8002ed8:	0b36      	lsrs	r6, r6, #12
 8002eda:	4463      	add	r3, ip
 8002edc:	051b      	lsls	r3, r3, #20
 8002ede:	4333      	orrs	r3, r6
 8002ee0:	07e4      	lsls	r4, r4, #31
 8002ee2:	4323      	orrs	r3, r4
 8002ee4:	0028      	movs	r0, r5
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	bd70      	pop	{r4, r5, r6, pc}
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d114      	bne.n	8002f18 <__aeabi_f2d+0x5c>
 8002eee:	2d00      	cmp	r5, #0
 8002ef0:	d01b      	beq.n	8002f2a <__aeabi_f2d+0x6e>
 8002ef2:	0028      	movs	r0, r5
 8002ef4:	f000 f8b2 	bl	800305c <__clzsi2>
 8002ef8:	280a      	cmp	r0, #10
 8002efa:	dc1c      	bgt.n	8002f36 <__aeabi_f2d+0x7a>
 8002efc:	230b      	movs	r3, #11
 8002efe:	002e      	movs	r6, r5
 8002f00:	1a1b      	subs	r3, r3, r0
 8002f02:	40de      	lsrs	r6, r3
 8002f04:	0003      	movs	r3, r0
 8002f06:	3315      	adds	r3, #21
 8002f08:	409d      	lsls	r5, r3
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <__aeabi_f2d+0x88>)
 8002f0c:	0336      	lsls	r6, r6, #12
 8002f0e:	1a12      	subs	r2, r2, r0
 8002f10:	0552      	lsls	r2, r2, #21
 8002f12:	0b36      	lsrs	r6, r6, #12
 8002f14:	0d53      	lsrs	r3, r2, #21
 8002f16:	e7e1      	b.n	8002edc <__aeabi_f2d+0x20>
 8002f18:	2d00      	cmp	r5, #0
 8002f1a:	d009      	beq.n	8002f30 <__aeabi_f2d+0x74>
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	0b36      	lsrs	r6, r6, #12
 8002f20:	0312      	lsls	r2, r2, #12
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <__aeabi_f2d+0x8c>)
 8002f24:	076d      	lsls	r5, r5, #29
 8002f26:	4316      	orrs	r6, r2
 8002f28:	e7d8      	b.n	8002edc <__aeabi_f2d+0x20>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2600      	movs	r6, #0
 8002f2e:	e7d5      	b.n	8002edc <__aeabi_f2d+0x20>
 8002f30:	2600      	movs	r6, #0
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <__aeabi_f2d+0x8c>)
 8002f34:	e7d2      	b.n	8002edc <__aeabi_f2d+0x20>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3b0b      	subs	r3, #11
 8002f3a:	409d      	lsls	r5, r3
 8002f3c:	002e      	movs	r6, r5
 8002f3e:	2500      	movs	r5, #0
 8002f40:	e7e3      	b.n	8002f0a <__aeabi_f2d+0x4e>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	00000389 	.word	0x00000389
 8002f48:	000007ff 	.word	0x000007ff

08002f4c <__aeabi_d2f>:
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	004b      	lsls	r3, r1, #1
 8002f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f52:	0d5b      	lsrs	r3, r3, #21
 8002f54:	030c      	lsls	r4, r1, #12
 8002f56:	4e3d      	ldr	r6, [pc, #244]	; (800304c <__aeabi_d2f+0x100>)
 8002f58:	0a64      	lsrs	r4, r4, #9
 8002f5a:	0f40      	lsrs	r0, r0, #29
 8002f5c:	1c5f      	adds	r7, r3, #1
 8002f5e:	0fc9      	lsrs	r1, r1, #31
 8002f60:	4304      	orrs	r4, r0
 8002f62:	00d5      	lsls	r5, r2, #3
 8002f64:	4237      	tst	r7, r6
 8002f66:	d00a      	beq.n	8002f7e <__aeabi_d2f+0x32>
 8002f68:	4839      	ldr	r0, [pc, #228]	; (8003050 <__aeabi_d2f+0x104>)
 8002f6a:	181e      	adds	r6, r3, r0
 8002f6c:	2efe      	cmp	r6, #254	; 0xfe
 8002f6e:	dd16      	ble.n	8002f9e <__aeabi_d2f+0x52>
 8002f70:	20ff      	movs	r0, #255	; 0xff
 8002f72:	2400      	movs	r4, #0
 8002f74:	05c0      	lsls	r0, r0, #23
 8002f76:	4320      	orrs	r0, r4
 8002f78:	07c9      	lsls	r1, r1, #31
 8002f7a:	4308      	orrs	r0, r1
 8002f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <__aeabi_d2f+0x44>
 8002f82:	432c      	orrs	r4, r5
 8002f84:	d026      	beq.n	8002fd4 <__aeabi_d2f+0x88>
 8002f86:	2205      	movs	r2, #5
 8002f88:	0192      	lsls	r2, r2, #6
 8002f8a:	0a54      	lsrs	r4, r2, #9
 8002f8c:	b2d8      	uxtb	r0, r3
 8002f8e:	e7f1      	b.n	8002f74 <__aeabi_d2f+0x28>
 8002f90:	4325      	orrs	r5, r4
 8002f92:	d0ed      	beq.n	8002f70 <__aeabi_d2f+0x24>
 8002f94:	2080      	movs	r0, #128	; 0x80
 8002f96:	03c0      	lsls	r0, r0, #15
 8002f98:	4304      	orrs	r4, r0
 8002f9a:	20ff      	movs	r0, #255	; 0xff
 8002f9c:	e7ea      	b.n	8002f74 <__aeabi_d2f+0x28>
 8002f9e:	2e00      	cmp	r6, #0
 8002fa0:	dd1b      	ble.n	8002fda <__aeabi_d2f+0x8e>
 8002fa2:	0192      	lsls	r2, r2, #6
 8002fa4:	1e53      	subs	r3, r2, #1
 8002fa6:	419a      	sbcs	r2, r3
 8002fa8:	00e4      	lsls	r4, r4, #3
 8002faa:	0f6d      	lsrs	r5, r5, #29
 8002fac:	4322      	orrs	r2, r4
 8002fae:	432a      	orrs	r2, r5
 8002fb0:	0753      	lsls	r3, r2, #29
 8002fb2:	d048      	beq.n	8003046 <__aeabi_d2f+0xfa>
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d000      	beq.n	8002fbe <__aeabi_d2f+0x72>
 8002fbc:	3204      	adds	r2, #4
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	04db      	lsls	r3, r3, #19
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d03f      	beq.n	8003046 <__aeabi_d2f+0xfa>
 8002fc6:	1c70      	adds	r0, r6, #1
 8002fc8:	2efe      	cmp	r6, #254	; 0xfe
 8002fca:	d0d1      	beq.n	8002f70 <__aeabi_d2f+0x24>
 8002fcc:	0192      	lsls	r2, r2, #6
 8002fce:	0a54      	lsrs	r4, r2, #9
 8002fd0:	b2c0      	uxtb	r0, r0
 8002fd2:	e7cf      	b.n	8002f74 <__aeabi_d2f+0x28>
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	2400      	movs	r4, #0
 8002fd8:	e7cc      	b.n	8002f74 <__aeabi_d2f+0x28>
 8002fda:	0032      	movs	r2, r6
 8002fdc:	3217      	adds	r2, #23
 8002fde:	db22      	blt.n	8003026 <__aeabi_d2f+0xda>
 8002fe0:	2080      	movs	r0, #128	; 0x80
 8002fe2:	0400      	lsls	r0, r0, #16
 8002fe4:	4320      	orrs	r0, r4
 8002fe6:	241e      	movs	r4, #30
 8002fe8:	1ba4      	subs	r4, r4, r6
 8002fea:	2c1f      	cmp	r4, #31
 8002fec:	dd1d      	ble.n	800302a <__aeabi_d2f+0xde>
 8002fee:	2202      	movs	r2, #2
 8002ff0:	4252      	negs	r2, r2
 8002ff2:	1b96      	subs	r6, r2, r6
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	40f2      	lsrs	r2, r6
 8002ff8:	0016      	movs	r6, r2
 8002ffa:	2c20      	cmp	r4, #32
 8002ffc:	d004      	beq.n	8003008 <__aeabi_d2f+0xbc>
 8002ffe:	4a15      	ldr	r2, [pc, #84]	; (8003054 <__aeabi_d2f+0x108>)
 8003000:	4694      	mov	ip, r2
 8003002:	4463      	add	r3, ip
 8003004:	4098      	lsls	r0, r3
 8003006:	4305      	orrs	r5, r0
 8003008:	002a      	movs	r2, r5
 800300a:	1e53      	subs	r3, r2, #1
 800300c:	419a      	sbcs	r2, r3
 800300e:	4332      	orrs	r2, r6
 8003010:	2600      	movs	r6, #0
 8003012:	0753      	lsls	r3, r2, #29
 8003014:	d1ce      	bne.n	8002fb4 <__aeabi_d2f+0x68>
 8003016:	2480      	movs	r4, #128	; 0x80
 8003018:	0013      	movs	r3, r2
 800301a:	04e4      	lsls	r4, r4, #19
 800301c:	2001      	movs	r0, #1
 800301e:	4023      	ands	r3, r4
 8003020:	4222      	tst	r2, r4
 8003022:	d1d3      	bne.n	8002fcc <__aeabi_d2f+0x80>
 8003024:	e7b0      	b.n	8002f88 <__aeabi_d2f+0x3c>
 8003026:	2300      	movs	r3, #0
 8003028:	e7ad      	b.n	8002f86 <__aeabi_d2f+0x3a>
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <__aeabi_d2f+0x10c>)
 800302c:	4694      	mov	ip, r2
 800302e:	002a      	movs	r2, r5
 8003030:	40e2      	lsrs	r2, r4
 8003032:	0014      	movs	r4, r2
 8003034:	002a      	movs	r2, r5
 8003036:	4463      	add	r3, ip
 8003038:	409a      	lsls	r2, r3
 800303a:	4098      	lsls	r0, r3
 800303c:	1e55      	subs	r5, r2, #1
 800303e:	41aa      	sbcs	r2, r5
 8003040:	4302      	orrs	r2, r0
 8003042:	4322      	orrs	r2, r4
 8003044:	e7e4      	b.n	8003010 <__aeabi_d2f+0xc4>
 8003046:	0033      	movs	r3, r6
 8003048:	e79e      	b.n	8002f88 <__aeabi_d2f+0x3c>
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	000007fe 	.word	0x000007fe
 8003050:	fffffc80 	.word	0xfffffc80
 8003054:	fffffca2 	.word	0xfffffca2
 8003058:	fffffc82 	.word	0xfffffc82

0800305c <__clzsi2>:
 800305c:	211c      	movs	r1, #28
 800305e:	2301      	movs	r3, #1
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	4298      	cmp	r0, r3
 8003064:	d301      	bcc.n	800306a <__clzsi2+0xe>
 8003066:	0c00      	lsrs	r0, r0, #16
 8003068:	3910      	subs	r1, #16
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	4298      	cmp	r0, r3
 800306e:	d301      	bcc.n	8003074 <__clzsi2+0x18>
 8003070:	0a00      	lsrs	r0, r0, #8
 8003072:	3908      	subs	r1, #8
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	4298      	cmp	r0, r3
 8003078:	d301      	bcc.n	800307e <__clzsi2+0x22>
 800307a:	0900      	lsrs	r0, r0, #4
 800307c:	3904      	subs	r1, #4
 800307e:	a202      	add	r2, pc, #8	; (adr r2, 8003088 <__clzsi2+0x2c>)
 8003080:	5c10      	ldrb	r0, [r2, r0]
 8003082:	1840      	adds	r0, r0, r1
 8003084:	4770      	bx	lr
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	02020304 	.word	0x02020304
 800308c:	01010101 	.word	0x01010101
	...

08003098 <__clzdi2>:
 8003098:	b510      	push	{r4, lr}
 800309a:	2900      	cmp	r1, #0
 800309c:	d103      	bne.n	80030a6 <__clzdi2+0xe>
 800309e:	f7ff ffdd 	bl	800305c <__clzsi2>
 80030a2:	3020      	adds	r0, #32
 80030a4:	e002      	b.n	80030ac <__clzdi2+0x14>
 80030a6:	0008      	movs	r0, r1
 80030a8:	f7ff ffd8 	bl	800305c <__clzsi2>
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)

080030b0 <bfmin_init>:

/*
 * Initialize flash
 */
void bfmin_init()
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0

	bfmin_crc_init();
 80030b6:	f000 f881 	bl	80031bc <bfmin_crc_init>

	//copy values to RAM
	bfmin_lifetime_in_minutes = bfmin_read_address((uint32_t)BFMIN_LIFETIME_ADDRESS)&0xffffffff;
 80030ba:	4b35      	ldr	r3, [pc, #212]	; (8003190 <bfmin_init+0xe0>)
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f8a3 	bl	8003208 <bfmin_read_address>
 80030c2:	0002      	movs	r2, r0
 80030c4:	000b      	movs	r3, r1
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <bfmin_init+0xe4>)
 80030c8:	601a      	str	r2, [r3, #0]
	if(bfmin_lifetime_in_minutes == 0xffffffff)
 80030ca:	4b32      	ldr	r3, [pc, #200]	; (8003194 <bfmin_init+0xe4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3301      	adds	r3, #1
 80030d0:	d110      	bne.n	80030f4 <bfmin_init+0x44>
	{
		uint32_t lifetime_rescue = bfmin_read_address((uint32_t)BFMIN_LIFETIME_RESCUE_ADDRESS)&0xffffffff;
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <bfmin_init+0xe8>)
 80030d4:	0018      	movs	r0, r3
 80030d6:	f000 f897 	bl	8003208 <bfmin_read_address>
 80030da:	0002      	movs	r2, r0
 80030dc:	000b      	movs	r3, r1
 80030de:	0013      	movs	r3, r2
 80030e0:	60bb      	str	r3, [r7, #8]
		if(lifetime_rescue != 0xffffffff)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	d003      	beq.n	80030f0 <bfmin_init+0x40>
		{
			bfmin_lifetime_in_minutes = lifetime_rescue;
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <bfmin_init+0xe4>)
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e001      	b.n	80030f4 <bfmin_init+0x44>
		}else
		{
			bfmin_reset_counter();
 80030f0:	f000 f8cc 	bl	800328c <bfmin_reset_counter>
		}
	}
	bfmin_restarts = bfmin_read_address((uint32_t)BFMIN_RESTARTS_ADDRESS)&0xffffffff;
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <bfmin_init+0xec>)
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f886 	bl	8003208 <bfmin_read_address>
 80030fc:	0002      	movs	r2, r0
 80030fe:	000b      	movs	r3, r1
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <bfmin_init+0xf0>)
 8003102:	601a      	str	r2, [r3, #0]
	int cnt;
	for(cnt=0;cnt<BFMIN_NR_OF_PARAMETER_SLOTS;cnt++)
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e00b      	b.n	8003122 <bfmin_init+0x72>
	{
		bfmin_read_parameter(cnt, &parameters[cnt]);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	b2d8      	uxtb	r0, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	00da      	lsls	r2, r3, #3
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <bfmin_init+0xf4>)
 8003114:	18d3      	adds	r3, r2, r3
 8003116:	0019      	movs	r1, r3
 8003118:	f000 f95e 	bl	80033d8 <bfmin_read_parameter>
	for(cnt=0;cnt<BFMIN_NR_OF_PARAMETER_SLOTS;cnt++)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3301      	adds	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b1d      	cmp	r3, #29
 8003126:	ddf0      	ble.n	800310a <bfmin_init+0x5a>



	//PVD configuration
	PWR_PVDTypeDef sConfigPVD;
	sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING; //IT_Rising triggers if voltage falls below threshold
 8003128:	003b      	movs	r3, r7
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <bfmin_init+0xf8>)
 800312c:	605a      	str	r2, [r3, #4]
	sConfigPVD.PVDLevel = PWR_PVDLEVEL_6; //Falling voltage threshold 2.9V #RM0444 Page 145
 800312e:	003b      	movs	r3, r7
 8003130:	226c      	movs	r2, #108	; 0x6c
 8003132:	601a      	str	r2, [r3, #0]
	HAL_PWREx_ConfigPVD(&sConfigPVD);
 8003134:	003b      	movs	r3, r7
 8003136:	0018      	movs	r0, r3
 8003138:	f004 ffe0 	bl	80080fc <HAL_PWREx_ConfigPVD>

	//Clock source is 32kHz internal clock
	hlptim1.Instance = LPTIM1;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <bfmin_init+0xfc>)
 800313e:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <bfmin_init+0x100>)
 8003140:	601a      	str	r2, [r3, #0]
	hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <bfmin_init+0xfc>)
 8003144:	2200      	movs	r2, #0
 8003146:	605a      	str	r2, [r3, #4]
	hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <bfmin_init+0xfc>)
 800314a:	22e0      	movs	r2, #224	; 0xe0
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	609a      	str	r2, [r3, #8]
	hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <bfmin_init+0xfc>)
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <bfmin_init+0x104>)
 8003154:	615a      	str	r2, [r3, #20]
	hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <bfmin_init+0xfc>)
 8003158:	2200      	movs	r2, #0
 800315a:	621a      	str	r2, [r3, #32]
	hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <bfmin_init+0xfc>)
 800315e:	2200      	movs	r2, #0
 8003160:	625a      	str	r2, [r3, #36]	; 0x24
	hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8003162:	4b12      	ldr	r3, [pc, #72]	; (80031ac <bfmin_init+0xfc>)
 8003164:	2200      	movs	r2, #0
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
	hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <bfmin_init+0xfc>)
 800316a:	2200      	movs	r2, #0
 800316c:	62da      	str	r2, [r3, #44]	; 0x2c
	hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <bfmin_init+0xfc>)
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
	HAL_LPTIM_Init(&hlptim1);
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <bfmin_init+0xfc>)
 8003176:	0018      	movs	r0, r3
 8003178:	f004 fc78 	bl	8007a6c <HAL_LPTIM_Init>

	HAL_LPTIM_Counter_Start_IT(&hlptim1, 15000);//tick = 250Hz -> periode of 15000 = 60s
 800317c:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <bfmin_init+0x108>)
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <bfmin_init+0xfc>)
 8003180:	0011      	movs	r1, r2
 8003182:	0018      	movs	r0, r3
 8003184:	f004 fd14 	bl	8007bb0 <HAL_LPTIM_Counter_Start_IT>

}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b004      	add	sp, #16
 800318e:	bd80      	pop	{r7, pc}
 8003190:	0801f800 	.word	0x0801f800
 8003194:	20000200 	.word	0x20000200
 8003198:	0801f820 	.word	0x0801f820
 800319c:	0801f810 	.word	0x0801f810
 80031a0:	200001fc 	.word	0x200001fc
 80031a4:	20000208 	.word	0x20000208
 80031a8:	00010001 	.word	0x00010001
 80031ac:	200003f0 	.word	0x200003f0
 80031b0:	40007c00 	.word	0x40007c00
 80031b4:	0000ffff 	.word	0x0000ffff
 80031b8:	00003a98 	.word	0x00003a98

080031bc <bfmin_crc_init>:

void bfmin_crc_init()
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
	hcrc.Instance = CRC;
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <bfmin_crc_init+0x44>)
 80031c2:	4a10      	ldr	r2, [pc, #64]	; (8003204 <bfmin_crc_init+0x48>)
 80031c4:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <bfmin_crc_init+0x44>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <bfmin_crc_init+0x44>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	715a      	strb	r2, [r3, #5]
	hcrc.Init.GeneratingPolynomial = 0x9b;
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <bfmin_crc_init+0x44>)
 80031d4:	229b      	movs	r2, #155	; 0x9b
 80031d6:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <bfmin_crc_init+0x44>)
 80031da:	2210      	movs	r2, #16
 80031dc:	60da      	str	r2, [r3, #12]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <bfmin_crc_init+0x44>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <bfmin_crc_init+0x44>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_HALFWORDS;
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <bfmin_crc_init+0x44>)
 80031ec:	2202      	movs	r2, #2
 80031ee:	621a      	str	r2, [r3, #32]
	HAL_CRC_Init(&hcrc);
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <bfmin_crc_init+0x44>)
 80031f2:	0018      	movs	r0, r3
 80031f4:	f003 fab6 	bl	8006764 <HAL_CRC_Init>
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	200003b8 	.word	0x200003b8
 8003204:	40023000 	.word	0x40023000

08003208 <bfmin_read_address>:
 * read a doubleword
 * bfmin_ptr: Address in flash
 * return: Value at address
 */
uint64_t bfmin_read_address(uint32_t bfmin_ptr)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	return(uint64_t)*(uint64_t *)bfmin_ptr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
}
 8003216:	0010      	movs	r0, r2
 8003218:	0019      	movs	r1, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <bfmin_write>:
 * bfmin_addr: Address in flash to write to
 * bfmin_data: Value to write
 * return: Status of operation
 */
bfmin_error bfmin_write(uint32_t bfmin_addr, uint64_t bfmin_data)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	603a      	str	r2, [r7, #0]
 800322a:	607b      	str	r3, [r7, #4]
	//check if address is aligned
	if(bfmin_addr%BFMIN_FLASH_CHUNK_SIZE!=0)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2207      	movs	r2, #7
 8003230:	4013      	ands	r3, r2
 8003232:	d001      	beq.n	8003238 <bfmin_write+0x18>
	{
		return BFMIN_AdrNotAligned;
 8003234:	2302      	movs	r3, #2
 8003236:	e01f      	b.n	8003278 <bfmin_write+0x58>
	}

	//check if flash pointer is on bfmin flash page

	if((bfmin_addr >= BFMIN_LIFETIME_PAGE_ADDRESS && bfmin_addr < BFMIN_LIFETIME_PAGE_ADDRESS+BFMIN_FLASH_PAGE_SIZE) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a11      	ldr	r2, [pc, #68]	; (8003280 <bfmin_write+0x60>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d903      	bls.n	8003248 <bfmin_write+0x28>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <bfmin_write+0x64>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d907      	bls.n	8003258 <bfmin_write+0x38>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a0f      	ldr	r2, [pc, #60]	; (8003288 <bfmin_write+0x68>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d912      	bls.n	8003276 <bfmin_write+0x56>
			(bfmin_addr >= BFMIN_STORAGE_PAGE_ADDRESS && bfmin_addr < BFMIN_STORAGE_PAGE_ADDRESS+BFMIN_FLASH_PAGE_SIZE))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4a0b      	ldr	r2, [pc, #44]	; (8003280 <bfmin_write+0x60>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d80e      	bhi.n	8003276 <bfmin_write+0x56>
	{
		HAL_FLASH_Unlock();
 8003258:	f004 f8ee 	bl	8007438 <HAL_FLASH_Unlock>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, bfmin_addr, bfmin_data);
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68f9      	ldr	r1, [r7, #12]
 8003262:	2001      	movs	r0, #1
 8003264:	f004 f89a 	bl	800739c <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(10);
 8003268:	200a      	movs	r0, #10
 800326a:	f004 f925 	bl	80074b8 <FLASH_WaitForLastOperation>
		HAL_FLASH_Lock();
 800326e:	f004 f907 	bl	8007480 <HAL_FLASH_Lock>
	}else
	{
		return BFMIN_AdrOutOfPage;
	}
	return BFMIN_NoError;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <bfmin_write+0x58>
		return BFMIN_AdrOutOfPage;
 8003276:	2303      	movs	r3, #3

}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b004      	add	sp, #16
 800327e:	bd80      	pop	{r7, pc}
 8003280:	0801f7ff 	.word	0x0801f7ff
 8003284:	0801ffff 	.word	0x0801ffff
 8003288:	0801efff 	.word	0x0801efff

0800328c <bfmin_reset_counter>:
/*
 * Reset liftime and restart counter to 0
 * return: Status of operation
 */
bfmin_error bfmin_reset_counter()
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
	bfmin_erase_page(BFMIN_LIFETIME_PAGE);
 8003290:	203f      	movs	r0, #63	; 0x3f
 8003292:	f000 f8cf 	bl	8003434 <bfmin_erase_page>
	bfmin_write(BFMIN_LIFETIME_ADDRESS, 0);
 8003296:	4908      	ldr	r1, [pc, #32]	; (80032b8 <bfmin_reset_counter+0x2c>)
 8003298:	2200      	movs	r2, #0
 800329a:	2300      	movs	r3, #0
 800329c:	0008      	movs	r0, r1
 800329e:	f7ff ffbf 	bl	8003220 <bfmin_write>
	bfmin_write(BFMIN_RESTARTS_ADDRESS, 0);
 80032a2:	4906      	ldr	r1, [pc, #24]	; (80032bc <bfmin_reset_counter+0x30>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	2300      	movs	r3, #0
 80032a8:	0008      	movs	r0, r1
 80032aa:	f7ff ffb9 	bl	8003220 <bfmin_write>
	return BFMIN_NoError;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	0801f800 	.word	0x0801f800
 80032bc:	0801f810 	.word	0x0801f810

080032c0 <bfmin_store_parameter>:
 * 		slot: slot where to store the parameter (0-29)
 * parameter: 64bit value
 * return: Status of operation
 */
bfmin_error bfmin_store_parameter(uint8_t slot, uint64_t parameter)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	0001      	movs	r1, r0
 80032c8:	603a      	str	r2, [r7, #0]
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	230f      	movs	r3, #15
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	1c0a      	adds	r2, r1, #0
 80032d2:	701a      	strb	r2, [r3, #0]
	if(parameter == 0xffffffffffffffff)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	d104      	bne.n	80032e4 <bfmin_store_parameter+0x24>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3301      	adds	r3, #1
 80032de:	d101      	bne.n	80032e4 <bfmin_store_parameter+0x24>
	{
		return BFMIN_InvalidValue;
 80032e0:	2304      	movs	r3, #4
 80032e2:	e070      	b.n	80033c6 <bfmin_store_parameter+0x106>
	}else if(parameter == parameters[slot])
 80032e4:	230f      	movs	r3, #15
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	4a39      	ldr	r2, [pc, #228]	; (80033d0 <bfmin_store_parameter+0x110>)
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	18d3      	adds	r3, r2, r3
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	4291      	cmp	r1, r2
 80032f8:	d104      	bne.n	8003304 <bfmin_store_parameter+0x44>
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4299      	cmp	r1, r3
 80032fe:	d101      	bne.n	8003304 <bfmin_store_parameter+0x44>
	{
		return BFMIN_NoError;
 8003300:	2300      	movs	r3, #0
 8003302:	e060      	b.n	80033c6 <bfmin_store_parameter+0x106>
	}
	parameters[slot] = parameter;
 8003304:	200f      	movs	r0, #15
 8003306:	183b      	adds	r3, r7, r0
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <bfmin_store_parameter+0x110>)
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	18d1      	adds	r1, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	600a      	str	r2, [r1, #0]
 8003316:	604b      	str	r3, [r1, #4]
	uint64_t tmp;
	switch(bfmin_read_parameter(slot, &tmp))
 8003318:	2310      	movs	r3, #16
 800331a:	18fa      	adds	r2, r7, r3
 800331c:	183b      	adds	r3, r7, r0
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	0011      	movs	r1, r2
 8003322:	0018      	movs	r0, r3
 8003324:	f000 f858 	bl	80033d8 <bfmin_read_parameter>
 8003328:	0003      	movs	r3, r0
 800332a:	2b03      	cmp	r3, #3
 800332c:	d00a      	beq.n	8003344 <bfmin_store_parameter+0x84>
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00a      	beq.n	8003348 <bfmin_store_parameter+0x88>
	case BFMIN_InvalidValue:
		bfmin_write(BFMIN_STORAGE_PAGE_ADDRESS+slot*BFMIN_NR_OF_BYTES_BETWEEN_SLOTS,parameter);
		return BFMIN_NoError;
		break;
	default:
		break;
 8003332:	46c0      	nop			; (mov r8, r8)
	}

	bfmin_erase_page(BFMIN_STORAGE_PAGE);
 8003334:	203e      	movs	r0, #62	; 0x3e
 8003336:	f000 f87d 	bl	8003434 <bfmin_erase_page>
	uint8_t cnt;
	for(cnt=0;cnt<BFMIN_NR_OF_PARAMETER_SLOTS;cnt++)
 800333a:	231f      	movs	r3, #31
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e03a      	b.n	80033ba <bfmin_store_parameter+0xfa>
		return BFMIN_AdrOutOfPage;
 8003344:	2303      	movs	r3, #3
 8003346:	e03e      	b.n	80033c6 <bfmin_store_parameter+0x106>
		bfmin_write(BFMIN_STORAGE_PAGE_ADDRESS+slot*BFMIN_NR_OF_BYTES_BETWEEN_SLOTS,parameter);
 8003348:	230f      	movs	r3, #15
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	0013      	movs	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	189b      	adds	r3, r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4a1f      	ldr	r2, [pc, #124]	; (80033d4 <bfmin_store_parameter+0x114>)
 8003358:	4694      	mov	ip, r2
 800335a:	4463      	add	r3, ip
 800335c:	0019      	movs	r1, r3
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0008      	movs	r0, r1
 8003364:	f7ff ff5c 	bl	8003220 <bfmin_write>
		return BFMIN_NoError;
 8003368:	2300      	movs	r3, #0
 800336a:	e02c      	b.n	80033c6 <bfmin_store_parameter+0x106>
	{
		if(parameters[cnt]!=0xffffffffffffffff)
 800336c:	231f      	movs	r3, #31
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <bfmin_store_parameter+0x110>)
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	18d3      	adds	r3, r2, r3
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	1c51      	adds	r1, r2, #1
 800337e:	d101      	bne.n	8003384 <bfmin_store_parameter+0xc4>
 8003380:	3301      	adds	r3, #1
 8003382:	d014      	beq.n	80033ae <bfmin_store_parameter+0xee>
		{
			bfmin_write(BFMIN_STORAGE_PAGE_ADDRESS+cnt*BFMIN_NR_OF_BYTES_BETWEEN_SLOTS,parameters[cnt]);
 8003384:	201f      	movs	r0, #31
 8003386:	183b      	adds	r3, r7, r0
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	0013      	movs	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	189b      	adds	r3, r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <bfmin_store_parameter+0x114>)
 8003394:	4694      	mov	ip, r2
 8003396:	4463      	add	r3, ip
 8003398:	0019      	movs	r1, r3
 800339a:	183b      	adds	r3, r7, r0
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <bfmin_store_parameter+0x110>)
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	18d3      	adds	r3, r2, r3
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0008      	movs	r0, r1
 80033aa:	f7ff ff39 	bl	8003220 <bfmin_write>
	for(cnt=0;cnt<BFMIN_NR_OF_PARAMETER_SLOTS;cnt++)
 80033ae:	211f      	movs	r1, #31
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	3201      	adds	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	231f      	movs	r3, #31
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b1d      	cmp	r3, #29
 80033c2:	d9d3      	bls.n	800336c <bfmin_store_parameter+0xac>
		}
	}
	return BFMIN_NoError;
 80033c4:	2300      	movs	r3, #0

}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b008      	add	sp, #32
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	20000208 	.word	0x20000208
 80033d4:	0801f000 	.word	0x0801f000

080033d8 <bfmin_read_parameter>:
 * 		slot: slot of the parameter to read (0-29)
 * parameter: pointer of 64bit variable where the parameter gets written to
 * return: Status of operation
 */
bfmin_error bfmin_read_parameter(uint8_t slot, uint64_t* parameter)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	0002      	movs	r2, r0
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	1dfb      	adds	r3, r7, #7
 80033e4:	701a      	strb	r2, [r3, #0]
	if(slot>=BFMIN_NR_OF_PARAMETER_SLOTS)
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b1d      	cmp	r3, #29
 80033ec:	d901      	bls.n	80033f2 <bfmin_read_parameter+0x1a>
	{
		return BFMIN_AdrOutOfPage;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e01a      	b.n	8003428 <bfmin_read_parameter+0x50>
	}
	(*parameter) = bfmin_read_address(BFMIN_STORAGE_PAGE_ADDRESS+slot*BFMIN_NR_OF_BYTES_BETWEEN_SLOTS);
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	0013      	movs	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <bfmin_read_parameter+0x58>)
 8003400:	4694      	mov	ip, r2
 8003402:	4463      	add	r3, ip
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff feff 	bl	8003208 <bfmin_read_address>
 800340a:	0002      	movs	r2, r0
 800340c:	000b      	movs	r3, r1
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	600a      	str	r2, [r1, #0]
 8003412:	604b      	str	r3, [r1, #4]
	if(*parameter == 0xffffffffffffffff)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	1c51      	adds	r1, r2, #1
 800341c:	d103      	bne.n	8003426 <bfmin_read_parameter+0x4e>
 800341e:	3301      	adds	r3, #1
 8003420:	d101      	bne.n	8003426 <bfmin_read_parameter+0x4e>
	{
		return BFMIN_InvalidValue;
 8003422:	2304      	movs	r3, #4
 8003424:	e000      	b.n	8003428 <bfmin_read_parameter+0x50>
	}
	else
	{
		return BFMIN_NoError;
 8003426:	2300      	movs	r3, #0

	}
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}
 8003430:	0801f000 	.word	0x0801f000

08003434 <bfmin_erase_page>:
/*
 * Erase page
 * return: Status of operation
 */
bfmin_error bfmin_erase_page(uint8_t bfmin_page)
{
 8003434:	b5b0      	push	{r4, r5, r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	0002      	movs	r2, r0
 800343c:	1dfb      	adds	r3, r7, #7
 800343e:	701a      	strb	r2, [r3, #0]
	bfmin_error err = BFMIN_NoError;
 8003440:	251f      	movs	r5, #31
 8003442:	197b      	adds	r3, r7, r5
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
	uint32_t flash_err;
	FLASH_EraseInitTypeDef hflash;
	hflash.NbPages = 1;
 8003448:	2408      	movs	r4, #8
 800344a:	193b      	adds	r3, r7, r4
 800344c:	2201      	movs	r2, #1
 800344e:	60da      	str	r2, [r3, #12]
	hflash.TypeErase = FLASH_TYPEERASE_PAGES;
 8003450:	193b      	adds	r3, r7, r4
 8003452:	2202      	movs	r2, #2
 8003454:	601a      	str	r2, [r3, #0]
	hflash.Page = bfmin_page;
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	193b      	adds	r3, r7, r4
 800345c:	609a      	str	r2, [r3, #8]
	HAL_FLASH_Unlock();
 800345e:	f003 ffeb 	bl	8007438 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&hflash, &flash_err);//Erase page one
 8003462:	2318      	movs	r3, #24
 8003464:	18fa      	adds	r2, r7, r3
 8003466:	193b      	adds	r3, r7, r4
 8003468:	0011      	movs	r1, r2
 800346a:	0018      	movs	r0, r3
 800346c:	f004 f892 	bl	8007594 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8003470:	f004 f806 	bl	8007480 <HAL_FLASH_Lock>

	return err;
 8003474:	197b      	adds	r3, r7, r5
 8003476:	781b      	ldrb	r3, [r3, #0]

}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b008      	add	sp, #32
 800347e:	bdb0      	pop	{r4, r5, r7, pc}

08003480 <HAL_PWREx_PVD_Rising_Callback>:

/*
 * Brown out interrupt routine
 */
void HAL_PWREx_PVD_Rising_Callback(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
	bfmin_write(BFMIN_LIFETIME_ADDRESS, bfmin_lifetime_in_minutes);
 8003484:	4905      	ldr	r1, [pc, #20]	; (800349c <HAL_PWREx_PVD_Rising_Callback+0x1c>)
 8003486:	6809      	ldr	r1, [r1, #0]
 8003488:	000a      	movs	r2, r1
 800348a:	2100      	movs	r1, #0
 800348c:	000b      	movs	r3, r1
 800348e:	4904      	ldr	r1, [pc, #16]	; (80034a0 <HAL_PWREx_PVD_Rising_Callback+0x20>)
 8003490:	0008      	movs	r0, r1
 8003492:	f7ff fec5 	bl	8003220 <bfmin_write>
	//HAL_UART_Transmit(&huart3, (uint8_t *)"Brown out\r\n", 11, 100);
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000200 	.word	0x20000200
 80034a0:	0801f800 	.word	0x0801f800

080034a4 <HAL_LPTIM_AutoReloadMatchCallback>:

/*
 * 60s periodic LPTIM1 interrupt
 */
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80034a4:	b5b0      	push	{r4, r5, r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6178      	str	r0, [r7, #20]
	update_life_flash();
 80034ac:	f000 f846 	bl	800353c <update_life_flash>
	bfmin_lifetime_in_minutes++;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_LPTIM_AutoReloadMatchCallback+0x84>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <HAL_LPTIM_AutoReloadMatchCallback+0x84>)
 80034b8:	601a      	str	r2, [r3, #0]
	bfmin_write(BFMIN_LIFETIME_RESCUE_ADDRESS, bfmin_lifetime_in_minutes);
 80034ba:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <HAL_LPTIM_AutoReloadMatchCallback+0x84>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	4919      	ldr	r1, [pc, #100]	; (800352c <HAL_LPTIM_AutoReloadMatchCallback+0x88>)
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	0008      	movs	r0, r1
 80034cc:	f7ff fea8 	bl	8003220 <bfmin_write>
	if(bfmin_is_first_interrupt)
 80034d0:	4b17      	ldr	r3, [pc, #92]	; (8003530 <HAL_LPTIM_AutoReloadMatchCallback+0x8c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d022      	beq.n	800351e <HAL_LPTIM_AutoReloadMatchCallback+0x7a>
	{

		bfmin_restarts++;
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_LPTIM_AutoReloadMatchCallback+0x90>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_LPTIM_AutoReloadMatchCallback+0x90>)
 80034e0:	601a      	str	r2, [r3, #0]
		bfmin_erase_page(BFMIN_LIFETIME_PAGE);
 80034e2:	203f      	movs	r0, #63	; 0x3f
 80034e4:	f7ff ffa6 	bl	8003434 <bfmin_erase_page>
		bfmin_write(BFMIN_RESTARTS_ADDRESS, bfmin_restarts);
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_LPTIM_AutoReloadMatchCallback+0x90>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	4911      	ldr	r1, [pc, #68]	; (8003538 <HAL_LPTIM_AutoReloadMatchCallback+0x94>)
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0008      	movs	r0, r1
 80034fa:	f7ff fe91 	bl	8003220 <bfmin_write>
		bfmin_write(BFMIN_LIFETIME_RESCUE_ADDRESS, bfmin_lifetime_in_minutes);
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <HAL_LPTIM_AutoReloadMatchCallback+0x84>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	001c      	movs	r4, r3
 8003504:	2300      	movs	r3, #0
 8003506:	001d      	movs	r5, r3
 8003508:	4908      	ldr	r1, [pc, #32]	; (800352c <HAL_LPTIM_AutoReloadMatchCallback+0x88>)
 800350a:	0022      	movs	r2, r4
 800350c:	002b      	movs	r3, r5
 800350e:	0008      	movs	r0, r1
 8003510:	f7ff fe86 	bl	8003220 <bfmin_write>
		HAL_PWREx_EnablePVD();
 8003514:	f004 fe5e 	bl	80081d4 <HAL_PWREx_EnablePVD>
		bfmin_is_first_interrupt=0;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_LPTIM_AutoReloadMatchCallback+0x8c>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
	}
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	46bd      	mov	sp, r7
 8003522:	b006      	add	sp, #24
 8003524:	bdb0      	pop	{r4, r5, r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000200 	.word	0x20000200
 800352c:	0801f820 	.word	0x0801f820
 8003530:	20000000 	.word	0x20000000
 8003534:	200001fc 	.word	0x200001fc
 8003538:	0801f810 	.word	0x0801f810

0800353c <update_life_flash>:

void update_life_flash(){
 800353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
	uint16_t actlife;
	actlife=life_mean/life_count;
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <update_life_flash+0x90>)
 8003544:	881a      	ldrh	r2, [r3, #0]
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <update_life_flash+0x94>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	1dbe      	adds	r6, r7, #6
 800354c:	0019      	movs	r1, r3
 800354e:	0010      	movs	r0, r2
 8003550:	f7fc fde4 	bl	800011c <__udivsi3>
 8003554:	0003      	movs	r3, r0
 8003556:	8033      	strh	r3, [r6, #0]

	if ((actlife<life_flash)&(life_count>20)){
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <update_life_flash+0x98>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	1dba      	adds	r2, r7, #6
 800355e:	8812      	ldrh	r2, [r2, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	419b      	sbcs	r3, r3
 8003564:	425b      	negs	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <update_life_flash+0x94>)
 800356a:	8812      	ldrh	r2, [r2, #0]
 800356c:	2114      	movs	r1, #20
 800356e:	4291      	cmp	r1, r2
 8003570:	4192      	sbcs	r2, r2
 8003572:	4252      	negs	r2, r2
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	4013      	ands	r3, r2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00f      	beq.n	800359e <update_life_flash+0x62>
		life_flash=life_flash-5;
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <update_life_flash+0x98>)
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	3b05      	subs	r3, #5
 8003584:	b29a      	uxth	r2, r3
 8003586:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <update_life_flash+0x98>)
 8003588:	801a      	strh	r2, [r3, #0]
		bfmin_store_parameter(6,(uint64_t)life_flash);
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <update_life_flash+0x98>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	001c      	movs	r4, r3
 8003590:	2300      	movs	r3, #0
 8003592:	001d      	movs	r5, r3
 8003594:	0022      	movs	r2, r4
 8003596:	002b      	movs	r3, r5
 8003598:	2006      	movs	r0, #6
 800359a:	f7ff fe91 	bl	80032c0 <bfmin_store_parameter>
	}

	if(life_flash>100){
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <update_life_flash+0x98>)
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d907      	bls.n	80035b6 <update_life_flash+0x7a>
		life_flash=100;
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <update_life_flash+0x98>)
 80035a8:	2264      	movs	r2, #100	; 0x64
 80035aa:	801a      	strh	r2, [r3, #0]
		bfmin_store_parameter(6,(uint64_t)100);
 80035ac:	2264      	movs	r2, #100	; 0x64
 80035ae:	2300      	movs	r3, #0
 80035b0:	2006      	movs	r0, #6
 80035b2:	f7ff fe85 	bl	80032c0 <bfmin_store_parameter>
	}
	if(life_flash<0){
		life_flash=0;
		bfmin_store_parameter(6,(uint64_t)0);
	}
	life_mean=0;
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <update_life_flash+0x90>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	801a      	strh	r2, [r3, #0]
	life_count=0;
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <update_life_flash+0x94>)
 80035be:	2200      	movs	r2, #0
 80035c0:	801a      	strh	r2, [r3, #0]
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b003      	add	sp, #12
 80035c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	200000d4 	.word	0x200000d4
 80035d0:	20001870 	.word	0x20001870
 80035d4:	200000d6 	.word	0x200000d6

080035d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
	 pdset=1900;//1210;
//Muster-Nr326: 200mv->1550
if (laser==2)
	pdset=1650;//540;//2050;
if (laser==3)
	pdset=2100;
 80035de:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <main+0x110>)
 80035e0:	4a42      	ldr	r2, [pc, #264]	; (80036ec <main+0x114>)
 80035e2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035e4:	f001 fcd0 	bl	8004f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035e8:	f000 fa70 	bl	8003acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ec:	f000 fd28 	bl	8004040 <MX_GPIO_Init>
  MX_DMA_Init();
 80035f0:	f000 fd00 	bl	8003ff4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80035f4:	f000 fcca 	bl	8003f8c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80035f8:	f000 faca 	bl	8003b90 <MX_ADC1_Init>
  MX_DAC1_Init();
 80035fc:	f000 fbd0 	bl	8003da0 <MX_DAC1_Init>
  MX_CRC_Init();
 8003600:	f000 fbaa 	bl	8003d58 <MX_CRC_Init>
  MX_LPTIM1_Init();
 8003604:	f000 fc0c 	bl	8003e20 <MX_LPTIM1_Init>
  MX_TIM16_Init();
 8003608:	f000 fc3a 	bl	8003e80 <MX_TIM16_Init>
  //bflash_print_last_entry();
	//bflash_entry entr;
	//bflash_read_entry(bflash_active_read_address, &entr);
	//bflash_print_entry(entr);
  //HAL_TIM_Base_Start_IT(&htim17);
  HAL_ADCEx_Calibration_Start(&hadc1);
 800360c:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <main+0x118>)
 800360e:	0018      	movs	r0, r3
 8003610:	f002 fed4 	bl	80063bc <HAL_ADCEx_Calibration_Start>

  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 8003614:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <main+0x11c>)
 8003616:	2100      	movs	r1, #0
 8003618:	0018      	movs	r0, r3
 800361a:	f003 f999 	bl	8006950 <HAL_DAC_Start>
  dacadresse=(DAC1_BASE+0x08);
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <main+0x120>)
 8003620:	4a36      	ldr	r2, [pc, #216]	; (80036fc <main+0x124>)
 8003622:	601a      	str	r2, [r3, #0]
  //HAL_TIM_OC_Start_IT(&htim14, TIM_CHANNEL_1);  //misst Anzeit
  //HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_1);  //misst Pausenzeit
  //TIM15->CCR1=pulselengthmax*100/dutymax;   // maximale Pausenzeit setzten
 // TIM14->CCR1=pulselengthmax;
 // HAL_TIM_OC_Start_IT(&htim16, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim16);
 8003624:	4b36      	ldr	r3, [pc, #216]	; (8003700 <main+0x128>)
 8003626:	0018      	movs	r0, r3
 8003628:	f005 fd28 	bl	800907c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  //dac_value=2500;
  //GPIOC->BRR = (uint32_t)GPIO_PIN_6;
  //HAL_TIM_Base_Start_IT(&htim15);

 HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800362c:	2007      	movs	r0, #7
 800362e:	f003 f87c 	bl	800672a <HAL_NVIC_EnableIRQ>
  //HAL_NVIC_EnableIRQ(EXTI0_1_IRQn); //Enable EXTI Interrupt
 // HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn); //Enable ADC DMA Interrupt
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_ringbuffer,ADC_channels*Ringbuffer_Size);
 8003632:	2396      	movs	r3, #150	; 0x96
 8003634:	00da      	lsls	r2, r3, #3
 8003636:	4933      	ldr	r1, [pc, #204]	; (8003704 <main+0x12c>)
 8003638:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <main+0x118>)
 800363a:	0018      	movs	r0, r3
 800363c:	f002 f882 	bl	8005744 <HAL_ADC_Start_DMA>

//  HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
  HAL_UART_Receive_IT(&huart3, befehl, 1);
 8003640:	4931      	ldr	r1, [pc, #196]	; (8003708 <main+0x130>)
 8003642:	4b32      	ldr	r3, [pc, #200]	; (800370c <main+0x134>)
 8003644:	2201      	movs	r2, #1
 8003646:	0018      	movs	r0, r3
 8003648:	f006 fbde 	bl	8009e08 <HAL_UART_Receive_IT>

	bfmin_init();
 800364c:	f7ff fd30 	bl	80030b0 <bfmin_init>
//	//bfmin_print_lifetime();
//	bfmin_read_parameter(2, &m_pointer);
//	sdmin=(uint32_t)m_pointer;
//	bfmin_read_parameter(3, &m_pointer);
//	m=(float)m_pointer/4096;
	bfmin_read_parameter(5,&m_pointer);
 8003650:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <main+0x138>)
 8003652:	0019      	movs	r1, r3
 8003654:	2005      	movs	r0, #5
 8003656:	f7ff febf 	bl	80033d8 <bfmin_read_parameter>
	printversion=(uint16_t)m_pointer;
 800365a:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <main+0x138>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	b293      	uxth	r3, r2
 8003662:	001c      	movs	r4, r3
 8003664:	2300      	movs	r3, #0
 8003666:	001d      	movs	r5, r3
 8003668:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <main+0x13c>)
 800366a:	601c      	str	r4, [r3, #0]
 800366c:	605d      	str	r5, [r3, #4]
	bfmin_read_parameter(6,&m_pointer);
 800366e:	4b28      	ldr	r3, [pc, #160]	; (8003710 <main+0x138>)
 8003670:	0019      	movs	r1, r3
 8003672:	2006      	movs	r0, #6
 8003674:	f7ff feb0 	bl	80033d8 <bfmin_read_parameter>
	life_flash=(int16_t)m_pointer;
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <main+0x138>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	b212      	sxth	r2, r2
 8003680:	4b25      	ldr	r3, [pc, #148]	; (8003718 <main+0x140>)
 8003682:	801a      	strh	r2, [r3, #0]

	bfmin_read_parameter(7,&m_pointer);//setting the pointer to index 7 from flash memory
 8003684:	4b22      	ldr	r3, [pc, #136]	; (8003710 <main+0x138>)
 8003686:	0019      	movs	r1, r3
 8003688:	2007      	movs	r0, #7
 800368a:	f7ff fea5 	bl	80033d8 <bfmin_read_parameter>
	serial_flash=(uint16_t)m_pointer;// assigning that index value to serial_flash(int)
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <main+0x138>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	b292      	uxth	r2, r2
 8003696:	4b21      	ldr	r3, [pc, #132]	; (800371c <main+0x144>)
 8003698:	801a      	strh	r2, [r3, #0]
	//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
  //HAL_ADC_Start_DMA(&hadc1, pData, Length);
//  uint32_t v=0;
  //calculateinterpol();
  //if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11))
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800369a:	4b21      	ldr	r3, [pc, #132]	; (8003720 <main+0x148>)
 800369c:	2201      	movs	r2, #1
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	0018      	movs	r0, r3
 80036a2:	f004 f99c 	bl	80079de <HAL_GPIO_WritePin>
	  //TIM1->CCR1=(uint32_t)v++;
	  //if(v>10)
		//  v=0;
		//sprintf(str,"ADC4 %" PRIu16 "\n\r", ADC_ringbuffer[4])
		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1 , DAC_ALIGN_12B_R, dac_value);
		if(adc_ready==1){
 80036a6:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <main+0x14c>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d1fa      	bne.n	80036a6 <main+0xce>
			adc_ready=0;
 80036b0:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <main+0x14c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
			//mydelay=__HAL_TIM_GET_COUNTER(&htim14);
			ADC_mean[0]=0;
 80036b6:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <main+0x150>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
			ADC_mean[1]=0;
 80036bc:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <main+0x150>)
 80036be:	2200      	movs	r2, #0
 80036c0:	605a      	str	r2, [r3, #4]
			ADC_mean[2]=0;
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <main+0x150>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
			ADC_mean[3]=0;
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <main+0x150>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
			ADC_mean[4]=0;
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <main+0x150>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	611a      	str	r2, [r3, #16]
			ADC_mean[5]=0;
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <main+0x150>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	615a      	str	r2, [r3, #20]

			//ADC_mean[5]=0;
			ADC_count=0;
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <main+0x154>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
			for(int i=0;i<Ringbuffer_Size;i++){
 80036e0:	2300      	movs	r3, #0
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	e089      	b.n	80037fa <main+0x222>
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	20001858 	.word	0x20001858
 80036ec:	00000834 	.word	0x00000834
 80036f0:	200002f8 	.word	0x200002f8
 80036f4:	200003dc 	.word	0x200003dc
 80036f8:	200018a4 	.word	0x200018a4
 80036fc:	40007408 	.word	0x40007408
 8003700:	20000428 	.word	0x20000428
 8003704:	20000564 	.word	0x20000564
 8003708:	20001884 	.word	0x20001884
 800370c:	20000474 	.word	0x20000474
 8003710:	20001860 	.word	0x20001860
 8003714:	200000e0 	.word	0x200000e0
 8003718:	200000d6 	.word	0x200000d6
 800371c:	20001880 	.word	0x20001880
 8003720:	50000800 	.word	0x50000800
 8003724:	2000186b 	.word	0x2000186b
 8003728:	20001828 	.word	0x20001828
 800372c:	20001824 	.word	0x20001824
				if((ADC_ringbuffer[7+i*8]>1000)&(ADC_ringbuffer[i*8]>1000)){
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1dda      	adds	r2, r3, #7
 8003736:	4bcd      	ldr	r3, [pc, #820]	; (8003a6c <main+0x494>)
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	58d3      	ldr	r3, [r2, r3]
 800373c:	22fa      	movs	r2, #250	; 0xfa
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	419b      	sbcs	r3, r3
 8003744:	425b      	negs	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	00d1      	lsls	r1, r2, #3
 800374c:	4ac7      	ldr	r2, [pc, #796]	; (8003a6c <main+0x494>)
 800374e:	0089      	lsls	r1, r1, #2
 8003750:	588a      	ldr	r2, [r1, r2]
 8003752:	21fa      	movs	r1, #250	; 0xfa
 8003754:	0089      	lsls	r1, r1, #2
 8003756:	4291      	cmp	r1, r2
 8003758:	4192      	sbcs	r2, r2
 800375a:	4252      	negs	r2, r2
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	4013      	ands	r3, r2
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d025      	beq.n	80037b2 <main+0x1da>
					ADC_mean[1]+=ADC_ringbuffer[2+8*i];
 8003766:	4bc2      	ldr	r3, [pc, #776]	; (8003a70 <main+0x498>)
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	1c99      	adds	r1, r3, #2
 8003770:	4bbe      	ldr	r3, [pc, #760]	; (8003a6c <main+0x494>)
 8003772:	0089      	lsls	r1, r1, #2
 8003774:	58cb      	ldr	r3, [r1, r3]
 8003776:	18d2      	adds	r2, r2, r3
 8003778:	4bbd      	ldr	r3, [pc, #756]	; (8003a70 <main+0x498>)
 800377a:	605a      	str	r2, [r3, #4]
					ADC_mean[2]+=ADC_ringbuffer[3+8*i];
 800377c:	4bbc      	ldr	r3, [pc, #752]	; (8003a70 <main+0x498>)
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	1cd9      	adds	r1, r3, #3
 8003786:	4bb9      	ldr	r3, [pc, #740]	; (8003a6c <main+0x494>)
 8003788:	0089      	lsls	r1, r1, #2
 800378a:	58cb      	ldr	r3, [r1, r3]
 800378c:	18d2      	adds	r2, r2, r3
 800378e:	4bb8      	ldr	r3, [pc, #736]	; (8003a70 <main+0x498>)
 8003790:	609a      	str	r2, [r3, #8]
					ADC_mean[3]+=ADC_ringbuffer[4+8*i];  //PD
 8003792:	4bb7      	ldr	r3, [pc, #732]	; (8003a70 <main+0x498>)
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	1d19      	adds	r1, r3, #4
 800379c:	4bb3      	ldr	r3, [pc, #716]	; (8003a6c <main+0x494>)
 800379e:	0089      	lsls	r1, r1, #2
 80037a0:	58cb      	ldr	r3, [r1, r3]
 80037a2:	18d2      	adds	r2, r2, r3
 80037a4:	4bb2      	ldr	r3, [pc, #712]	; (8003a70 <main+0x498>)
 80037a6:	60da      	str	r2, [r3, #12]
			//		life=lifetime((float)ADC_mean[3],(float)ADC_mean[0]);
//					if(print==1){
//						len = sprintf(str,"i=%d;%d;%d;%d;%d;%d;%d \r\n",i,ADC_ringbuffer[i],ADC_ringbuffer[i+1],ADC_ringbuffer[i+2],ADC_ringbuffer[i+3],ADC_ringbuffer[i+4],ADC_ringbuffer[i+5]);
						//HAL_UART_Transmit_DMA(&huart3, str, len);
//					}
					ADC_count++;
 80037a8:	4bb2      	ldr	r3, [pc, #712]	; (8003a74 <main+0x49c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	4bb1      	ldr	r3, [pc, #708]	; (8003a74 <main+0x49c>)
 80037b0:	601a      	str	r2, [r3, #0]
				}
				ADC_mean[0]+=ADC_ringbuffer[1+8*i];  //temp
 80037b2:	4baf      	ldr	r3, [pc, #700]	; (8003a70 <main+0x498>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	4bab      	ldr	r3, [pc, #684]	; (8003a6c <main+0x494>)
 80037be:	0089      	lsls	r1, r1, #2
 80037c0:	58cb      	ldr	r3, [r1, r3]
 80037c2:	18d2      	adds	r2, r2, r3
 80037c4:	4baa      	ldr	r3, [pc, #680]	; (8003a70 <main+0x498>)
 80037c6:	601a      	str	r2, [r3, #0]
				ADC_mean[4]+=ADC_ringbuffer[5+8*i];  //mod
 80037c8:	4ba9      	ldr	r3, [pc, #676]	; (8003a70 <main+0x498>)
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	1d59      	adds	r1, r3, #5
 80037d2:	4ba6      	ldr	r3, [pc, #664]	; (8003a6c <main+0x494>)
 80037d4:	0089      	lsls	r1, r1, #2
 80037d6:	58cb      	ldr	r3, [r1, r3]
 80037d8:	18d2      	adds	r2, r2, r3
 80037da:	4ba5      	ldr	r3, [pc, #660]	; (8003a70 <main+0x498>)
 80037dc:	611a      	str	r2, [r3, #16]
				ADC_mean[5]+=ADC_ringbuffer[6+8*i];
 80037de:	4ba4      	ldr	r3, [pc, #656]	; (8003a70 <main+0x498>)
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	1d99      	adds	r1, r3, #6
 80037e8:	4ba0      	ldr	r3, [pc, #640]	; (8003a6c <main+0x494>)
 80037ea:	0089      	lsls	r1, r1, #2
 80037ec:	58cb      	ldr	r3, [r1, r3]
 80037ee:	18d2      	adds	r2, r2, r3
 80037f0:	4b9f      	ldr	r3, [pc, #636]	; (8003a70 <main+0x498>)
 80037f2:	615a      	str	r2, [r3, #20]
			for(int i=0;i<Ringbuffer_Size;i++){
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3301      	adds	r3, #1
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b95      	cmp	r3, #149	; 0x95
 80037fe:	dd97      	ble.n	8003730 <main+0x158>
			}
			//for(int i=0;i<Ringbuffer_Size*ADC_channels;i++){
			//	ADC_ringbuffer[i]=0;
			//}
			//ADC_mean[0]=ADC_mean[0]*u_ref/4095/Ringbuffer_Size;
			temp=readThermistor((uint16_t)(ADC_mean[0]*u_ref/4095/Ringbuffer_Size));  //temp NTC 10K
 8003800:	4b9b      	ldr	r3, [pc, #620]	; (8003a70 <main+0x498>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a9c      	ldr	r2, [pc, #624]	; (8003a78 <main+0x4a0>)
 8003806:	8812      	ldrh	r2, [r2, #0]
 8003808:	4353      	muls	r3, r2
 800380a:	499c      	ldr	r1, [pc, #624]	; (8003a7c <main+0x4a4>)
 800380c:	0018      	movs	r0, r3
 800380e:	f7fc fc85 	bl	800011c <__udivsi3>
 8003812:	0003      	movs	r3, r0
 8003814:	b29b      	uxth	r3, r3
 8003816:	0018      	movs	r0, r3
 8003818:	f000 ffa0 	bl	800475c <readThermistor>
 800381c:	0003      	movs	r3, r0
 800381e:	001a      	movs	r2, r3
 8003820:	4b97      	ldr	r3, [pc, #604]	; (8003a80 <main+0x4a8>)
 8003822:	801a      	strh	r2, [r3, #0]
			ADC_mean[4]=ADC_mean[4]*u_ref/4095/Ringbuffer_Size; //Mod in D, alt:PD
 8003824:	4b92      	ldr	r3, [pc, #584]	; (8003a70 <main+0x498>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	4a93      	ldr	r2, [pc, #588]	; (8003a78 <main+0x4a0>)
 800382a:	8812      	ldrh	r2, [r2, #0]
 800382c:	4353      	muls	r3, r2
 800382e:	4993      	ldr	r1, [pc, #588]	; (8003a7c <main+0x4a4>)
 8003830:	0018      	movs	r0, r3
 8003832:	f7fc fc73 	bl	800011c <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	001a      	movs	r2, r3
 800383a:	4b8d      	ldr	r3, [pc, #564]	; (8003a70 <main+0x498>)
 800383c:	611a      	str	r2, [r3, #16]
			ADC_mean[5]=ADC_mean[5]*u_ref/4095/Ringbuffer_Size; //I_Tec
 800383e:	4b8c      	ldr	r3, [pc, #560]	; (8003a70 <main+0x498>)
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	4a8d      	ldr	r2, [pc, #564]	; (8003a78 <main+0x4a0>)
 8003844:	8812      	ldrh	r2, [r2, #0]
 8003846:	4353      	muls	r3, r2
 8003848:	498c      	ldr	r1, [pc, #560]	; (8003a7c <main+0x4a4>)
 800384a:	0018      	movs	r0, r3
 800384c:	f7fc fc66 	bl	800011c <__udivsi3>
 8003850:	0003      	movs	r3, r0
 8003852:	001a      	movs	r2, r3
 8003854:	4b86      	ldr	r3, [pc, #536]	; (8003a70 <main+0x498>)
 8003856:	615a      	str	r2, [r3, #20]
			if(ADC_count>10){
 8003858:	4b86      	ldr	r3, [pc, #536]	; (8003a74 <main+0x49c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b0a      	cmp	r3, #10
 800385e:	d93e      	bls.n	80038de <main+0x306>
				//ADC_mean[0]=ADC_mean[0]*u_ref/4095/ADC_count-600;  //temp LM61

				ADC_mean[1]=ADC_mean[1]*u_ref/4095/ADC_count; //UCollektor, alt: mod in
 8003860:	4b83      	ldr	r3, [pc, #524]	; (8003a70 <main+0x498>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a84      	ldr	r2, [pc, #528]	; (8003a78 <main+0x4a0>)
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	4353      	muls	r3, r2
 800386a:	4986      	ldr	r1, [pc, #536]	; (8003a84 <main+0x4ac>)
 800386c:	0018      	movs	r0, r3
 800386e:	f7fc fc55 	bl	800011c <__udivsi3>
 8003872:	0003      	movs	r3, r0
 8003874:	001a      	movs	r2, r3
 8003876:	4b7f      	ldr	r3, [pc, #508]	; (8003a74 <main+0x49c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0019      	movs	r1, r3
 800387c:	0010      	movs	r0, r2
 800387e:	f7fc fc4d 	bl	800011c <__udivsi3>
 8003882:	0003      	movs	r3, r0
 8003884:	001a      	movs	r2, r3
 8003886:	4b7a      	ldr	r3, [pc, #488]	; (8003a70 <main+0x498>)
 8003888:	605a      	str	r2, [r3, #4]
				current=ADC_mean[2]*u_ref/4095/ADC_count;  //I, alt:U collector
 800388a:	4b79      	ldr	r3, [pc, #484]	; (8003a70 <main+0x498>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4a7a      	ldr	r2, [pc, #488]	; (8003a78 <main+0x4a0>)
 8003890:	8812      	ldrh	r2, [r2, #0]
 8003892:	4353      	muls	r3, r2
 8003894:	497b      	ldr	r1, [pc, #492]	; (8003a84 <main+0x4ac>)
 8003896:	0018      	movs	r0, r3
 8003898:	f7fc fc40 	bl	800011c <__udivsi3>
 800389c:	0003      	movs	r3, r0
 800389e:	001a      	movs	r2, r3
 80038a0:	4b74      	ldr	r3, [pc, #464]	; (8003a74 <main+0x49c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0019      	movs	r1, r3
 80038a6:	0010      	movs	r0, r2
 80038a8:	f7fc fc38 	bl	800011c <__udivsi3>
 80038ac:	0003      	movs	r3, r0
 80038ae:	001a      	movs	r2, r3
 80038b0:	4b75      	ldr	r3, [pc, #468]	; (8003a88 <main+0x4b0>)
 80038b2:	601a      	str	r2, [r3, #0]
				pdsig=ADC_mean[3]*u_ref/4095/ADC_count; //PD, alt: I Laserdiode
 80038b4:	4b6e      	ldr	r3, [pc, #440]	; (8003a70 <main+0x498>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a6f      	ldr	r2, [pc, #444]	; (8003a78 <main+0x4a0>)
 80038ba:	8812      	ldrh	r2, [r2, #0]
 80038bc:	4353      	muls	r3, r2
 80038be:	4971      	ldr	r1, [pc, #452]	; (8003a84 <main+0x4ac>)
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7fc fc2b 	bl	800011c <__udivsi3>
 80038c6:	0003      	movs	r3, r0
 80038c8:	001a      	movs	r2, r3
 80038ca:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <main+0x49c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	0019      	movs	r1, r3
 80038d0:	0010      	movs	r0, r2
 80038d2:	f7fc fc23 	bl	800011c <__udivsi3>
 80038d6:	0003      	movs	r3, r0
 80038d8:	b29a      	uxth	r2, r3
 80038da:	4b6c      	ldr	r3, [pc, #432]	; (8003a8c <main+0x4b4>)
 80038dc:	801a      	strh	r2, [r3, #0]

			}
			//temp=ADC_mean[0];
			pd=(float)pdsig;
 80038de:	4b6b      	ldr	r3, [pc, #428]	; (8003a8c <main+0x4b4>)
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fd fce8 	bl	80012b8 <__aeabi_ui2f>
 80038e8:	1c02      	adds	r2, r0, #0
 80038ea:	4b69      	ldr	r3, [pc, #420]	; (8003a90 <main+0x4b8>)
 80038ec:	601a      	str	r2, [r3, #0]
			//current=ADC_mean[2]/3.6;
			teccurrent=ADC_mean[5]*2;
 80038ee:	4b60      	ldr	r3, [pc, #384]	; (8003a70 <main+0x498>)
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	005a      	lsls	r2, r3, #1
 80038f4:	4b67      	ldr	r3, [pc, #412]	; (8003a94 <main+0x4bc>)
 80038f6:	601a      	str	r2, [r3, #0]

			if(temp>4500)
 80038f8:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <main+0x4a8>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	5e9b      	ldrsh	r3, [r3, r2]
 80038fe:	4a66      	ldr	r2, [pc, #408]	; (8003a98 <main+0x4c0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	dd02      	ble.n	800390a <main+0x332>
				overtemp=1;
 8003904:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <main+0x4c4>)
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]
			if(temp<4000)
 800390a:	4b5d      	ldr	r3, [pc, #372]	; (8003a80 <main+0x4a8>)
 800390c:	2200      	movs	r2, #0
 800390e:	5e9a      	ldrsh	r2, [r3, r2]
 8003910:	23fa      	movs	r3, #250	; 0xfa
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	429a      	cmp	r2, r3
 8003916:	da02      	bge.n	800391e <main+0x346>
				overtemp=0;
 8003918:	4b60      	ldr	r3, [pc, #384]	; (8003a9c <main+0x4c4>)
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800391e:	b672      	cpsid	i
}
 8003920:	46c0      	nop			; (mov r8, r8)
			__disable_irq();
			if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)==GPIO_PIN_SET)&(ADC_count>10)){
 8003922:	4b5f      	ldr	r3, [pc, #380]	; (8003aa0 <main+0x4c8>)
 8003924:	2140      	movs	r1, #64	; 0x40
 8003926:	0018      	movs	r0, r3
 8003928:	f004 f83c 	bl	80079a4 <HAL_GPIO_ReadPin>
 800392c:	0003      	movs	r3, r0
 800392e:	3b01      	subs	r3, #1
 8003930:	425a      	negs	r2, r3
 8003932:	4153      	adcs	r3, r2
 8003934:	b2da      	uxtb	r2, r3
 8003936:	4b4f      	ldr	r3, [pc, #316]	; (8003a74 <main+0x49c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	210a      	movs	r1, #10
 800393c:	4299      	cmp	r1, r3
 800393e:	419b      	sbcs	r3, r3
 8003940:	425b      	negs	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4013      	ands	r3, r2
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d041      	beq.n	80039d0 <main+0x3f8>
					dac_value++;
				if(pdsig>(pdset))
					dac_value--;
			}
	        if (laser==3){
				if(pdsig<(pdset))
 800394c:	4b4f      	ldr	r3, [pc, #316]	; (8003a8c <main+0x4b4>)
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	4b54      	ldr	r3, [pc, #336]	; (8003aa4 <main+0x4cc>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d205      	bcs.n	8003964 <main+0x38c>
					dac_value--;
 8003958:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <main+0x4d0>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <main+0x4d0>)
 8003962:	801a      	strh	r2, [r3, #0]
				if(pdsig>(pdset))
 8003964:	4b49      	ldr	r3, [pc, #292]	; (8003a8c <main+0x4b4>)
 8003966:	881a      	ldrh	r2, [r3, #0]
 8003968:	4b4e      	ldr	r3, [pc, #312]	; (8003aa4 <main+0x4cc>)
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d905      	bls.n	800397c <main+0x3a4>
					dac_value++;
 8003970:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <main+0x4d0>)
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	4b4b      	ldr	r3, [pc, #300]	; (8003aa8 <main+0x4d0>)
 800397a:	801a      	strh	r2, [r3, #0]
			}
				//----------------------------
				//dac_value=2650;
				if(dac_value>4000)
 800397c:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <main+0x4d0>)
 800397e:	881a      	ldrh	r2, [r3, #0]
 8003980:	23fa      	movs	r3, #250	; 0xfa
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	429a      	cmp	r2, r3
 8003986:	d903      	bls.n	8003990 <main+0x3b8>
						dac_value=4000;
 8003988:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <main+0x4d0>)
 800398a:	22fa      	movs	r2, #250	; 0xfa
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	801a      	strh	r2, [r3, #0]
				if(dac_value<1)
 8003990:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <main+0x4d0>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <main+0x3c6>
						dac_value=1;
 8003998:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <main+0x4d0>)
 800399a:	2201      	movs	r2, #1
 800399c:	801a      	strh	r2, [r3, #0]
				if(overtemp){
 800399e:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <main+0x4c4>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <main+0x3e2>
					dac_value=0;
 80039a6:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <main+0x4d0>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	801a      	strh	r2, [r3, #0]
					//__disable_irq();
					HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1 , DAC_ALIGN_12B_R, (uint32_t)dac_value);
 80039ac:	4b3e      	ldr	r3, [pc, #248]	; (8003aa8 <main+0x4d0>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	483e      	ldr	r0, [pc, #248]	; (8003aac <main+0x4d4>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	2100      	movs	r1, #0
 80039b6:	f003 f885 	bl	8006ac4 <HAL_DAC_SetValue>
					//__enable_irq();
				}
				//__disable_irq();
				ampli=dac_value;
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <main+0x4d0>)
 80039bc:	881a      	ldrh	r2, [r3, #0]
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <main+0x4d8>)
 80039c0:	801a      	strh	r2, [r3, #0]
				//*(uint32_t*)(dacadresse)=(uint32_t)ampli;
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1 , DAC_ALIGN_12B_R, (uint32_t)dac_value);
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <main+0x4d0>)
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	4839      	ldr	r0, [pc, #228]	; (8003aac <main+0x4d4>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	2100      	movs	r1, #0
 80039cc:	f003 f87a 	bl	8006ac4 <HAL_DAC_SetValue>
  __ASM volatile ("cpsie i" : : : "memory");
 80039d0:	b662      	cpsie	i
}
 80039d2:	46c0      	nop			; (mov r8, r8)
			//if(tecvalue>100)
			//	tecvalue=100;

//			TIM1->CCR3=(uint32_t)tecvalue;

			if(print==1){
 80039d4:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <main+0x4dc>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d13e      	bne.n	8003a5a <main+0x482>
				print=0;
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <main+0x4dc>)
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
				if((dac_value>dac_min)&(ADC_count>10)){
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <main+0x4d0>)
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	4a34      	ldr	r2, [pc, #208]	; (8003ab8 <main+0x4e0>)
 80039e8:	8812      	ldrh	r2, [r2, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	419b      	sbcs	r3, r3
 80039ee:	425b      	negs	r3, r3
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <main+0x49c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	210a      	movs	r1, #10
 80039f8:	4299      	cmp	r1, r3
 80039fa:	419b      	sbcs	r3, r3
 80039fc:	425b      	negs	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	4013      	ands	r3, r2
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d028      	beq.n	8003a5a <main+0x482>
					life=lifetime((float)current,(float)temp);
 8003a08:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <main+0x4b0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7fd fc53 	bl	80012b8 <__aeabi_ui2f>
 8003a12:	1c04      	adds	r4, r0, #0
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <main+0x4a8>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	5e9b      	ldrsh	r3, [r3, r2]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fd fbfe 	bl	800121c <__aeabi_i2f>
 8003a20:	1c03      	adds	r3, r0, #0
 8003a22:	1c19      	adds	r1, r3, #0
 8003a24:	1c20      	adds	r0, r4, #0
 8003a26:	f000 ff43 	bl	80048b0 <lifetime>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	4b23      	ldr	r3, [pc, #140]	; (8003abc <main+0x4e4>)
 8003a30:	801a      	strh	r2, [r3, #0]
					life_mean=life_mean+life/100;
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <main+0x4e4>)
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	2164      	movs	r1, #100	; 0x64
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fc fb6f 	bl	800011c <__udivsi3>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <main+0x4e8>)
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	18d3      	adds	r3, r2, r3
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <main+0x4e8>)
 8003a4c:	801a      	strh	r2, [r3, #0]
					life_count++;
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <main+0x4ec>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <main+0x4ec>)
 8003a58:	801a      	strh	r2, [r3, #0]
				}
			}

				//__HAL_TIM_SetCounter(&htim14,0);
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_ringbuffer,ADC_channels*Ringbuffer_Size);
 8003a5a:	2396      	movs	r3, #150	; 0x96
 8003a5c:	00da      	lsls	r2, r3, #3
 8003a5e:	4903      	ldr	r1, [pc, #12]	; (8003a6c <main+0x494>)
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <main+0x4f0>)
 8003a62:	0018      	movs	r0, r3
 8003a64:	f001 fe6e 	bl	8005744 <HAL_ADC_Start_DMA>
		if(adc_ready==1){
 8003a68:	e61d      	b.n	80036a6 <main+0xce>
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	20000564 	.word	0x20000564
 8003a70:	20001828 	.word	0x20001828
 8003a74:	20001824 	.word	0x20001824
 8003a78:	200000cc 	.word	0x200000cc
 8003a7c:	00095f6a 	.word	0x00095f6a
 8003a80:	2000184c 	.word	0x2000184c
 8003a84:	00000fff 	.word	0x00000fff
 8003a88:	20001850 	.word	0x20001850
 8003a8c:	20001874 	.word	0x20001874
 8003a90:	20001848 	.word	0x20001848
 8003a94:	20001854 	.word	0x20001854
 8003a98:	00001194 	.word	0x00001194
 8003a9c:	2000186a 	.word	0x2000186a
 8003aa0:	50000800 	.word	0x50000800
 8003aa4:	20001858 	.word	0x20001858
 8003aa8:	200000d0 	.word	0x200000d0
 8003aac:	200003dc 	.word	0x200003dc
 8003ab0:	200000d2 	.word	0x200000d2
 8003ab4:	20001872 	.word	0x20001872
 8003ab8:	200000dc 	.word	0x200000dc
 8003abc:	2000186e 	.word	0x2000186e
 8003ac0:	200000d4 	.word	0x200000d4
 8003ac4:	20001870 	.word	0x20001870
 8003ac8:	200002f8 	.word	0x200002f8

08003acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b093      	sub	sp, #76	; 0x4c
 8003ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ad2:	2410      	movs	r4, #16
 8003ad4:	193b      	adds	r3, r7, r4
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	2338      	movs	r3, #56	; 0x38
 8003ada:	001a      	movs	r2, r3
 8003adc:	2100      	movs	r1, #0
 8003ade:	f008 f9a9 	bl	800be34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ae2:	003b      	movs	r3, r7
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	2310      	movs	r3, #16
 8003ae8:	001a      	movs	r2, r3
 8003aea:	2100      	movs	r1, #0
 8003aec:	f008 f9a2 	bl	800be34 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	0018      	movs	r0, r3
 8003af6:	f004 fb7b 	bl	80081f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003afa:	193b      	adds	r3, r7, r4
 8003afc:	220a      	movs	r2, #10
 8003afe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b00:	193b      	adds	r3, r7, r4
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	0052      	lsls	r2, r2, #1
 8003b06:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003b08:	0021      	movs	r1, r4
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	2240      	movs	r2, #64	; 0x40
 8003b14:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	2201      	movs	r2, #1
 8003b1a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	2202      	movs	r2, #2
 8003b20:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	2202      	movs	r2, #2
 8003b26:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003b2e:	187b      	adds	r3, r7, r1
 8003b30:	2208      	movs	r2, #8
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	2280      	movs	r2, #128	; 0x80
 8003b38:	0292      	lsls	r2, r2, #10
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	0492      	lsls	r2, r2, #18
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	2280      	movs	r2, #128	; 0x80
 8003b48:	0592      	lsls	r2, r2, #22
 8003b4a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f004 fbc0 	bl	80082d4 <HAL_RCC_OscConfig>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d001      	beq.n	8003b5c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003b58:	f000 fefe 	bl	8004958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b5c:	003b      	movs	r3, r7
 8003b5e:	2207      	movs	r2, #7
 8003b60:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b62:	003b      	movs	r3, r7
 8003b64:	2202      	movs	r2, #2
 8003b66:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b68:	003b      	movs	r3, r7
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b6e:	003b      	movs	r3, r7
 8003b70:	2200      	movs	r2, #0
 8003b72:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b74:	003b      	movs	r3, r7
 8003b76:	2102      	movs	r1, #2
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f004 fec5 	bl	8008908 <HAL_RCC_ClockConfig>
 8003b7e:	1e03      	subs	r3, r0, #0
 8003b80:	d001      	beq.n	8003b86 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8003b82:	f000 fee9 	bl	8004958 <Error_Handler>
  }
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b013      	add	sp, #76	; 0x4c
 8003b8c:	bd90      	pop	{r4, r7, pc}
	...

08003b90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	0018      	movs	r0, r3
 8003b9a:	230c      	movs	r3, #12
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f008 f948 	bl	800be34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003ba4:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003ba6:	4a65      	ldr	r2, [pc, #404]	; (8003d3c <MX_ADC1_Init+0x1ac>)
 8003ba8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003baa:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	05d2      	lsls	r2, r2, #23
 8003bb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003bb2:	4b61      	ldr	r3, [pc, #388]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bb8:	4b5f      	ldr	r3, [pc, #380]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003bbe:	4b5e      	ldr	r3, [pc, #376]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	0392      	lsls	r2, r2, #14
 8003bc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bc8:	2208      	movs	r2, #8
 8003bca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003bcc:	4b5a      	ldr	r3, [pc, #360]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003bd2:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003bd8:	4b57      	ldr	r3, [pc, #348]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 8003bde:	4b56      	ldr	r3, [pc, #344]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003be0:	2208      	movs	r2, #8
 8003be2:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003be4:	4b54      	ldr	r3, [pc, #336]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bea:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003bf0:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bf2:	222c      	movs	r2, #44	; 0x2c
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003bf8:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003bfa:	2280      	movs	r2, #128	; 0x80
 8003bfc:	0152      	lsls	r2, r2, #5
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8003c00:	4b4d      	ldr	r3, [pc, #308]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003c02:	2204      	movs	r2, #4
 8003c04:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 8003c06:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003c08:	2204      	movs	r2, #4
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003c0c:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003c0e:	223c      	movs	r2, #60	; 0x3c
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003c14:	4b48      	ldr	r3, [pc, #288]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f001 fbe9 	bl	80053f4 <HAL_ADC_Init>
 8003c22:	1e03      	subs	r3, r0, #0
 8003c24:	d001      	beq.n	8003c2a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8003c26:	f000 fe97 	bl	8004958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	4a44      	ldr	r2, [pc, #272]	; (8003d40 <MX_ADC1_Init+0x1b0>)
 8003c2e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	2200      	movs	r2, #0
 8003c34:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c3c:	1d3a      	adds	r2, r7, #4
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003c40:	0011      	movs	r1, r2
 8003c42:	0018      	movs	r0, r3
 8003c44:	f001 ffae 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8003c48:	1e03      	subs	r3, r0, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8003c4c:	f000 fe84 	bl	8004958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003c50:	1d3b      	adds	r3, r7, #4
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003c56:	1d3b      	adds	r3, r7, #4
 8003c58:	2204      	movs	r2, #4
 8003c5a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c5c:	1d3a      	adds	r2, r7, #4
 8003c5e:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003c60:	0011      	movs	r1, r2
 8003c62:	0018      	movs	r0, r3
 8003c64:	f001 ff9e 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8003c6c:	f000 fe74 	bl	8004958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	4a34      	ldr	r2, [pc, #208]	; (8003d44 <MX_ADC1_Init+0x1b4>)
 8003c74:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	2208      	movs	r2, #8
 8003c7a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c7c:	1d3a      	adds	r2, r7, #4
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003c80:	0011      	movs	r1, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f001 ff8e 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8003c88:	1e03      	subs	r3, r0, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003c8c:	f000 fe64 	bl	8004958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	4a2d      	ldr	r2, [pc, #180]	; (8003d48 <MX_ADC1_Init+0x1b8>)
 8003c94:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	220c      	movs	r2, #12
 8003c9a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c9c:	1d3a      	adds	r2, r7, #4
 8003c9e:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003ca0:	0011      	movs	r1, r2
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f001 ff7e 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8003ca8:	1e03      	subs	r3, r0, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8003cac:	f000 fe54 	bl	8004958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003cb0:	1d3b      	adds	r3, r7, #4
 8003cb2:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <MX_ADC1_Init+0x1bc>)
 8003cb4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	2210      	movs	r2, #16
 8003cba:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cbc:	1d3a      	adds	r2, r7, #4
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003cc0:	0011      	movs	r1, r2
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f001 ff6e 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8003ccc:	f000 fe44 	bl	8004958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <MX_ADC1_Init+0x1c0>)
 8003cd4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	2214      	movs	r2, #20
 8003cda:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cdc:	1d3a      	adds	r2, r7, #4
 8003cde:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003ce0:	0011      	movs	r1, r2
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f001 ff5e 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8003ce8:	1e03      	subs	r3, r0, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8003cec:	f000 fe34 	bl	8004958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <MX_ADC1_Init+0x1c4>)
 8003cf4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	2218      	movs	r2, #24
 8003cfa:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cfc:	1d3a      	adds	r2, r7, #4
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003d00:	0011      	movs	r1, r2
 8003d02:	0018      	movs	r0, r3
 8003d04:	f001 ff4e 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8003d08:	1e03      	subs	r3, r0, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8003d0c:	f000 fe24 	bl	8004958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <MX_ADC1_Init+0x1b0>)
 8003d14:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	221c      	movs	r2, #28
 8003d1a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d1c:	1d3a      	adds	r2, r7, #4
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_ADC1_Init+0x1a8>)
 8003d20:	0011      	movs	r1, r2
 8003d22:	0018      	movs	r0, r3
 8003d24:	f001 ff3e 	bl	8005ba4 <HAL_ADC_ConfigChannel>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_ADC1_Init+0x1a0>
  {
    Error_Handler();
 8003d2c:	f000 fe14 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	200002f8 	.word	0x200002f8
 8003d3c:	40012400 	.word	0x40012400
 8003d40:	04000002 	.word	0x04000002
 8003d44:	08000004 	.word	0x08000004
 8003d48:	0c000008 	.word	0x0c000008
 8003d4c:	18000040 	.word	0x18000040
 8003d50:	20000100 	.word	0x20000100
 8003d54:	28000400 	.word	0x28000400

08003d58 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <MX_CRC_Init+0x40>)
 8003d5e:	4a0f      	ldr	r2, [pc, #60]	; (8003d9c <MX_CRC_Init+0x44>)
 8003d60:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <MX_CRC_Init+0x40>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <MX_CRC_Init+0x40>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <MX_CRC_Init+0x40>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <MX_CRC_Init+0x40>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003d7a:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <MX_CRC_Init+0x40>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <MX_CRC_Init+0x40>)
 8003d82:	0018      	movs	r0, r3
 8003d84:	f002 fcee 	bl	8006764 <HAL_CRC_Init>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003d8c:	f000 fde4 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	200003b8 	.word	0x200003b8
 8003d9c:	40023000 	.word	0x40023000

08003da0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	; 0x28
 8003da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	0018      	movs	r0, r3
 8003daa:	2324      	movs	r3, #36	; 0x24
 8003dac:	001a      	movs	r2, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	f008 f840 	bl	800be34 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003db4:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <MX_DAC1_Init+0x78>)
 8003db6:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <MX_DAC1_Init+0x7c>)
 8003db8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003dba:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <MX_DAC1_Init+0x78>)
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f002 fda4 	bl	800690a <HAL_DAC_Init>
 8003dc2:	1e03      	subs	r3, r0, #0
 8003dc4:	d001      	beq.n	8003dca <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8003dc6:	f000 fdc7 	bl	8004958 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	2200      	movs	r2, #0
 8003de0:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	2200      	movs	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003de8:	1d39      	adds	r1, r7, #4
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <MX_DAC1_Init+0x78>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	0018      	movs	r0, r3
 8003df0:	f002 fe92 	bl	8006b18 <HAL_DAC_ConfigChannel>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d001      	beq.n	8003dfc <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8003df8:	f000 fdae 	bl	8004958 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003dfc:	1d39      	adds	r1, r7, #4
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <MX_DAC1_Init+0x78>)
 8003e00:	2210      	movs	r2, #16
 8003e02:	0018      	movs	r0, r3
 8003e04:	f002 fe88 	bl	8006b18 <HAL_DAC_ConfigChannel>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 8003e0c:	f000 fda4 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b00a      	add	sp, #40	; 0x28
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200003dc 	.word	0x200003dc
 8003e1c:	40007400 	.word	0x40007400

08003e20 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8003e24:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e26:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <MX_LPTIM1_Init+0x58>)
 8003e28:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8003e30:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e32:	22e0      	movs	r2, #224	; 0xe0
 8003e34:	0112      	lsls	r2, r2, #4
 8003e36:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e3a:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <MX_LPTIM1_Init+0x5c>)
 8003e3c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <MX_LPTIM1_Init+0x54>)
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f003 fe04 	bl	8007a6c <HAL_LPTIM_Init>
 8003e64:	1e03      	subs	r3, r0, #0
 8003e66:	d001      	beq.n	8003e6c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8003e68:	f000 fd76 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	200003f0 	.word	0x200003f0
 8003e78:	40007c00 	.word	0x40007c00
 8003e7c:	0000ffff 	.word	0x0000ffff

08003e80 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b094      	sub	sp, #80	; 0x50
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e86:	2334      	movs	r3, #52	; 0x34
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	231c      	movs	r3, #28
 8003e8e:	001a      	movs	r2, r3
 8003e90:	2100      	movs	r1, #0
 8003e92:	f007 ffcf 	bl	800be34 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e96:	003b      	movs	r3, r7
 8003e98:	0018      	movs	r0, r3
 8003e9a:	2334      	movs	r3, #52	; 0x34
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	f007 ffc8 	bl	800be34 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003ea4:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003ea6:	4a37      	ldr	r2, [pc, #220]	; (8003f84 <MX_TIM16_Init+0x104>)
 8003ea8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000;
 8003eaa:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003eac:	22fa      	movs	r2, #250	; 0xfa
 8003eae:	0212      	lsls	r2, r2, #8
 8003eb0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb2:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003eba:	22fa      	movs	r2, #250	; 0xfa
 8003ebc:	0092      	lsls	r2, r2, #2
 8003ebe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ec6:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f005 f879 	bl	8008fcc <HAL_TIM_Base_Init>
 8003eda:	1e03      	subs	r3, r0, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8003ede:	f000 fd3b 	bl	8004958 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8003ee2:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f005 f925 	bl	8009134 <HAL_TIM_OC_Init>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8003eee:	f000 fd33 	bl	8004958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003ef2:	2134      	movs	r1, #52	; 0x34
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 999;
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	4a22      	ldr	r2, [pc, #136]	; (8003f88 <MX_TIM16_Init+0x108>)
 8003efe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	2200      	movs	r2, #0
 8003f16:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f1e:	1879      	adds	r1, r7, r1
 8003f20:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	0018      	movs	r0, r3
 8003f26:	f005 fa97 	bl	8009458 <HAL_TIM_OC_ConfigChannel>
 8003f2a:	1e03      	subs	r3, r0, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_TIM16_Init+0xb2>
  {
    Error_Handler();
 8003f2e:	f000 fd13 	bl	8004958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f32:	003b      	movs	r3, r7
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f38:	003b      	movs	r3, r7
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f3e:	003b      	movs	r3, r7
 8003f40:	2200      	movs	r2, #0
 8003f42:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f44:	003b      	movs	r3, r7
 8003f46:	2200      	movs	r2, #0
 8003f48:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f4a:	003b      	movs	r3, r7
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f50:	003b      	movs	r3, r7
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	0192      	lsls	r2, r2, #6
 8003f56:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f58:	003b      	movs	r3, r7
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f5e:	003b      	movs	r3, r7
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003f64:	003a      	movs	r2, r7
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <MX_TIM16_Init+0x100>)
 8003f68:	0011      	movs	r1, r2
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f005 fe38 	bl	8009be0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d001      	beq.n	8003f78 <MX_TIM16_Init+0xf8>
  {
    Error_Handler();
 8003f74:	f000 fcf0 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b014      	add	sp, #80	; 0x50
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000428 	.word	0x20000428
 8003f84:	40014400 	.word	0x40014400
 8003f88:	000003e7 	.word	0x000003e7

08003f8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003f90:	4b16      	ldr	r3, [pc, #88]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003f92:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <MX_USART3_UART_Init+0x64>)
 8003f94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003f98:	22e1      	movs	r2, #225	; 0xe1
 8003f9a:	0252      	lsls	r2, r2, #9
 8003f9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003f9e:	4b13      	ldr	r3, [pc, #76]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fb2:	220c      	movs	r2, #12
 8003fb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fc8:	4b08      	ldr	r3, [pc, #32]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <MX_USART3_UART_Init+0x60>)
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f005 fec0 	bl	8009d5c <HAL_UART_Init>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003fe0:	f000 fcba 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	20000474 	.word	0x20000474
 8003ff0:	40004800 	.word	0x40004800

08003ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <MX_DMA_Init+0x48>)
 8003ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	; (800403c <MX_DMA_Init+0x48>)
 8004000:	2101      	movs	r1, #1
 8004002:	430a      	orrs	r2, r1
 8004004:	639a      	str	r2, [r3, #56]	; 0x38
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <MX_DMA_Init+0x48>)
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	2201      	movs	r2, #1
 800400c:	4013      	ands	r3, r2
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8004012:	2200      	movs	r2, #0
 8004014:	2101      	movs	r1, #1
 8004016:	2009      	movs	r0, #9
 8004018:	f002 fb72 	bl	8006700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800401c:	2009      	movs	r0, #9
 800401e:	f002 fb84 	bl	800672a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8004022:	2200      	movs	r2, #0
 8004024:	2101      	movs	r1, #1
 8004026:	200a      	movs	r0, #10
 8004028:	f002 fb6a 	bl	8006700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800402c:	200a      	movs	r0, #10
 800402e:	f002 fb7c 	bl	800672a <HAL_NVIC_EnableIRQ>

}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b002      	add	sp, #8
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	40021000 	.word	0x40021000

08004040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004046:	240c      	movs	r4, #12
 8004048:	193b      	adds	r3, r7, r4
 800404a:	0018      	movs	r0, r3
 800404c:	2314      	movs	r3, #20
 800404e:	001a      	movs	r2, r3
 8004050:	2100      	movs	r1, #0
 8004052:	f007 feef 	bl	800be34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004056:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <MX_GPIO_Init+0x194>)
 8004058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405a:	4b5e      	ldr	r3, [pc, #376]	; (80041d4 <MX_GPIO_Init+0x194>)
 800405c:	2102      	movs	r1, #2
 800405e:	430a      	orrs	r2, r1
 8004060:	635a      	str	r2, [r3, #52]	; 0x34
 8004062:	4b5c      	ldr	r3, [pc, #368]	; (80041d4 <MX_GPIO_Init+0x194>)
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	2202      	movs	r2, #2
 8004068:	4013      	ands	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800406e:	4b59      	ldr	r3, [pc, #356]	; (80041d4 <MX_GPIO_Init+0x194>)
 8004070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004072:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <MX_GPIO_Init+0x194>)
 8004074:	2101      	movs	r1, #1
 8004076:	430a      	orrs	r2, r1
 8004078:	635a      	str	r2, [r3, #52]	; 0x34
 800407a:	4b56      	ldr	r3, [pc, #344]	; (80041d4 <MX_GPIO_Init+0x194>)
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	2201      	movs	r2, #1
 8004080:	4013      	ands	r3, r2
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004086:	4b53      	ldr	r3, [pc, #332]	; (80041d4 <MX_GPIO_Init+0x194>)
 8004088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408a:	4b52      	ldr	r3, [pc, #328]	; (80041d4 <MX_GPIO_Init+0x194>)
 800408c:	2104      	movs	r1, #4
 800408e:	430a      	orrs	r2, r1
 8004090:	635a      	str	r2, [r3, #52]	; 0x34
 8004092:	4b50      	ldr	r3, [pc, #320]	; (80041d4 <MX_GPIO_Init+0x194>)
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	2204      	movs	r2, #4
 8004098:	4013      	ands	r3, r2
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800409e:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <MX_GPIO_Init+0x198>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	2140      	movs	r1, #64	; 0x40
 80040a4:	0018      	movs	r0, r3
 80040a6:	f003 fc9a 	bl	80079de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	0159      	lsls	r1, r3, #5
 80040ae:	23a0      	movs	r3, #160	; 0xa0
 80040b0:	05db      	lsls	r3, r3, #23
 80040b2:	2200      	movs	r2, #0
 80040b4:	0018      	movs	r0, r3
 80040b6:	f003 fc92 	bl	80079de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80040ba:	4b48      	ldr	r3, [pc, #288]	; (80041dc <MX_GPIO_Init+0x19c>)
 80040bc:	2200      	movs	r2, #0
 80040be:	2120      	movs	r1, #32
 80040c0:	0018      	movs	r0, r3
 80040c2:	f003 fc8c 	bl	80079de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80040c6:	193b      	adds	r3, r7, r4
 80040c8:	2202      	movs	r2, #2
 80040ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040cc:	193b      	adds	r3, r7, r4
 80040ce:	2202      	movs	r2, #2
 80040d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	193b      	adds	r3, r7, r4
 80040d4:	2200      	movs	r2, #0
 80040d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d8:	193b      	adds	r3, r7, r4
 80040da:	2200      	movs	r2, #0
 80040dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80040de:	193b      	adds	r3, r7, r4
 80040e0:	2202      	movs	r2, #2
 80040e2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e4:	193b      	adds	r3, r7, r4
 80040e6:	4a3d      	ldr	r2, [pc, #244]	; (80041dc <MX_GPIO_Init+0x19c>)
 80040e8:	0019      	movs	r1, r3
 80040ea:	0010      	movs	r0, r2
 80040ec:	f003 faf6 	bl	80076dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040f0:	0021      	movs	r1, r4
 80040f2:	187b      	adds	r3, r7, r1
 80040f4:	22c0      	movs	r2, #192	; 0xc0
 80040f6:	00d2      	lsls	r2, r2, #3
 80040f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fa:	000c      	movs	r4, r1
 80040fc:	193b      	adds	r3, r7, r4
 80040fe:	2202      	movs	r2, #2
 8004100:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004102:	193b      	adds	r3, r7, r4
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004108:	193b      	adds	r3, r7, r4
 800410a:	2200      	movs	r2, #0
 800410c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800410e:	193b      	adds	r3, r7, r4
 8004110:	2202      	movs	r2, #2
 8004112:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004114:	193a      	adds	r2, r7, r4
 8004116:	23a0      	movs	r3, #160	; 0xa0
 8004118:	05db      	lsls	r3, r3, #23
 800411a:	0011      	movs	r1, r2
 800411c:	0018      	movs	r0, r3
 800411e:	f003 fadd 	bl	80076dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004122:	193b      	adds	r3, r7, r4
 8004124:	2240      	movs	r2, #64	; 0x40
 8004126:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004128:	193b      	adds	r3, r7, r4
 800412a:	2201      	movs	r2, #1
 800412c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	193b      	adds	r3, r7, r4
 8004130:	2200      	movs	r2, #0
 8004132:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004134:	193b      	adds	r3, r7, r4
 8004136:	2202      	movs	r2, #2
 8004138:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413a:	193b      	adds	r3, r7, r4
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <MX_GPIO_Init+0x198>)
 800413e:	0019      	movs	r1, r3
 8004140:	0010      	movs	r0, r2
 8004142:	f003 facb 	bl	80076dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004146:	193b      	adds	r3, r7, r4
 8004148:	2280      	movs	r2, #128	; 0x80
 800414a:	0112      	lsls	r2, r2, #4
 800414c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800414e:	193b      	adds	r3, r7, r4
 8004150:	22c4      	movs	r2, #196	; 0xc4
 8004152:	0392      	lsls	r2, r2, #14
 8004154:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	193b      	adds	r3, r7, r4
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415c:	193a      	adds	r2, r7, r4
 800415e:	23a0      	movs	r3, #160	; 0xa0
 8004160:	05db      	lsls	r3, r3, #23
 8004162:	0011      	movs	r1, r2
 8004164:	0018      	movs	r0, r3
 8004166:	f003 fab9 	bl	80076dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800416a:	0021      	movs	r1, r4
 800416c:	187b      	adds	r3, r7, r1
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	0152      	lsls	r2, r2, #5
 8004172:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004174:	000c      	movs	r4, r1
 8004176:	193b      	adds	r3, r7, r4
 8004178:	2201      	movs	r2, #1
 800417a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	193b      	adds	r3, r7, r4
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004182:	193b      	adds	r3, r7, r4
 8004184:	2200      	movs	r2, #0
 8004186:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004188:	193a      	adds	r2, r7, r4
 800418a:	23a0      	movs	r3, #160	; 0xa0
 800418c:	05db      	lsls	r3, r3, #23
 800418e:	0011      	movs	r1, r2
 8004190:	0018      	movs	r0, r3
 8004192:	f003 faa3 	bl	80076dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004196:	0021      	movs	r1, r4
 8004198:	187b      	adds	r3, r7, r1
 800419a:	2220      	movs	r2, #32
 800419c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	2201      	movs	r2, #1
 80041a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a4:	187b      	adds	r3, r7, r1
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041aa:	187b      	adds	r3, r7, r1
 80041ac:	2200      	movs	r2, #0
 80041ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <MX_GPIO_Init+0x19c>)
 80041b4:	0019      	movs	r1, r3
 80041b6:	0010      	movs	r0, r2
 80041b8:	f003 fa90 	bl	80076dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80041bc:	2200      	movs	r2, #0
 80041be:	2100      	movs	r1, #0
 80041c0:	2007      	movs	r0, #7
 80041c2:	f002 fa9d 	bl	8006700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80041c6:	2007      	movs	r0, #7
 80041c8:	f002 faaf 	bl	800672a <HAL_NVIC_EnableIRQ>

}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b009      	add	sp, #36	; 0x24
 80041d2:	bd90      	pop	{r4, r7, pc}
 80041d4:	40021000 	.word	0x40021000
 80041d8:	50000800 	.word	0x50000800
 80041dc:	50000400 	.word	0x50000400

080041e0 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	0002      	movs	r2, r0
 80041e8:	1dbb      	adds	r3, r7, #6
 80041ea:	801a      	strh	r2, [r3, #0]
	__disable_irq;
	GPIOC->BRR = (uint32_t)GPIO_PIN_6;
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 80041ee:	2240      	movs	r2, #64	; 0x40
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
		*(uint32_t*)(dacadresse)=(uint32_t)dac_min;   //laser ausschalten
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 80041f4:	881a      	ldrh	r2, [r3, #0]
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	601a      	str	r2, [r3, #0]
	__enable_irq;
	//	__HAL_TIM_DISABLE(&htim17);
	//	__HAL_TIM_SET_COUNTER(&htim17,0);
	//	__HAL_TIM_ENABLE(&htim17);

}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}
 8004204:	50000800 	.word	0x50000800
 8004208:	200000dc 	.word	0x200000dc
 800420c:	200018a4 	.word	0x200018a4

08004210 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	0002      	movs	r2, r0
 8004218:	1dbb      	adds	r3, r7, #6
 800421a:	801a      	strh	r2, [r3, #0]
	//	mycounter2=__HAL_TIM_GET_COUNTER(&htim17);
	//	mydelay=mycounter2;//-mycounter1;

		//if(mydelay>20){
		__disable_irq;
			*(uint32_t*)(dacadresse)=(uint32_t)ampli;
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	601a      	str	r2, [r3, #0]
			GPIOC->BSRR = (uint32_t)GPIO_PIN_6;  //PIN um ADC anzuzeigen das LD an
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8004228:	2240      	movs	r2, #64	; 0x40
 800422a:	619a      	str	r2, [r3, #24]
		//		TIM15->ARR=mydelay/2;
		//	}
		//	else{
		//		TIM15->ARR=150;
		//	}
	}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200000d2 	.word	0x200000d2
 8004238:	200018a4 	.word	0x200018a4
 800423c:	50000800 	.word	0x50000800

08004240 <HAL_ADC_ConvCpltCallback>:
	//mydelay=mycounter2-mycounter1;



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
//		__HAL_TIM_ENABLE(&htim6); //start adc trigger timer
//	}
	//adc_restart_but_discard_last = 0;
	//adc_busy = 0;
	//GPIOA->BRR = (uint32_t)GPIO_PIN_11;
	HAL_ADC_Stop_DMA(&hadc1);
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_ADC_ConvCpltCallback+0x20>)
 800424a:	0018      	movs	r0, r3
 800424c:	f001 fb08 	bl	8005860 <HAL_ADC_Stop_DMA>
	adc_ready=1;
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_ADC_ConvCpltCallback+0x24>)
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	46bd      	mov	sp, r7
 800425a:	b002      	add	sp, #8
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	200002f8 	.word	0x200002f8
 8004264:	2000186b 	.word	0x2000186b

08004268 <HAL_TIM_PeriodElapsedCallback>:
//		__HAL_TIM_SET_COUNTER(&htim17,0);
//		__HAL_TIM_ENABLE(&htim17);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	if(htim==&htim16)
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004274:	429a      	cmp	r2, r3
 8004276:	d102      	bne.n	800427e <HAL_TIM_PeriodElapsedCallback+0x16>
		print=1;
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800427a:	2201      	movs	r2, #1
 800427c:	701a      	strb	r2, [r3, #0]
}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b002      	add	sp, #8
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000428 	.word	0x20000428
 800428c:	20001872 	.word	0x20001872

08004290 <check_serial>:
uint8_t check_serial(int first){
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	if(first==serial_flash){
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <check_serial+0x24>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	001a      	movs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <check_serial+0x18>
		return (uint8_t)1;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <check_serial+0x1a>
	}
	else{
		return 0;
 80042a8:	2300      	movs	r3, #0
	}
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b002      	add	sp, #8
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	20001880 	.word	0x20001880

080042b8 <printlen>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void printlen(){
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);//setting rs485 in sending mode
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	0159      	lsls	r1, r3, #5
 80042c0:	23a0      	movs	r3, #160	; 0xa0
 80042c2:	05db      	lsls	r3, r3, #23
 80042c4:	2201      	movs	r2, #1
 80042c6:	0018      	movs	r0, r3
 80042c8:	f003 fb89 	bl	80079de <HAL_GPIO_WritePin>
	HAL_Delay(dly);
 80042cc:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <printlen+0x4c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 fedf 	bl	8005094 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, str, len);
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <printlen+0x50>)
 80042d8:	881a      	ldrh	r2, [r3, #0]
 80042da:	490c      	ldr	r1, [pc, #48]	; (800430c <printlen+0x54>)
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <printlen+0x58>)
 80042de:	0018      	movs	r0, r3
 80042e0:	f005 fdf0 	bl	8009ec4 <HAL_UART_Transmit_DMA>
	HAL_Delay(dly);
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <printlen+0x4c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f000 fed3 	bl	8005094 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);//setting rs485 in receiving mode
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	0159      	lsls	r1, r3, #5
 80042f2:	23a0      	movs	r3, #160	; 0xa0
 80042f4:	05db      	lsls	r3, r3, #23
 80042f6:	2200      	movs	r2, #0
 80042f8:	0018      	movs	r0, r3
 80042fa:	f003 fb70 	bl	80079de <HAL_GPIO_WritePin>
	//befehl[]='\0';
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	200000d8 	.word	0x200000d8
 8004308:	2000186c 	.word	0x2000186c
 800430c:	20000004 	.word	0x20000004
 8004310:	20000474 	.word	0x20000474

08004314 <decode_command>:

//will decode decode tha command based on befehl[3] and befehl[4] values and assign the string to len which needs to be print
void decode_command(){
 8004314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004316:	46de      	mov	lr, fp
 8004318:	4657      	mov	r7, sl
 800431a:	464e      	mov	r6, r9
 800431c:	4645      	mov	r5, r8
 800431e:	b5e0      	push	{r5, r6, r7, lr}
 8004320:	b08f      	sub	sp, #60	; 0x3c
 8004322:	af0a      	add	r7, sp, #40	; 0x28
	//for writing-
	if(befehl[3]=='w'){
 8004324:	49b6      	ldr	r1, [pc, #728]	; (8004600 <decode_command+0x2ec>)
 8004326:	78c9      	ldrb	r1, [r1, #3]
 8004328:	2977      	cmp	r1, #119	; 0x77
 800432a:	d000      	beq.n	800432e <decode_command+0x1a>
 800432c:	e075      	b.n	800441a <decode_command+0x106>
		//-serial
		if(befehl[4]=='s'){
 800432e:	49b4      	ldr	r1, [pc, #720]	; (8004600 <decode_command+0x2ec>)
 8004330:	7909      	ldrb	r1, [r1, #4]
 8004332:	2973      	cmp	r1, #115	; 0x73
 8004334:	d11e      	bne.n	8004374 <decode_command+0x60>
			//serial_flash=0;
			serial_flash=atoi(&befehl[5]);
 8004336:	4bb3      	ldr	r3, [pc, #716]	; (8004604 <decode_command+0x2f0>)
 8004338:	0018      	movs	r0, r3
 800433a:	f007 fd4b 	bl	800bdd4 <atoi>
 800433e:	0003      	movs	r3, r0
 8004340:	b29a      	uxth	r2, r3
 8004342:	4bb1      	ldr	r3, [pc, #708]	; (8004608 <decode_command+0x2f4>)
 8004344:	801a      	strh	r2, [r3, #0]
			bfmin_store_parameter(7,(uint64_t)serial_flash);
 8004346:	4bb0      	ldr	r3, [pc, #704]	; (8004608 <decode_command+0x2f4>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2007      	movs	r0, #7
 8004356:	f7fe ffb3 	bl	80032c0 <bfmin_store_parameter>
			len=sprintf(str,"Write %d",serial_flash);
 800435a:	4bab      	ldr	r3, [pc, #684]	; (8004608 <decode_command+0x2f4>)
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	001a      	movs	r2, r3
 8004360:	49aa      	ldr	r1, [pc, #680]	; (800460c <decode_command+0x2f8>)
 8004362:	4bab      	ldr	r3, [pc, #684]	; (8004610 <decode_command+0x2fc>)
 8004364:	0018      	movs	r0, r3
 8004366:	f007 fd6d 	bl	800be44 <siprintf>
 800436a:	0003      	movs	r3, r0
 800436c:	b29a      	uxth	r2, r3
 800436e:	4ba9      	ldr	r3, [pc, #676]	; (8004614 <decode_command+0x300>)
 8004370:	801a      	strh	r2, [r3, #0]
			else{pflag=0;}//setting the flag again to 0 so that it does not print again if received any wrong befehl[4] value.
		}
		else{pflag=0;}//setting the flag again to 0 so that it does not print again if received any wrong befehl[4] value.
	}
	else{pflag=0;}//setting the flag again to 0 so that it does not print again if received any wrong befehl[4] value.
}
 8004372:	e13b      	b.n	80045ec <decode_command+0x2d8>
		else if(befehl[4]=='v'){
 8004374:	49a2      	ldr	r1, [pc, #648]	; (8004600 <decode_command+0x2ec>)
 8004376:	7909      	ldrb	r1, [r1, #4]
 8004378:	2976      	cmp	r1, #118	; 0x76
 800437a:	d11c      	bne.n	80043b6 <decode_command+0xa2>
			printversion=atoi(&befehl[5]);
 800437c:	4ba1      	ldr	r3, [pc, #644]	; (8004604 <decode_command+0x2f0>)
 800437e:	0018      	movs	r0, r3
 8004380:	f007 fd28 	bl	800bdd4 <atoi>
 8004384:	0003      	movs	r3, r0
 8004386:	001c      	movs	r4, r3
 8004388:	17db      	asrs	r3, r3, #31
 800438a:	001d      	movs	r5, r3
 800438c:	4ba2      	ldr	r3, [pc, #648]	; (8004618 <decode_command+0x304>)
 800438e:	601c      	str	r4, [r3, #0]
 8004390:	605d      	str	r5, [r3, #4]
			bfmin_store_parameter(5,(uint64_t)printversion);
 8004392:	4ba1      	ldr	r3, [pc, #644]	; (8004618 <decode_command+0x304>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2005      	movs	r0, #5
 800439a:	f7fe ff91 	bl	80032c0 <bfmin_store_parameter>
			len=sprintf(str,"version set to %d",printversion);
 800439e:	4b9e      	ldr	r3, [pc, #632]	; (8004618 <decode_command+0x304>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	499d      	ldr	r1, [pc, #628]	; (800461c <decode_command+0x308>)
 80043a6:	489a      	ldr	r0, [pc, #616]	; (8004610 <decode_command+0x2fc>)
 80043a8:	f007 fd4c 	bl	800be44 <siprintf>
 80043ac:	0003      	movs	r3, r0
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	4b98      	ldr	r3, [pc, #608]	; (8004614 <decode_command+0x300>)
 80043b2:	801a      	strh	r2, [r3, #0]
}
 80043b4:	e11a      	b.n	80045ec <decode_command+0x2d8>
		else if(befehl[4]=='r'){
 80043b6:	4992      	ldr	r1, [pc, #584]	; (8004600 <decode_command+0x2ec>)
 80043b8:	7909      	ldrb	r1, [r1, #4]
 80043ba:	2972      	cmp	r1, #114	; 0x72
 80043bc:	d129      	bne.n	8004412 <decode_command+0xfe>
			life_flash=100;
 80043be:	4998      	ldr	r1, [pc, #608]	; (8004620 <decode_command+0x30c>)
 80043c0:	2064      	movs	r0, #100	; 0x64
 80043c2:	8008      	strh	r0, [r1, #0]
			bfmin_store_parameter(6,(uint64_t)life_flash);
 80043c4:	4996      	ldr	r1, [pc, #600]	; (8004620 <decode_command+0x30c>)
 80043c6:	2000      	movs	r0, #0
 80043c8:	5e09      	ldrsh	r1, [r1, r0]
 80043ca:	000a      	movs	r2, r1
 80043cc:	17c9      	asrs	r1, r1, #31
 80043ce:	000b      	movs	r3, r1
 80043d0:	2006      	movs	r0, #6
 80043d2:	f7fe ff75 	bl	80032c0 <bfmin_store_parameter>
			serial_flash=1;
 80043d6:	4b8c      	ldr	r3, [pc, #560]	; (8004608 <decode_command+0x2f4>)
 80043d8:	2201      	movs	r2, #1
 80043da:	801a      	strh	r2, [r3, #0]
			bfmin_store_parameter(7,(uint64_t)serial_flash);
 80043dc:	4b8a      	ldr	r3, [pc, #552]	; (8004608 <decode_command+0x2f4>)
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	2300      	movs	r3, #0
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2007      	movs	r0, #7
 80043ec:	f7fe ff68 	bl	80032c0 <bfmin_store_parameter>
			len=sprintf(str,"Serial set to  %d; Life reset to %d",serial_flash,life_flash);
 80043f0:	4b85      	ldr	r3, [pc, #532]	; (8004608 <decode_command+0x2f4>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	001a      	movs	r2, r3
 80043f6:	4b8a      	ldr	r3, [pc, #552]	; (8004620 <decode_command+0x30c>)
 80043f8:	2100      	movs	r1, #0
 80043fa:	5e5b      	ldrsh	r3, [r3, r1]
 80043fc:	4989      	ldr	r1, [pc, #548]	; (8004624 <decode_command+0x310>)
 80043fe:	4884      	ldr	r0, [pc, #528]	; (8004610 <decode_command+0x2fc>)
 8004400:	f007 fd20 	bl	800be44 <siprintf>
 8004404:	0003      	movs	r3, r0
 8004406:	b29a      	uxth	r2, r3
 8004408:	4b82      	ldr	r3, [pc, #520]	; (8004614 <decode_command+0x300>)
 800440a:	801a      	strh	r2, [r3, #0]
			printlen();
 800440c:	f7ff ff54 	bl	80042b8 <printlen>
}
 8004410:	e0ec      	b.n	80045ec <decode_command+0x2d8>
		else{pflag=0;}//setting the flag again to 0 so that it does not print again if received any wrong befehl[4] value.
 8004412:	4b85      	ldr	r3, [pc, #532]	; (8004628 <decode_command+0x314>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
}
 8004418:	e0e8      	b.n	80045ec <decode_command+0x2d8>
	else if(befehl[3]=='r'){
 800441a:	4b79      	ldr	r3, [pc, #484]	; (8004600 <decode_command+0x2ec>)
 800441c:	78db      	ldrb	r3, [r3, #3]
 800441e:	2b72      	cmp	r3, #114	; 0x72
 8004420:	d000      	beq.n	8004424 <decode_command+0x110>
 8004422:	e0e0      	b.n	80045e6 <decode_command+0x2d2>
		if(befehl[4]=='s'){
 8004424:	4b76      	ldr	r3, [pc, #472]	; (8004600 <decode_command+0x2ec>)
 8004426:	791b      	ldrb	r3, [r3, #4]
 8004428:	2b73      	cmp	r3, #115	; 0x73
 800442a:	d10c      	bne.n	8004446 <decode_command+0x132>
			len=sprintf(str,"%d",serial_flash);
 800442c:	4b76      	ldr	r3, [pc, #472]	; (8004608 <decode_command+0x2f4>)
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	001a      	movs	r2, r3
 8004432:	497e      	ldr	r1, [pc, #504]	; (800462c <decode_command+0x318>)
 8004434:	4b76      	ldr	r3, [pc, #472]	; (8004610 <decode_command+0x2fc>)
 8004436:	0018      	movs	r0, r3
 8004438:	f007 fd04 	bl	800be44 <siprintf>
 800443c:	0003      	movs	r3, r0
 800443e:	b29a      	uxth	r2, r3
 8004440:	4b74      	ldr	r3, [pc, #464]	; (8004614 <decode_command+0x300>)
 8004442:	801a      	strh	r2, [r3, #0]
}
 8004444:	e0d2      	b.n	80045ec <decode_command+0x2d8>
		else if(befehl[4]=='v'){
 8004446:	4b6e      	ldr	r3, [pc, #440]	; (8004600 <decode_command+0x2ec>)
 8004448:	791b      	ldrb	r3, [r3, #4]
 800444a:	2b76      	cmp	r3, #118	; 0x76
 800444c:	d000      	beq.n	8004450 <decode_command+0x13c>
 800444e:	e0c6      	b.n	80045de <decode_command+0x2ca>
			if(printversion==1){
 8004450:	4b71      	ldr	r3, [pc, #452]	; (8004618 <decode_command+0x304>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2a01      	cmp	r2, #1
 8004458:	d138      	bne.n	80044cc <decode_command+0x1b8>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d136      	bne.n	80044cc <decode_command+0x1b8>
				len=sprintf(str,"Version%d\r%d\r%d\r%d\r%d\r\r",version,(uint16_t)((float)current/0.36),u_ref-pdsig,bfmin_lifetime_in_minutes/60,ADC_mean[0]);
 800445e:	4b74      	ldr	r3, [pc, #464]	; (8004630 <decode_command+0x31c>)
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	001d      	movs	r5, r3
 8004464:	4b73      	ldr	r3, [pc, #460]	; (8004634 <decode_command+0x320>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0018      	movs	r0, r3
 800446a:	f7fc ff25 	bl	80012b8 <__aeabi_ui2f>
 800446e:	1c03      	adds	r3, r0, #0
 8004470:	1c18      	adds	r0, r3, #0
 8004472:	f7fe fd23 	bl	8002ebc <__aeabi_f2d>
 8004476:	4a70      	ldr	r2, [pc, #448]	; (8004638 <decode_command+0x324>)
 8004478:	4b70      	ldr	r3, [pc, #448]	; (800463c <decode_command+0x328>)
 800447a:	f7fd fa9b 	bl	80019b4 <__aeabi_ddiv>
 800447e:	0002      	movs	r2, r0
 8004480:	000b      	movs	r3, r1
 8004482:	0010      	movs	r0, r2
 8004484:	0019      	movs	r1, r3
 8004486:	f7fb ff85 	bl	8000394 <__aeabi_d2uiz>
 800448a:	0003      	movs	r3, r0
 800448c:	b29b      	uxth	r3, r3
 800448e:	001e      	movs	r6, r3
 8004490:	4b6b      	ldr	r3, [pc, #428]	; (8004640 <decode_command+0x32c>)
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	001a      	movs	r2, r3
 8004496:	4b6b      	ldr	r3, [pc, #428]	; (8004644 <decode_command+0x330>)
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	1ad4      	subs	r4, r2, r3
 800449c:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <decode_command+0x334>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	213c      	movs	r1, #60	; 0x3c
 80044a2:	0018      	movs	r0, r3
 80044a4:	f7fb fe3a 	bl	800011c <__udivsi3>
 80044a8:	0003      	movs	r3, r0
 80044aa:	001a      	movs	r2, r3
 80044ac:	4b67      	ldr	r3, [pc, #412]	; (800464c <decode_command+0x338>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4967      	ldr	r1, [pc, #412]	; (8004650 <decode_command+0x33c>)
 80044b2:	4857      	ldr	r0, [pc, #348]	; (8004610 <decode_command+0x2fc>)
 80044b4:	9302      	str	r3, [sp, #8]
 80044b6:	9201      	str	r2, [sp, #4]
 80044b8:	9400      	str	r4, [sp, #0]
 80044ba:	0033      	movs	r3, r6
 80044bc:	002a      	movs	r2, r5
 80044be:	f007 fcc1 	bl	800be44 <siprintf>
 80044c2:	0003      	movs	r3, r0
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	4b53      	ldr	r3, [pc, #332]	; (8004614 <decode_command+0x300>)
 80044c8:	801a      	strh	r2, [r3, #0]
}
 80044ca:	e08f      	b.n	80045ec <decode_command+0x2d8>
			else if(printversion==2){
 80044cc:	4b52      	ldr	r3, [pc, #328]	; (8004618 <decode_command+0x304>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2a02      	cmp	r2, #2
 80044d4:	d13e      	bne.n	8004554 <decode_command+0x240>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d13c      	bne.n	8004554 <decode_command+0x240>
				len=sprintf(str,"Version %d\r%d\r%d\r%d\r%d\r%d\r\r",2,(uint16_t)((float)current/0.36),u_ref-pdsig,bfmin_lifetime_in_minutes/60,ADC_mean[0],life/100);
 80044da:	4b56      	ldr	r3, [pc, #344]	; (8004634 <decode_command+0x320>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	0018      	movs	r0, r3
 80044e0:	f7fc feea 	bl	80012b8 <__aeabi_ui2f>
 80044e4:	1c03      	adds	r3, r0, #0
 80044e6:	1c18      	adds	r0, r3, #0
 80044e8:	f7fe fce8 	bl	8002ebc <__aeabi_f2d>
 80044ec:	4a52      	ldr	r2, [pc, #328]	; (8004638 <decode_command+0x324>)
 80044ee:	4b53      	ldr	r3, [pc, #332]	; (800463c <decode_command+0x328>)
 80044f0:	f7fd fa60 	bl	80019b4 <__aeabi_ddiv>
 80044f4:	0002      	movs	r2, r0
 80044f6:	000b      	movs	r3, r1
 80044f8:	0010      	movs	r0, r2
 80044fa:	0019      	movs	r1, r3
 80044fc:	f7fb ff4a 	bl	8000394 <__aeabi_d2uiz>
 8004500:	0003      	movs	r3, r0
 8004502:	b29b      	uxth	r3, r3
 8004504:	4698      	mov	r8, r3
 8004506:	4b4e      	ldr	r3, [pc, #312]	; (8004640 <decode_command+0x32c>)
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	001a      	movs	r2, r3
 800450c:	4b4d      	ldr	r3, [pc, #308]	; (8004644 <decode_command+0x330>)
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	1ad4      	subs	r4, r2, r3
 8004512:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <decode_command+0x334>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	213c      	movs	r1, #60	; 0x3c
 8004518:	0018      	movs	r0, r3
 800451a:	f7fb fdff 	bl	800011c <__udivsi3>
 800451e:	0003      	movs	r3, r0
 8004520:	001e      	movs	r6, r3
 8004522:	4b4a      	ldr	r3, [pc, #296]	; (800464c <decode_command+0x338>)
 8004524:	681d      	ldr	r5, [r3, #0]
 8004526:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <decode_command+0x340>)
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	2164      	movs	r1, #100	; 0x64
 800452c:	0018      	movs	r0, r3
 800452e:	f7fb fdf5 	bl	800011c <__udivsi3>
 8004532:	0003      	movs	r3, r0
 8004534:	b29b      	uxth	r3, r3
 8004536:	4948      	ldr	r1, [pc, #288]	; (8004658 <decode_command+0x344>)
 8004538:	4835      	ldr	r0, [pc, #212]	; (8004610 <decode_command+0x2fc>)
 800453a:	9303      	str	r3, [sp, #12]
 800453c:	9502      	str	r5, [sp, #8]
 800453e:	9601      	str	r6, [sp, #4]
 8004540:	9400      	str	r4, [sp, #0]
 8004542:	4643      	mov	r3, r8
 8004544:	2202      	movs	r2, #2
 8004546:	f007 fc7d 	bl	800be44 <siprintf>
 800454a:	0003      	movs	r3, r0
 800454c:	b29a      	uxth	r2, r3
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <decode_command+0x300>)
 8004550:	801a      	strh	r2, [r3, #0]
}
 8004552:	e04b      	b.n	80045ec <decode_command+0x2d8>
			else if(printversion==3){
 8004554:	4b30      	ldr	r3, [pc, #192]	; (8004618 <decode_command+0x304>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2a03      	cmp	r2, #3
 800455c:	d13b      	bne.n	80045d6 <decode_command+0x2c2>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d139      	bne.n	80045d6 <decode_command+0x2c2>
				len=sprintf( str," temp*100;%d;Uc: %d;I mA*3.6;%d;PD mV;%d;count;%d; dac;%d; lifetime [min];%d; restarts; %d;life*100;%d;life_flash %d;delay %d \r",temp,ADC_mean[1],current,pdsig,ADC_count, dac_value,(int)bfmin_lifetime_in_minutes,bfmin_restarts,life,life_flash,mydelay);//,M2M_PWM_CNT);
 8004562:	4b3e      	ldr	r3, [pc, #248]	; (800465c <decode_command+0x348>)
 8004564:	2200      	movs	r2, #0
 8004566:	5e9b      	ldrsh	r3, [r3, r2]
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	4b38      	ldr	r3, [pc, #224]	; (800464c <decode_command+0x338>)
 800456c:	685e      	ldr	r6, [r3, #4]
 800456e:	4b31      	ldr	r3, [pc, #196]	; (8004634 <decode_command+0x320>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b34      	ldr	r3, [pc, #208]	; (8004644 <decode_command+0x330>)
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	469c      	mov	ip, r3
 8004578:	4b39      	ldr	r3, [pc, #228]	; (8004660 <decode_command+0x34c>)
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	4b39      	ldr	r3, [pc, #228]	; (8004664 <decode_command+0x350>)
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	4698      	mov	r8, r3
 8004582:	4b31      	ldr	r3, [pc, #196]	; (8004648 <decode_command+0x334>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4699      	mov	r9, r3
 8004588:	4b37      	ldr	r3, [pc, #220]	; (8004668 <decode_command+0x354>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	4b31      	ldr	r3, [pc, #196]	; (8004654 <decode_command+0x340>)
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	469a      	mov	sl, r3
 8004592:	4b23      	ldr	r3, [pc, #140]	; (8004620 <decode_command+0x30c>)
 8004594:	2400      	movs	r4, #0
 8004596:	5f1b      	ldrsh	r3, [r3, r4]
 8004598:	469b      	mov	fp, r3
 800459a:	4b34      	ldr	r3, [pc, #208]	; (800466c <decode_command+0x358>)
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4d33      	ldr	r5, [pc, #204]	; (8004670 <decode_command+0x35c>)
 80045a2:	4c1b      	ldr	r4, [pc, #108]	; (8004610 <decode_command+0x2fc>)
 80045a4:	9308      	str	r3, [sp, #32]
 80045a6:	465b      	mov	r3, fp
 80045a8:	9307      	str	r3, [sp, #28]
 80045aa:	4653      	mov	r3, sl
 80045ac:	9306      	str	r3, [sp, #24]
 80045ae:	9005      	str	r0, [sp, #20]
 80045b0:	4648      	mov	r0, r9
 80045b2:	9004      	str	r0, [sp, #16]
 80045b4:	4640      	mov	r0, r8
 80045b6:	9003      	str	r0, [sp, #12]
 80045b8:	9102      	str	r1, [sp, #8]
 80045ba:	4661      	mov	r1, ip
 80045bc:	9101      	str	r1, [sp, #4]
 80045be:	9200      	str	r2, [sp, #0]
 80045c0:	0033      	movs	r3, r6
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	0029      	movs	r1, r5
 80045c6:	0020      	movs	r0, r4
 80045c8:	f007 fc3c 	bl	800be44 <siprintf>
 80045cc:	0003      	movs	r3, r0
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	4b10      	ldr	r3, [pc, #64]	; (8004614 <decode_command+0x300>)
 80045d2:	801a      	strh	r2, [r3, #0]
}
 80045d4:	e00a      	b.n	80045ec <decode_command+0x2d8>
			else{pflag=0;}//setting the flag again to 0 so that it does not print again if received any wrong befehl[4] value.
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <decode_command+0x314>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
}
 80045dc:	e006      	b.n	80045ec <decode_command+0x2d8>
		else{pflag=0;}//setting the flag again to 0 so that it does not print again if received any wrong befehl[4] value.
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <decode_command+0x314>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	e002      	b.n	80045ec <decode_command+0x2d8>
	else{pflag=0;}//setting the flag again to 0 so that it does not print again if received any wrong befehl[4] value.
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <decode_command+0x314>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b005      	add	sp, #20
 80045f2:	bcf0      	pop	{r4, r5, r6, r7}
 80045f4:	46bb      	mov	fp, r7
 80045f6:	46b2      	mov	sl, r6
 80045f8:	46a9      	mov	r9, r5
 80045fa:	46a0      	mov	r8, r4
 80045fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	20001884 	.word	0x20001884
 8004604:	20001889 	.word	0x20001889
 8004608:	20001880 	.word	0x20001880
 800460c:	0800cc78 	.word	0x0800cc78
 8004610:	20000004 	.word	0x20000004
 8004614:	2000186c 	.word	0x2000186c
 8004618:	200000e0 	.word	0x200000e0
 800461c:	0800cc84 	.word	0x0800cc84
 8004620:	200000d6 	.word	0x200000d6
 8004624:	0800cc98 	.word	0x0800cc98
 8004628:	20001878 	.word	0x20001878
 800462c:	0800ccbc 	.word	0x0800ccbc
 8004630:	200000ce 	.word	0x200000ce
 8004634:	20001850 	.word	0x20001850
 8004638:	70a3d70a 	.word	0x70a3d70a
 800463c:	3fd70a3d 	.word	0x3fd70a3d
 8004640:	200000cc 	.word	0x200000cc
 8004644:	20001874 	.word	0x20001874
 8004648:	20000200 	.word	0x20000200
 800464c:	20001828 	.word	0x20001828
 8004650:	0800ccc0 	.word	0x0800ccc0
 8004654:	2000186e 	.word	0x2000186e
 8004658:	0800ccd8 	.word	0x0800ccd8
 800465c:	2000184c 	.word	0x2000184c
 8004660:	20001824 	.word	0x20001824
 8004664:	200000d0 	.word	0x200000d0
 8004668:	200001fc 	.word	0x200001fc
 800466c:	20001868 	.word	0x20001868
 8004670:	0800ccf4 	.word	0x0800ccf4

08004674 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

	if(befehl[pos]=='#' && start_command==0)
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_UART_RxCpltCallback+0xd0>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	001a      	movs	r2, r3
 8004682:	4b31      	ldr	r3, [pc, #196]	; (8004748 <HAL_UART_RxCpltCallback+0xd4>)
 8004684:	5c9b      	ldrb	r3, [r3, r2]
 8004686:	2b23      	cmp	r3, #35	; 0x23
 8004688:	d107      	bne.n	800469a <HAL_UART_RxCpltCallback+0x26>
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <HAL_UART_RxCpltCallback+0xd8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <HAL_UART_RxCpltCallback+0x26>
	{
				start_command=1;
 8004692:	4b2e      	ldr	r3, [pc, #184]	; (800474c <HAL_UART_RxCpltCallback+0xd8>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e045      	b.n	8004726 <HAL_UART_RxCpltCallback+0xb2>
	}

	else if (start_command==1 && befehl[pos]!='\0'){
 800469a:	4b2c      	ldr	r3, [pc, #176]	; (800474c <HAL_UART_RxCpltCallback+0xd8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d10d      	bne.n	80046be <HAL_UART_RxCpltCallback+0x4a>
 80046a2:	4b28      	ldr	r3, [pc, #160]	; (8004744 <HAL_UART_RxCpltCallback+0xd0>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	001a      	movs	r2, r3
 80046a8:	4b27      	ldr	r3, [pc, #156]	; (8004748 <HAL_UART_RxCpltCallback+0xd4>)
 80046aa:	5c9b      	ldrb	r3, [r3, r2]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <HAL_UART_RxCpltCallback+0x4a>
		pos++;
 80046b0:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_UART_RxCpltCallback+0xd0>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	4b22      	ldr	r3, [pc, #136]	; (8004744 <HAL_UART_RxCpltCallback+0xd0>)
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	e033      	b.n	8004726 <HAL_UART_RxCpltCallback+0xb2>
	}

//	if(befehl[pos]!='\0')
//		pos++;

	else if (befehl[pos]=='\0' && start_command==1){
 80046be:	4b21      	ldr	r3, [pc, #132]	; (8004744 <HAL_UART_RxCpltCallback+0xd0>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	001a      	movs	r2, r3
 80046c4:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_UART_RxCpltCallback+0xd4>)
 80046c6:	5c9b      	ldrb	r3, [r3, r2]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d12c      	bne.n	8004726 <HAL_UART_RxCpltCallback+0xb2>
 80046cc:	4b1f      	ldr	r3, [pc, #124]	; (800474c <HAL_UART_RxCpltCallback+0xd8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d128      	bne.n	8004726 <HAL_UART_RxCpltCallback+0xb2>
		start_command=0;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <HAL_UART_RxCpltCallback+0xd8>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
		pos=0;
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_UART_RxCpltCallback+0xd0>)
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
		if(check_serial(atoi(&befehl[0]))){
 80046e0:	4b19      	ldr	r3, [pc, #100]	; (8004748 <HAL_UART_RxCpltCallback+0xd4>)
 80046e2:	0018      	movs	r0, r3
 80046e4:	f007 fb76 	bl	800bdd4 <atoi>
 80046e8:	0003      	movs	r3, r0
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7ff fdd0 	bl	8004290 <check_serial>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d00a      	beq.n	800470a <HAL_UART_RxCpltCallback+0x96>
			pflag=1;
 80046f4:	4b16      	ldr	r3, [pc, #88]	; (8004750 <HAL_UART_RxCpltCallback+0xdc>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
			decode_command();
 80046fa:	f7ff fe0b 	bl	8004314 <decode_command>
			if(pflag){
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <HAL_UART_RxCpltCallback+0xdc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_UART_RxCpltCallback+0x96>
				printlen();
 8004706:	f7ff fdd7 	bl	80042b8 <printlen>
		}




		if(strstr(befehl,"lifereset")){
 800470a:	4a12      	ldr	r2, [pc, #72]	; (8004754 <HAL_UART_RxCpltCallback+0xe0>)
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <HAL_UART_RxCpltCallback+0xd4>)
 800470e:	0011      	movs	r1, r2
 8004710:	0018      	movs	r0, r3
 8004712:	f007 fbb7 	bl	800be84 <strstr>
 8004716:	1e03      	subs	r3, r0, #0
 8004718:	d004      	beq.n	8004724 <HAL_UART_RxCpltCallback+0xb0>
			bfmin_store_parameter(6,(uint64_t) 100);
 800471a:	2264      	movs	r2, #100	; 0x64
 800471c:	2300      	movs	r3, #0
 800471e:	2006      	movs	r0, #6
 8004720:	f7fe fdce 	bl	80032c0 <bfmin_store_parameter>
		if(strstr(befehl,"lifereset")){
 8004724:	46c0      	nop			; (mov r8, r8)
		bfmin_store_parameter(7,(uint64_t)serial_flash);
		len=sprintf(str,"Write %d",serial_flash);
		printlen();
		}
	}
	HAL_UART_Receive_IT(&huart3, &(befehl[pos]), 1);
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <HAL_UART_RxCpltCallback+0xd0>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	001a      	movs	r2, r3
 800472c:	4b06      	ldr	r3, [pc, #24]	; (8004748 <HAL_UART_RxCpltCallback+0xd4>)
 800472e:	18d1      	adds	r1, r2, r3
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_UART_RxCpltCallback+0xe4>)
 8004732:	2201      	movs	r2, #1
 8004734:	0018      	movs	r0, r3
 8004736:	f005 fb67 	bl	8009e08 <HAL_UART_Receive_IT>
}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	46bd      	mov	sp, r7
 800473e:	b002      	add	sp, #8
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	200018a2 	.word	0x200018a2
 8004748:	20001884 	.word	0x20001884
 800474c:	2000187c 	.word	0x2000187c
 8004750:	20001878 	.word	0x20001878
 8004754:	0800cd74 	.word	0x0800cd74
 8004758:	20000474 	.word	0x20000474

0800475c <readThermistor>:
		dac=0;
	return((uint32_t)dac);
}

int16_t readThermistor(uint16_t u_ntc)
{
 800475c:	b5b0      	push	{r4, r5, r7, lr}
 800475e:	b090      	sub	sp, #64	; 0x40
 8004760:	af00      	add	r7, sp, #0
 8004762:	0002      	movs	r2, r0
 8004764:	1dbb      	adds	r3, r7, #6
 8004766:	801a      	strh	r2, [r3, #0]
	//uint16_t u_ntc=1000;
	const double BALANCE_RESISTOR   = 10000.0;
 8004768:	2200      	movs	r2, #0
 800476a:	4b48      	ldr	r3, [pc, #288]	; (800488c <readThermistor+0x130>)
 800476c:	633a      	str	r2, [r7, #48]	; 0x30
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
	//const double MAX_ADC            = 4095.0;
	const double BETA               = 3375.0;
 8004770:	2200      	movs	r2, #0
 8004772:	4b47      	ldr	r3, [pc, #284]	; (8004890 <readThermistor+0x134>)
 8004774:	62ba      	str	r2, [r7, #40]	; 0x28
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
	const double ROOM_TEMP          = 298.15;
 8004778:	4a46      	ldr	r2, [pc, #280]	; (8004894 <readThermistor+0x138>)
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <readThermistor+0x13c>)
 800477c:	623a      	str	r2, [r7, #32]
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
	const double RESISTOR_ROOM_TEMP = 10000.0;
 8004780:	2200      	movs	r2, #0
 8004782:	4b42      	ldr	r3, [pc, #264]	; (800488c <readThermistor+0x130>)
 8004784:	61ba      	str	r2, [r7, #24]
 8004786:	61fb      	str	r3, [r7, #28]
	//double currentTemperature = 0;
  // variables that live in this function
  double rThermistor = 0;            // Holds thermistor resistance value
 8004788:	2200      	movs	r2, #0
 800478a:	2300      	movs	r3, #0
 800478c:	613a      	str	r2, [r7, #16]
 800478e:	617b      	str	r3, [r7, #20]
  double tKelvin     = 0;            // Holds calculated temperature
 8004790:	2200      	movs	r2, #0
 8004792:	2300      	movs	r3, #0
 8004794:	60ba      	str	r2, [r7, #8]
 8004796:	60fb      	str	r3, [r7, #12]
  float tCelsius    = 0;            // Hold temperature in celsius
 8004798:	2300      	movs	r3, #0
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c


  rThermistor = (BALANCE_RESISTOR * (u_ref-u_ntc))/u_ntc;
 800479c:	4b3f      	ldr	r3, [pc, #252]	; (800489c <readThermistor+0x140>)
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	001a      	movs	r2, r3
 80047a2:	1dbb      	adds	r3, r7, #6
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7fe fb57 	bl	8002e5c <__aeabi_i2d>
 80047ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	f7fd fd01 	bl	80021b8 <__aeabi_dmul>
 80047b6:	0002      	movs	r2, r0
 80047b8:	000b      	movs	r3, r1
 80047ba:	0014      	movs	r4, r2
 80047bc:	001d      	movs	r5, r3
 80047be:	1dbb      	adds	r3, r7, #6
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7fe fb4a 	bl	8002e5c <__aeabi_i2d>
 80047c8:	0002      	movs	r2, r0
 80047ca:	000b      	movs	r3, r1
 80047cc:	0020      	movs	r0, r4
 80047ce:	0029      	movs	r1, r5
 80047d0:	f7fd f8f0 	bl	80019b4 <__aeabi_ddiv>
 80047d4:	0002      	movs	r2, r0
 80047d6:	000b      	movs	r3, r1
 80047d8:	613a      	str	r2, [r7, #16]
 80047da:	617b      	str	r3, [r7, #20]
  tKelvin = (BETA * ROOM_TEMP)/(BETA + (ROOM_TEMP * log(rThermistor / RESISTOR_ROOM_TEMP)));
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e4:	f7fd fce8 	bl	80021b8 <__aeabi_dmul>
 80047e8:	0002      	movs	r2, r0
 80047ea:	000b      	movs	r3, r1
 80047ec:	0014      	movs	r4, r2
 80047ee:	001d      	movs	r5, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	6938      	ldr	r0, [r7, #16]
 80047f6:	6979      	ldr	r1, [r7, #20]
 80047f8:	f7fd f8dc 	bl	80019b4 <__aeabi_ddiv>
 80047fc:	0002      	movs	r2, r0
 80047fe:	000b      	movs	r3, r1
 8004800:	0010      	movs	r0, r2
 8004802:	0019      	movs	r1, r3
 8004804:	f008 f838 	bl	800c878 <log>
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	f7fd fcd4 	bl	80021b8 <__aeabi_dmul>
 8004810:	0002      	movs	r2, r0
 8004812:	000b      	movs	r3, r1
 8004814:	0010      	movs	r0, r2
 8004816:	0019      	movs	r1, r3
 8004818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	f7fc fd8e 	bl	800133c <__aeabi_dadd>
 8004820:	0002      	movs	r2, r0
 8004822:	000b      	movs	r3, r1
 8004824:	0020      	movs	r0, r4
 8004826:	0029      	movs	r1, r5
 8004828:	f7fd f8c4 	bl	80019b4 <__aeabi_ddiv>
 800482c:	0002      	movs	r2, r0
 800482e:	000b      	movs	r3, r1
 8004830:	60ba      	str	r2, [r7, #8]
 8004832:	60fb      	str	r3, [r7, #12]
  tCelsius = tKelvin - 273.15;
 8004834:	4a17      	ldr	r2, [pc, #92]	; (8004894 <readThermistor+0x138>)
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <readThermistor+0x144>)
 8004838:	68b8      	ldr	r0, [r7, #8]
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	f7fd ff28 	bl	8002690 <__aeabi_dsub>
 8004840:	0002      	movs	r2, r0
 8004842:	000b      	movs	r3, r1
 8004844:	0010      	movs	r0, r2
 8004846:	0019      	movs	r1, r3
 8004848:	f7fe fb80 	bl	8002f4c <__aeabi_d2f>
 800484c:	1c03      	adds	r3, r0, #0
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(tCelsius>200)
 8004850:	4914      	ldr	r1, [pc, #80]	; (80048a4 <readThermistor+0x148>)
 8004852:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004854:	f7fb fd52 	bl	80002fc <__aeabi_fcmpgt>
 8004858:	1e03      	subs	r3, r0, #0
 800485a:	d001      	beq.n	8004860 <readThermistor+0x104>
	  tCelsius=200;
 800485c:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <readThermistor+0x148>)
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(tCelsius<-200)
 8004860:	4911      	ldr	r1, [pc, #68]	; (80048a8 <readThermistor+0x14c>)
 8004862:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004864:	f7fb fd36 	bl	80002d4 <__aeabi_fcmplt>
 8004868:	1e03      	subs	r3, r0, #0
 800486a:	d001      	beq.n	8004870 <readThermistor+0x114>
	  tCelsius=-200;
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <readThermistor+0x14c>)
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return (int16_t)(tCelsius*100);    // Return the temperature in Celsius
 8004870:	490e      	ldr	r1, [pc, #56]	; (80048ac <readThermistor+0x150>)
 8004872:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004874:	f7fc f9de 	bl	8000c34 <__aeabi_fmul>
 8004878:	1c03      	adds	r3, r0, #0
 800487a:	1c18      	adds	r0, r3, #0
 800487c:	f7fc fcae 	bl	80011dc <__aeabi_f2iz>
 8004880:	0003      	movs	r3, r0
 8004882:	b21b      	sxth	r3, r3
  }
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	b010      	add	sp, #64	; 0x40
 800488a:	bdb0      	pop	{r4, r5, r7, pc}
 800488c:	40c38800 	.word	0x40c38800
 8004890:	40aa5e00 	.word	0x40aa5e00
 8004894:	66666666 	.word	0x66666666
 8004898:	4072a266 	.word	0x4072a266
 800489c:	200000cc 	.word	0x200000cc
 80048a0:	40711266 	.word	0x40711266
 80048a4:	43480000 	.word	0x43480000
 80048a8:	c3480000 	.word	0xc3480000
 80048ac:	42c80000 	.word	0x42c80000

080048b0 <lifetime>:




// Calclation of lifetime: deviation from polyfit
uint16_t lifetime(float current, float temperature){
 80048b0:	b5b0      	push	{r4, r5, r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]

	uint16_t life_cal=0;
 80048ba:	251e      	movs	r5, #30
 80048bc:	197b      	adds	r3, r7, r5
 80048be:	2200      	movs	r2, #0
 80048c0:	801a      	strh	r2, [r3, #0]
	 p3=   4.1007e+02 ;//3.6230e+02;//386.0153307115;
	}

//Muster-NR328 405nm 100mW
	if (laser==3){
	 p1= 1.6859e-06;//9.6261e-07;//0.000000554738;
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <lifetime+0x94>)
 80048c4:	61bb      	str	r3, [r7, #24]
	 p2= 2.4674e-03;//7.5319e-03;//0.00894725823;
 80048c6:	4b20      	ldr	r3, [pc, #128]	; (8004948 <lifetime+0x98>)
 80048c8:	617b      	str	r3, [r7, #20]
	 p3= 4.0913e+02;//3.6230e+02;//386.0153307115;
 80048ca:	4b20      	ldr	r3, [pc, #128]	; (800494c <lifetime+0x9c>)
 80048cc:	613b      	str	r3, [r7, #16]
//1.0793e-06   6.3147e-03   3.5973e+02


	float currentc;

	currentc=p1*temperature*temperature+p2*temperature+p3;
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	69b8      	ldr	r0, [r7, #24]
 80048d2:	f7fc f9af 	bl	8000c34 <__aeabi_fmul>
 80048d6:	1c03      	adds	r3, r0, #0
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	1c18      	adds	r0, r3, #0
 80048dc:	f7fc f9aa 	bl	8000c34 <__aeabi_fmul>
 80048e0:	1c03      	adds	r3, r0, #0
 80048e2:	1c1c      	adds	r4, r3, #0
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f7fc f9a4 	bl	8000c34 <__aeabi_fmul>
 80048ec:	1c03      	adds	r3, r0, #0
 80048ee:	1c19      	adds	r1, r3, #0
 80048f0:	1c20      	adds	r0, r4, #0
 80048f2:	f7fb fe39 	bl	8000568 <__aeabi_fadd>
 80048f6:	1c03      	adds	r3, r0, #0
 80048f8:	1c19      	adds	r1, r3, #0
 80048fa:	6938      	ldr	r0, [r7, #16]
 80048fc:	f7fb fe34 	bl	8000568 <__aeabi_fadd>
 8004900:	1c03      	adds	r3, r0, #0
 8004902:	60fb      	str	r3, [r7, #12]
	life_cal=(u_int16_t)(10000-50000*(current-currentc)/current);
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fc faba 	bl	8000e80 <__aeabi_fsub>
 800490c:	1c03      	adds	r3, r0, #0
 800490e:	4910      	ldr	r1, [pc, #64]	; (8004950 <lifetime+0xa0>)
 8004910:	1c18      	adds	r0, r3, #0
 8004912:	f7fc f98f 	bl	8000c34 <__aeabi_fmul>
 8004916:	1c03      	adds	r3, r0, #0
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	1c18      	adds	r0, r3, #0
 800491c:	f7fb ffc2 	bl	80008a4 <__aeabi_fdiv>
 8004920:	1c03      	adds	r3, r0, #0
 8004922:	1c19      	adds	r1, r3, #0
 8004924:	480b      	ldr	r0, [pc, #44]	; (8004954 <lifetime+0xa4>)
 8004926:	f7fc faab 	bl	8000e80 <__aeabi_fsub>
 800492a:	1c03      	adds	r3, r0, #0
 800492c:	197c      	adds	r4, r7, r5
 800492e:	1c18      	adds	r0, r3, #0
 8004930:	f7fb fd18 	bl	8000364 <__aeabi_f2uiz>
 8004934:	0003      	movs	r3, r0
 8004936:	8023      	strh	r3, [r4, #0]
//	if(life_cal>10000);
//		life_cal=10000;
	return life_cal;
 8004938:	197b      	adds	r3, r7, r5
 800493a:	881b      	ldrh	r3, [r3, #0]
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b008      	add	sp, #32
 8004942:	bdb0      	pop	{r4, r5, r7, pc}
 8004944:	35e24715 	.word	0x35e24715
 8004948:	3b21b41a 	.word	0x3b21b41a
 800494c:	43cc90a4 	.word	0x43cc90a4
 8004950:	47435000 	.word	0x47435000
 8004954:	461c4000 	.word	0x461c4000

08004958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800495c:	46c0      	nop			; (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <HAL_MspInit+0x5c>)
 800496c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <HAL_MspInit+0x5c>)
 8004970:	2101      	movs	r1, #1
 8004972:	430a      	orrs	r2, r1
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
 8004976:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_MspInit+0x5c>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	2201      	movs	r2, #1
 800497c:	4013      	ands	r3, r2
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004982:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <HAL_MspInit+0x5c>)
 8004984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <HAL_MspInit+0x5c>)
 8004988:	2180      	movs	r1, #128	; 0x80
 800498a:	0549      	lsls	r1, r1, #21
 800498c:	430a      	orrs	r2, r1
 800498e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_MspInit+0x5c>)
 8004992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004994:	2380      	movs	r3, #128	; 0x80
 8004996:	055b      	lsls	r3, r3, #21
 8004998:	4013      	ands	r3, r2
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 1, 0);
 800499e:	2200      	movs	r2, #0
 80049a0:	2101      	movs	r1, #1
 80049a2:	2001      	movs	r0, #1
 80049a4:	f001 feac 	bl	8006700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80049a8:	2001      	movs	r0, #1
 80049aa:	f001 febe 	bl	800672a <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 fb92 	bl	80050dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000

080049c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b099      	sub	sp, #100	; 0x64
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	234c      	movs	r3, #76	; 0x4c
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	0018      	movs	r0, r3
 80049d2:	2314      	movs	r3, #20
 80049d4:	001a      	movs	r2, r3
 80049d6:	2100      	movs	r1, #0
 80049d8:	f007 fa2c 	bl	800be34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049dc:	2418      	movs	r4, #24
 80049de:	193b      	adds	r3, r7, r4
 80049e0:	0018      	movs	r0, r3
 80049e2:	2334      	movs	r3, #52	; 0x34
 80049e4:	001a      	movs	r2, r3
 80049e6:	2100      	movs	r1, #0
 80049e8:	f007 fa24 	bl	800be34 <memset>
  if(hadc->Instance==ADC1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a48      	ldr	r2, [pc, #288]	; (8004b14 <HAL_ADC_MspInit+0x150>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d000      	beq.n	80049f8 <HAL_ADC_MspInit+0x34>
 80049f6:	e088      	b.n	8004b0a <HAL_ADC_MspInit+0x146>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80049f8:	193b      	adds	r3, r7, r4
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	01d2      	lsls	r2, r2, #7
 80049fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004a00:	193b      	adds	r3, r7, r4
 8004a02:	2200      	movs	r2, #0
 8004a04:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a06:	193b      	adds	r3, r7, r4
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f004 f927 	bl	8008c5c <HAL_RCCEx_PeriphCLKConfig>
 8004a0e:	1e03      	subs	r3, r0, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8004a12:	f7ff ffa1 	bl	8004958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004a16:	4b40      	ldr	r3, [pc, #256]	; (8004b18 <HAL_ADC_MspInit+0x154>)
 8004a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1a:	4b3f      	ldr	r3, [pc, #252]	; (8004b18 <HAL_ADC_MspInit+0x154>)
 8004a1c:	2180      	movs	r1, #128	; 0x80
 8004a1e:	0349      	lsls	r1, r1, #13
 8004a20:	430a      	orrs	r2, r1
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
 8004a24:	4b3c      	ldr	r3, [pc, #240]	; (8004b18 <HAL_ADC_MspInit+0x154>)
 8004a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	035b      	lsls	r3, r3, #13
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a32:	4b39      	ldr	r3, [pc, #228]	; (8004b18 <HAL_ADC_MspInit+0x154>)
 8004a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a36:	4b38      	ldr	r3, [pc, #224]	; (8004b18 <HAL_ADC_MspInit+0x154>)
 8004a38:	2101      	movs	r1, #1
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <HAL_ADC_MspInit+0x154>)
 8004a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a42:	2201      	movs	r2, #1
 8004a44:	4013      	ands	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a4a:	4b33      	ldr	r3, [pc, #204]	; (8004b18 <HAL_ADC_MspInit+0x154>)
 8004a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4e:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <HAL_ADC_MspInit+0x154>)
 8004a50:	2102      	movs	r1, #2
 8004a52:	430a      	orrs	r2, r1
 8004a54:	635a      	str	r2, [r3, #52]	; 0x34
 8004a56:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <HAL_ADC_MspInit+0x154>)
 8004a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004a62:	244c      	movs	r4, #76	; 0x4c
 8004a64:	193b      	adds	r3, r7, r4
 8004a66:	224f      	movs	r2, #79	; 0x4f
 8004a68:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a6a:	193b      	adds	r3, r7, r4
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a70:	193b      	adds	r3, r7, r4
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a76:	193a      	adds	r2, r7, r4
 8004a78:	23a0      	movs	r3, #160	; 0xa0
 8004a7a:	05db      	lsls	r3, r3, #23
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f002 fe2c 	bl	80076dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004a84:	193b      	adds	r3, r7, r4
 8004a86:	2205      	movs	r2, #5
 8004a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a8a:	193b      	adds	r3, r7, r4
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a90:	193b      	adds	r3, r7, r4
 8004a92:	2200      	movs	r2, #0
 8004a94:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a96:	193b      	adds	r3, r7, r4
 8004a98:	4a20      	ldr	r2, [pc, #128]	; (8004b1c <HAL_ADC_MspInit+0x158>)
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	f002 fe1d 	bl	80076dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004aa2:	4b1f      	ldr	r3, [pc, #124]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <HAL_ADC_MspInit+0x160>)
 8004aa6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004aaa:	2205      	movs	r2, #5
 8004aac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aae:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ab4:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004aba:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004abc:	2280      	movs	r2, #128	; 0x80
 8004abe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004ac0:	4b17      	ldr	r3, [pc, #92]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	0092      	lsls	r2, r2, #2
 8004ac6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004aca:	2280      	movs	r2, #128	; 0x80
 8004acc:	0112      	lsls	r2, r2, #4
 8004ace:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004ad6:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004ad8:	22c0      	movs	r2, #192	; 0xc0
 8004ada:	0192      	lsls	r2, r2, #6
 8004adc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f002 f93d 	bl	8006d60 <HAL_DMA_Init>
 8004ae6:	1e03      	subs	r3, r0, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8004aea:	f7ff ff35 	bl	8004958 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004af2:	651a      	str	r2, [r3, #80]	; 0x50
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_ADC_MspInit+0x15c>)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 8004afa:	2200      	movs	r2, #0
 8004afc:	2101      	movs	r1, #1
 8004afe:	200c      	movs	r0, #12
 8004b00:	f001 fdfe 	bl	8006700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8004b04:	200c      	movs	r0, #12
 8004b06:	f001 fe10 	bl	800672a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b019      	add	sp, #100	; 0x64
 8004b10:	bd90      	pop	{r4, r7, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	40012400 	.word	0x40012400
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	50000400 	.word	0x50000400
 8004b20:	2000035c 	.word	0x2000035c
 8004b24:	40020008 	.word	0x40020008

08004b28 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <HAL_CRC_MspInit+0x38>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10d      	bne.n	8004b56 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <HAL_CRC_MspInit+0x3c>)
 8004b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3e:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <HAL_CRC_MspInit+0x3c>)
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	0149      	lsls	r1, r1, #5
 8004b44:	430a      	orrs	r2, r1
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_CRC_MspInit+0x3c>)
 8004b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	015b      	lsls	r3, r3, #5
 8004b50:	4013      	ands	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b004      	add	sp, #16
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	40023000 	.word	0x40023000
 8004b64:	40021000 	.word	0x40021000

08004b68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b08b      	sub	sp, #44	; 0x2c
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b70:	2414      	movs	r4, #20
 8004b72:	193b      	adds	r3, r7, r4
 8004b74:	0018      	movs	r0, r3
 8004b76:	2314      	movs	r3, #20
 8004b78:	001a      	movs	r2, r3
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	f007 f95a 	bl	800be34 <memset>
  if(hdac->Instance==DAC1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <HAL_DAC_MspInit+0x90>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d131      	bne.n	8004bee <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <HAL_DAC_MspInit+0x94>)
 8004b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_DAC_MspInit+0x94>)
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	0589      	lsls	r1, r1, #22
 8004b94:	430a      	orrs	r2, r1
 8004b96:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b98:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <HAL_DAC_MspInit+0x94>)
 8004b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	059b      	lsls	r3, r3, #22
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_DAC_MspInit+0x94>)
 8004ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <HAL_DAC_MspInit+0x94>)
 8004bac:	2101      	movs	r1, #1
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_DAC_MspInit+0x94>)
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004bbe:	193b      	adds	r3, r7, r4
 8004bc0:	2230      	movs	r2, #48	; 0x30
 8004bc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bc4:	193b      	adds	r3, r7, r4
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	193b      	adds	r3, r7, r4
 8004bcc:	2200      	movs	r2, #0
 8004bce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd0:	193a      	adds	r2, r7, r4
 8004bd2:	23a0      	movs	r3, #160	; 0xa0
 8004bd4:	05db      	lsls	r3, r3, #23
 8004bd6:	0011      	movs	r1, r2
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f002 fd7f 	bl	80076dc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 1, 0);
 8004bde:	2200      	movs	r2, #0
 8004be0:	2101      	movs	r1, #1
 8004be2:	2011      	movs	r0, #17
 8004be4:	f001 fd8c 	bl	8006700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8004be8:	2011      	movs	r0, #17
 8004bea:	f001 fd9e 	bl	800672a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b00b      	add	sp, #44	; 0x2c
 8004bf4:	bd90      	pop	{r4, r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	40007400 	.word	0x40007400
 8004bfc:	40021000 	.word	0x40021000

08004c00 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b091      	sub	sp, #68	; 0x44
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c08:	240c      	movs	r4, #12
 8004c0a:	193b      	adds	r3, r7, r4
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	2334      	movs	r3, #52	; 0x34
 8004c10:	001a      	movs	r2, r3
 8004c12:	2100      	movs	r1, #0
 8004c14:	f007 f90e 	bl	800be34 <memset>
  if(hlptim->Instance==LPTIM1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <HAL_LPTIM_MspInit+0x74>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d124      	bne.n	8004c6c <HAL_LPTIM_MspInit+0x6c>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8004c22:	193b      	adds	r3, r7, r4
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	0092      	lsls	r2, r2, #2
 8004c28:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8004c2a:	193b      	adds	r3, r7, r4
 8004c2c:	2280      	movs	r2, #128	; 0x80
 8004c2e:	02d2      	lsls	r2, r2, #11
 8004c30:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c32:	193b      	adds	r3, r7, r4
 8004c34:	0018      	movs	r0, r3
 8004c36:	f004 f811 	bl	8008c5c <HAL_RCCEx_PeriphCLKConfig>
 8004c3a:	1e03      	subs	r3, r0, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_LPTIM_MspInit+0x42>
    {
      Error_Handler();
 8004c3e:	f7ff fe8b 	bl	8004958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <HAL_LPTIM_MspInit+0x78>)
 8004c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_LPTIM_MspInit+0x78>)
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	0609      	lsls	r1, r1, #24
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_LPTIM_MspInit+0x78>)
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	0fdb      	lsrs	r3, r3, #31
 8004c56:	07db      	lsls	r3, r3, #31
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 1, 0);
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2101      	movs	r1, #1
 8004c60:	2011      	movs	r0, #17
 8004c62:	f001 fd4d 	bl	8006700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8004c66:	2011      	movs	r0, #17
 8004c68:	f001 fd5f 	bl	800672a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b011      	add	sp, #68	; 0x44
 8004c72:	bd90      	pop	{r4, r7, pc}
 8004c74:	40007c00 	.word	0x40007c00
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a0e      	ldr	r2, [pc, #56]	; (8004cc4 <HAL_TIM_Base_MspInit+0x48>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d115      	bne.n	8004cba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8004c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	0289      	lsls	r1, r1, #10
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8004c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	029b      	lsls	r3, r3, #10
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 2, 0);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2102      	movs	r1, #2
 8004cae:	2015      	movs	r0, #21
 8004cb0:	f001 fd26 	bl	8006700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004cb4:	2015      	movs	r0, #21
 8004cb6:	f001 fd38 	bl	800672a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b004      	add	sp, #16
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	40014400 	.word	0x40014400
 8004cc8:	40021000 	.word	0x40021000

08004ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b08b      	sub	sp, #44	; 0x2c
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd4:	2414      	movs	r4, #20
 8004cd6:	193b      	adds	r3, r7, r4
 8004cd8:	0018      	movs	r0, r3
 8004cda:	2314      	movs	r3, #20
 8004cdc:	001a      	movs	r2, r3
 8004cde:	2100      	movs	r1, #0
 8004ce0:	f007 f8a8 	bl	800be34 <memset>
  if(huart->Instance==USART3)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a34      	ldr	r2, [pc, #208]	; (8004dbc <HAL_UART_MspInit+0xf0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d162      	bne.n	8004db4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cee:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <HAL_UART_MspInit+0xf4>)
 8004cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf2:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <HAL_UART_MspInit+0xf4>)
 8004cf4:	2180      	movs	r1, #128	; 0x80
 8004cf6:	02c9      	lsls	r1, r1, #11
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cfc:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <HAL_UART_MspInit+0xf4>)
 8004cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	02db      	lsls	r3, r3, #11
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d0a:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <HAL_UART_MspInit+0xf4>)
 8004d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0e:	4b2c      	ldr	r3, [pc, #176]	; (8004dc0 <HAL_UART_MspInit+0xf4>)
 8004d10:	2102      	movs	r1, #2
 8004d12:	430a      	orrs	r2, r1
 8004d14:	635a      	str	r2, [r3, #52]	; 0x34
 8004d16:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_UART_MspInit+0xf4>)
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_RX
    PB8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	22c0      	movs	r2, #192	; 0xc0
 8004d26:	0092      	lsls	r2, r2, #2
 8004d28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2a:	0021      	movs	r1, r4
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	2202      	movs	r2, #2
 8004d30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	2200      	movs	r2, #0
 8004d36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d38:	187b      	adds	r3, r7, r1
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	2204      	movs	r2, #4
 8004d42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d44:	187b      	adds	r3, r7, r1
 8004d46:	4a1f      	ldr	r2, [pc, #124]	; (8004dc4 <HAL_UART_MspInit+0xf8>)
 8004d48:	0019      	movs	r1, r3
 8004d4a:	0010      	movs	r0, r2
 8004d4c:	f002 fcc6 	bl	80076dc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d52:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <HAL_UART_MspInit+0x100>)
 8004d54:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004d56:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d58:	2237      	movs	r2, #55	; 0x37
 8004d5a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d5e:	2210      	movs	r2, #16
 8004d60:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d62:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d68:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d6a:	2280      	movs	r2, #128	; 0x80
 8004d6c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d6e:	4b16      	ldr	r3, [pc, #88]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d74:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d82:	2280      	movs	r2, #128	; 0x80
 8004d84:	0152      	lsls	r2, r2, #5
 8004d86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f001 ffe8 	bl	8006d60 <HAL_DMA_Init>
 8004d90:	1e03      	subs	r3, r0, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004d94:	f7ff fde0 	bl	8004958 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a0b      	ldr	r2, [pc, #44]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004d9c:	67da      	str	r2, [r3, #124]	; 0x7c
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <HAL_UART_MspInit+0xfc>)
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 8004da4:	2200      	movs	r2, #0
 8004da6:	2102      	movs	r1, #2
 8004da8:	201d      	movs	r0, #29
 8004daa:	f001 fca9 	bl	8006700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8004dae:	201d      	movs	r0, #29
 8004db0:	f001 fcbb 	bl	800672a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b00b      	add	sp, #44	; 0x2c
 8004dba:	bd90      	pop	{r4, r7, pc}
 8004dbc:	40004800 	.word	0x40004800
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	50000400 	.word	0x50000400
 8004dc8:	20000508 	.word	0x20000508
 8004dcc:	4002001c 	.word	0x4002001c

08004dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dd4:	e7fe      	b.n	8004dd4 <NMI_Handler+0x4>

08004dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dda:	e7fe      	b.n	8004dda <HardFault_Handler+0x4>

08004ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004de0:	46c0      	nop			; (mov r8, r8)
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004df4:	f000 f932 	bl	800505c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8004e02:	f003 fa35 	bl	8008270 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	0018      	movs	r0, r3
 8004e16:	f002 fdff 	bl	8007a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <DMA1_Channel1_IRQHandler+0x14>)
 8004e26:	0018      	movs	r0, r3
 8004e28:	f002 f976 	bl	8007118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	2000035c 	.word	0x2000035c

08004e38 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <DMA1_Channel2_3_IRQHandler+0x14>)
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f002 f96a 	bl	8007118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	20000508 	.word	0x20000508

08004e50 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <ADC1_COMP_IRQHandler+0x14>)
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 fd74 	bl	8005944 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004e5c:	46c0      	nop			; (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	200002f8 	.word	0x200002f8

08004e68 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <TIM6_DAC_LPTIM1_IRQHandler+0x1c>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f001 fdc0 	bl	80069f4 <HAL_DAC_IRQHandler>
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <TIM6_DAC_LPTIM1_IRQHandler+0x20>)
 8004e76:	0018      	movs	r0, r3
 8004e78:	f002 ff24 	bl	8007cc4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	200003dc 	.word	0x200003dc
 8004e88:	200003f0 	.word	0x200003f0

08004e8c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <TIM16_IRQHandler+0x14>)
 8004e92:	0018      	movs	r0, r3
 8004e94:	f004 f9ae 	bl	80091f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	20000428 	.word	0x20000428

08004ea4 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <USART3_4_LPUART1_IRQHandler+0x14>)
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f005 f89c 	bl	8009fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	20000474 	.word	0x20000474

08004ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ec4:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <_sbrk+0x5c>)
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <_sbrk+0x60>)
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ed0:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <_sbrk+0x64>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <_sbrk+0x64>)
 8004eda:	4a12      	ldr	r2, [pc, #72]	; (8004f24 <_sbrk+0x68>)
 8004edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ede:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <_sbrk+0x64>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d207      	bcs.n	8004efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004eec:	f006 ff78 	bl	800bde0 <__errno>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	220c      	movs	r2, #12
 8004ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	425b      	negs	r3, r3
 8004efa:	e009      	b.n	8004f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004efc:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <_sbrk+0x64>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f02:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <_sbrk+0x64>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	18d2      	adds	r2, r2, r3
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <_sbrk+0x64>)
 8004f0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b006      	add	sp, #24
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20009000 	.word	0x20009000
 8004f1c:	00000400 	.word	0x00000400
 8004f20:	200018a8 	.word	0x200018a8
 8004f24:	200018e0 	.word	0x200018e0

08004f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f2c:	46c0      	nop			; (mov r8, r8)
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f34:	480d      	ldr	r0, [pc, #52]	; (8004f6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004f38:	f7ff fff6 	bl	8004f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f3c:	480c      	ldr	r0, [pc, #48]	; (8004f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f3e:	490d      	ldr	r1, [pc, #52]	; (8004f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f40:	4a0d      	ldr	r2, [pc, #52]	; (8004f78 <LoopForever+0xe>)
  movs r3, #0
 8004f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f44:	e002      	b.n	8004f4c <LoopCopyDataInit>

08004f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f4a:	3304      	adds	r3, #4

08004f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f50:	d3f9      	bcc.n	8004f46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f52:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f54:	4c0a      	ldr	r4, [pc, #40]	; (8004f80 <LoopForever+0x16>)
  movs r3, #0
 8004f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f58:	e001      	b.n	8004f5e <LoopFillZerobss>

08004f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f5c:	3204      	adds	r2, #4

08004f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f60:	d3fb      	bcc.n	8004f5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004f62:	f006 ff43 	bl	800bdec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004f66:	f7fe fb37 	bl	80035d8 <main>

08004f6a <LoopForever>:

LoopForever:
  b LoopForever
 8004f6a:	e7fe      	b.n	8004f6a <LoopForever>
  ldr   r0, =_estack
 8004f6c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f74:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004f78:	0800d0d0 	.word	0x0800d0d0
  ldr r2, =_sbss
 8004f7c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004f80:	200018dc 	.word	0x200018dc

08004f84 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f84:	e7fe      	b.n	8004f84 <CEC_IRQHandler>
	...

08004f88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f8e:	1dfb      	adds	r3, r7, #7
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_Init+0x3c>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_Init+0x3c>)
 8004f9a:	2180      	movs	r1, #128	; 0x80
 8004f9c:	0049      	lsls	r1, r1, #1
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f000 f810 	bl	8004fc8 <HAL_InitTick>
 8004fa8:	1e03      	subs	r3, r0, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004fac:	1dfb      	adds	r3, r7, #7
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e001      	b.n	8004fb8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004fb4:	f7ff fcd6 	bl	8004964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004fb8:	1dfb      	adds	r3, r7, #7
 8004fba:	781b      	ldrb	r3, [r3, #0]
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40022000 	.word	0x40022000

08004fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004fd0:	230f      	movs	r3, #15
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <HAL_InitTick+0x88>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d02b      	beq.n	8005038 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004fe0:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <HAL_InitTick+0x8c>)
 8004fe2:	681c      	ldr	r4, [r3, #0]
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_InitTick+0x88>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	0019      	movs	r1, r3
 8004fea:	23fa      	movs	r3, #250	; 0xfa
 8004fec:	0098      	lsls	r0, r3, #2
 8004fee:	f7fb f895 	bl	800011c <__udivsi3>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	0019      	movs	r1, r3
 8004ff6:	0020      	movs	r0, r4
 8004ff8:	f7fb f890 	bl	800011c <__udivsi3>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	0018      	movs	r0, r3
 8005000:	f001 fba3 	bl	800674a <HAL_SYSTICK_Config>
 8005004:	1e03      	subs	r3, r0, #0
 8005006:	d112      	bne.n	800502e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b03      	cmp	r3, #3
 800500c:	d80a      	bhi.n	8005024 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	2301      	movs	r3, #1
 8005012:	425b      	negs	r3, r3
 8005014:	2200      	movs	r2, #0
 8005016:	0018      	movs	r0, r3
 8005018:	f001 fb72 	bl	8006700 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <HAL_InitTick+0x90>)
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e00d      	b.n	8005040 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005024:	230f      	movs	r3, #15
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e008      	b.n	8005040 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800502e:	230f      	movs	r3, #15
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e003      	b.n	8005040 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005038:	230f      	movs	r3, #15
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	2201      	movs	r2, #1
 800503e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005040:	230f      	movs	r3, #15
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	781b      	ldrb	r3, [r3, #0]
}
 8005046:	0018      	movs	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	b005      	add	sp, #20
 800504c:	bd90      	pop	{r4, r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	200000f0 	.word	0x200000f0
 8005054:	200000e8 	.word	0x200000e8
 8005058:	200000ec 	.word	0x200000ec

0800505c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <HAL_IncTick+0x1c>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	001a      	movs	r2, r3
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_IncTick+0x20>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	18d2      	adds	r2, r2, r3
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <HAL_IncTick+0x20>)
 800506e:	601a      	str	r2, [r3, #0]
}
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	200000f0 	.word	0x200000f0
 800507c:	200018ac 	.word	0x200018ac

08005080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  return uwTick;
 8005084:	4b02      	ldr	r3, [pc, #8]	; (8005090 <HAL_GetTick+0x10>)
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	0018      	movs	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	200018ac 	.word	0x200018ac

08005094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800509c:	f7ff fff0 	bl	8005080 <HAL_GetTick>
 80050a0:	0003      	movs	r3, r0
 80050a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	d005      	beq.n	80050ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050ae:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <HAL_Delay+0x44>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	001a      	movs	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	189b      	adds	r3, r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	f7ff ffe0 	bl	8005080 <HAL_GetTick>
 80050c0:	0002      	movs	r2, r0
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d8f7      	bhi.n	80050bc <HAL_Delay+0x28>
  {
  }
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b004      	add	sp, #16
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	200000f0 	.word	0x200000f0

080050dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a06      	ldr	r2, [pc, #24]	; (8005104 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]
}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b002      	add	sp, #8
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	40010000 	.word	0x40010000
 8005104:	fffff9ff 	.word	0xfffff9ff

08005108 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a05      	ldr	r2, [pc, #20]	; (800512c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005118:	401a      	ands	r2, r3
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]
}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b002      	add	sp, #8
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	fe3fffff 	.word	0xfe3fffff

08005130 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	23e0      	movs	r3, #224	; 0xe0
 800513e:	045b      	lsls	r3, r3, #17
 8005140:	4013      	ands	r3, r2
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b002      	add	sp, #8
 8005148:	bd80      	pop	{r7, pc}

0800514a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	2104      	movs	r1, #4
 800515e:	400a      	ands	r2, r1
 8005160:	2107      	movs	r1, #7
 8005162:	4091      	lsls	r1, r2
 8005164:	000a      	movs	r2, r1
 8005166:	43d2      	mvns	r2, r2
 8005168:	401a      	ands	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2104      	movs	r1, #4
 800516e:	400b      	ands	r3, r1
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4099      	lsls	r1, r3
 8005174:	000b      	movs	r3, r1
 8005176:	431a      	orrs	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b004      	add	sp, #16
 8005182:	bd80      	pop	{r7, pc}

08005184 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	2104      	movs	r1, #4
 8005196:	400a      	ands	r2, r1
 8005198:	2107      	movs	r1, #7
 800519a:	4091      	lsls	r1, r2
 800519c:	000a      	movs	r2, r1
 800519e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2104      	movs	r1, #4
 80051a4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80051a6:	40da      	lsrs	r2, r3
 80051a8:	0013      	movs	r3, r2
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b002      	add	sp, #8
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	23c0      	movs	r3, #192	; 0xc0
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	4013      	ands	r3, r2
 80051c4:	d101      	bne.n	80051ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b002      	add	sp, #8
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	211f      	movs	r1, #31
 80051e8:	400a      	ands	r2, r1
 80051ea:	210f      	movs	r1, #15
 80051ec:	4091      	lsls	r1, r2
 80051ee:	000a      	movs	r2, r1
 80051f0:	43d2      	mvns	r2, r2
 80051f2:	401a      	ands	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	0e9b      	lsrs	r3, r3, #26
 80051f8:	210f      	movs	r1, #15
 80051fa:	4019      	ands	r1, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	201f      	movs	r0, #31
 8005200:	4003      	ands	r3, r0
 8005202:	4099      	lsls	r1, r3
 8005204:	000b      	movs	r3, r1
 8005206:	431a      	orrs	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	b004      	add	sp, #16
 8005212:	bd80      	pop	{r7, pc}

08005214 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	035b      	lsls	r3, r3, #13
 8005226:	0b5b      	lsrs	r3, r3, #13
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	46bd      	mov	sp, r7
 8005232:	b002      	add	sp, #8
 8005234:	bd80      	pop	{r7, pc}

08005236 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	0352      	lsls	r2, r2, #13
 8005248:	0b52      	lsrs	r2, r2, #13
 800524a:	43d2      	mvns	r2, r2
 800524c:	401a      	ands	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	46bd      	mov	sp, r7
 8005256:	b002      	add	sp, #8
 8005258:	bd80      	pop	{r7, pc}

0800525a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	2203      	movs	r2, #3
 8005268:	4013      	ands	r3, r2
}
 800526a:	0018      	movs	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	b002      	add	sp, #8
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	0212      	lsls	r2, r2, #8
 8005288:	43d2      	mvns	r2, r2
 800528a:	401a      	ands	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	400b      	ands	r3, r1
 8005294:	4904      	ldr	r1, [pc, #16]	; (80052a8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005296:	400b      	ands	r3, r1
 8005298:	431a      	orrs	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b004      	add	sp, #16
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	07ffff00 	.word	0x07ffff00

080052ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4a05      	ldr	r2, [pc, #20]	; (80052d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	2280      	movs	r2, #128	; 0x80
 80052be:	0552      	lsls	r2, r2, #21
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b002      	add	sp, #8
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	6fffffe8 	.word	0x6fffffe8

080052d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	055b      	lsls	r3, r3, #21
 80052e4:	401a      	ands	r2, r3
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	055b      	lsls	r3, r3, #21
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d101      	bne.n	80052f2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b002      	add	sp, #8
 80052fa:	bd80      	pop	{r7, pc}

080052fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4a04      	ldr	r2, [pc, #16]	; (800531c <LL_ADC_Enable+0x20>)
 800530a:	4013      	ands	r3, r2
 800530c:	2201      	movs	r2, #1
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b002      	add	sp, #8
 800531a:	bd80      	pop	{r7, pc}
 800531c:	7fffffe8 	.word	0x7fffffe8

08005320 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <LL_ADC_Disable+0x20>)
 800532e:	4013      	ands	r3, r2
 8005330:	2202      	movs	r2, #2
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b002      	add	sp, #8
 800533e:	bd80      	pop	{r7, pc}
 8005340:	7fffffe8 	.word	0x7fffffe8

08005344 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2201      	movs	r2, #1
 8005352:	4013      	ands	r3, r2
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <LL_ADC_IsEnabled+0x18>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <LL_ADC_IsEnabled+0x1a>
 800535c:	2300      	movs	r3, #0
}
 800535e:	0018      	movs	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	b002      	add	sp, #8
 8005364:	bd80      	pop	{r7, pc}

08005366 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	2b02      	cmp	r3, #2
 8005378:	d101      	bne.n	800537e <LL_ADC_IsDisableOngoing+0x18>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <LL_ADC_IsDisableOngoing+0x1a>
 800537e:	2300      	movs	r3, #0
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b002      	add	sp, #8
 8005386:	bd80      	pop	{r7, pc}

08005388 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4a04      	ldr	r2, [pc, #16]	; (80053a8 <LL_ADC_REG_StartConversion+0x20>)
 8005396:	4013      	ands	r3, r2
 8005398:	2204      	movs	r2, #4
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b002      	add	sp, #8
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	7fffffe8 	.word	0x7fffffe8

080053ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a04      	ldr	r2, [pc, #16]	; (80053cc <LL_ADC_REG_StopConversion+0x20>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	2210      	movs	r2, #16
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b002      	add	sp, #8
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	7fffffe8 	.word	0x7fffffe8

080053d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2204      	movs	r2, #4
 80053de:	4013      	ands	r3, r2
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d101      	bne.n	80053e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b002      	add	sp, #8
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053fc:	231f      	movs	r3, #31
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e17f      	b.n	800571a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	0018      	movs	r0, r3
 8005426:	f7ff facd 	bl	80049c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2254      	movs	r2, #84	; 0x54
 8005434:	2100      	movs	r1, #0
 8005436:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	0018      	movs	r0, r3
 800543e:	f7ff ff49 	bl	80052d4 <LL_ADC_IsInternalRegulatorEnabled>
 8005442:	1e03      	subs	r3, r0, #0
 8005444:	d115      	bne.n	8005472 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	0018      	movs	r0, r3
 800544c:	f7ff ff2e 	bl	80052ac <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005450:	4bb4      	ldr	r3, [pc, #720]	; (8005724 <HAL_ADC_Init+0x330>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	49b4      	ldr	r1, [pc, #720]	; (8005728 <HAL_ADC_Init+0x334>)
 8005456:	0018      	movs	r0, r3
 8005458:	f7fa fe60 	bl	800011c <__udivsi3>
 800545c:	0003      	movs	r3, r0
 800545e:	3301      	adds	r3, #1
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005464:	e002      	b.n	800546c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3b01      	subs	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f9      	bne.n	8005466 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	0018      	movs	r0, r3
 8005478:	f7ff ff2c 	bl	80052d4 <LL_ADC_IsInternalRegulatorEnabled>
 800547c:	1e03      	subs	r3, r0, #0
 800547e:	d10f      	bne.n	80054a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005484:	2210      	movs	r2, #16
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005490:	2201      	movs	r2, #1
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005498:	231f      	movs	r3, #31
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	0018      	movs	r0, r3
 80054a6:	f7ff ff93 	bl	80053d0 <LL_ADC_REG_IsConversionOngoing>
 80054aa:	0003      	movs	r3, r0
 80054ac:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b2:	2210      	movs	r2, #16
 80054b4:	4013      	ands	r3, r2
 80054b6:	d000      	beq.n	80054ba <HAL_ADC_Init+0xc6>
 80054b8:	e122      	b.n	8005700 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d000      	beq.n	80054c2 <HAL_ADC_Init+0xce>
 80054c0:	e11e      	b.n	8005700 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c6:	4a99      	ldr	r2, [pc, #612]	; (800572c <HAL_ADC_Init+0x338>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	2202      	movs	r2, #2
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7ff ff34 	bl	8005344 <LL_ADC_IsEnabled>
 80054dc:	1e03      	subs	r3, r0, #0
 80054de:	d000      	beq.n	80054e2 <HAL_ADC_Init+0xee>
 80054e0:	e0ad      	b.n	800563e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	7e1b      	ldrb	r3, [r3, #24]
 80054ea:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80054ec:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7e5b      	ldrb	r3, [r3, #25]
 80054f2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80054f4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	7e9b      	ldrb	r3, [r3, #26]
 80054fa:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80054fc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_ADC_Init+0x118>
 8005506:	2380      	movs	r3, #128	; 0x80
 8005508:	015b      	lsls	r3, r3, #5
 800550a:	e000      	b.n	800550e <HAL_ADC_Init+0x11a>
 800550c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800550e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005514:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	da04      	bge.n	8005528 <HAL_ADC_Init+0x134>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	e001      	b.n	800552c <HAL_ADC_Init+0x138>
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800552c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	212c      	movs	r1, #44	; 0x2c
 8005532:	5c5b      	ldrb	r3, [r3, r1]
 8005534:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005536:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	5c9b      	ldrb	r3, [r3, r2]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d115      	bne.n	8005574 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7e9b      	ldrb	r3, [r3, #26]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2280      	movs	r2, #128	; 0x80
 8005554:	0252      	lsls	r2, r2, #9
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	e00b      	b.n	8005574 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005560:	2220      	movs	r2, #32
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556c:	2201      	movs	r2, #1
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005580:	23e0      	movs	r3, #224	; 0xe0
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800558a:	4313      	orrs	r3, r2
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4a65      	ldr	r2, [pc, #404]	; (8005730 <HAL_ADC_Init+0x33c>)
 800559a:	4013      	ands	r3, r2
 800559c:	0019      	movs	r1, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	0f9b      	lsrs	r3, r3, #30
 80055ae:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80055b4:	4313      	orrs	r3, r2
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	223c      	movs	r2, #60	; 0x3c
 80055c0:	5c9b      	ldrb	r3, [r3, r2]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d111      	bne.n	80055ea <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	0f9b      	lsrs	r3, r3, #30
 80055cc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80055d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80055d8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80055de:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	2201      	movs	r2, #1
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	4a50      	ldr	r2, [pc, #320]	; (8005734 <HAL_ADC_Init+0x340>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	0019      	movs	r1, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	23c0      	movs	r3, #192	; 0xc0
 8005606:	061b      	lsls	r3, r3, #24
 8005608:	429a      	cmp	r2, r3
 800560a:	d018      	beq.n	800563e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	05db      	lsls	r3, r3, #23
 8005614:	429a      	cmp	r2, r3
 8005616:	d012      	beq.n	800563e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	061b      	lsls	r3, r3, #24
 8005620:	429a      	cmp	r2, r3
 8005622:	d00c      	beq.n	800563e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005624:	4b44      	ldr	r3, [pc, #272]	; (8005738 <HAL_ADC_Init+0x344>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a44      	ldr	r2, [pc, #272]	; (800573c <HAL_ADC_Init+0x348>)
 800562a:	4013      	ands	r3, r2
 800562c:	0019      	movs	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	23f0      	movs	r3, #240	; 0xf0
 8005634:	039b      	lsls	r3, r3, #14
 8005636:	401a      	ands	r2, r3
 8005638:	4b3f      	ldr	r3, [pc, #252]	; (8005738 <HAL_ADC_Init+0x344>)
 800563a:	430a      	orrs	r2, r1
 800563c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005646:	001a      	movs	r2, r3
 8005648:	2100      	movs	r1, #0
 800564a:	f7ff fd7e 	bl	800514a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	493a      	ldr	r1, [pc, #232]	; (8005740 <HAL_ADC_Init+0x34c>)
 8005658:	001a      	movs	r2, r3
 800565a:	f7ff fd76 	bl	800514a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2110      	movs	r1, #16
 8005672:	4249      	negs	r1, r1
 8005674:	430a      	orrs	r2, r1
 8005676:	629a      	str	r2, [r3, #40]	; 0x28
 8005678:	e018      	b.n	80056ac <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	039b      	lsls	r3, r3, #14
 8005682:	429a      	cmp	r2, r3
 8005684:	d112      	bne.n	80056ac <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	3b01      	subs	r3, #1
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	221c      	movs	r2, #28
 8005696:	4013      	ands	r3, r2
 8005698:	2210      	movs	r2, #16
 800569a:	4252      	negs	r2, r2
 800569c:	409a      	lsls	r2, r3
 800569e:	0011      	movs	r1, r2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2100      	movs	r1, #0
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7ff fd66 	bl	8005184 <LL_ADC_GetSamplingTimeCommonChannels>
 80056b8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80056be:	429a      	cmp	r2, r3
 80056c0:	d10b      	bne.n	80056da <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	2203      	movs	r2, #3
 80056ce:	4393      	bics	r3, r2
 80056d0:	2201      	movs	r2, #1
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80056d8:	e01c      	b.n	8005714 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056de:	2212      	movs	r2, #18
 80056e0:	4393      	bics	r3, r2
 80056e2:	2210      	movs	r2, #16
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ee:	2201      	movs	r2, #1
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80056f6:	231f      	movs	r3, #31
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80056fe:	e009      	b.n	8005714 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	2210      	movs	r2, #16
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800570c:	231f      	movs	r3, #31
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005714:	231f      	movs	r3, #31
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	781b      	ldrb	r3, [r3, #0]
}
 800571a:	0018      	movs	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	b008      	add	sp, #32
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	200000e8 	.word	0x200000e8
 8005728:	00030d40 	.word	0x00030d40
 800572c:	fffffefd 	.word	0xfffffefd
 8005730:	fffe0201 	.word	0xfffe0201
 8005734:	1ffffc02 	.word	0x1ffffc02
 8005738:	40012708 	.word	0x40012708
 800573c:	ffc3ffff 	.word	0xffc3ffff
 8005740:	07ffff04 	.word	0x07ffff04

08005744 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005744:	b5b0      	push	{r4, r5, r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	0018      	movs	r0, r3
 8005756:	f7ff fe3b 	bl	80053d0 <LL_ADC_REG_IsConversionOngoing>
 800575a:	1e03      	subs	r3, r0, #0
 800575c:	d16c      	bne.n	8005838 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2254      	movs	r2, #84	; 0x54
 8005762:	5c9b      	ldrb	r3, [r3, r2]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_ADC_Start_DMA+0x28>
 8005768:	2302      	movs	r3, #2
 800576a:	e06c      	b.n	8005846 <HAL_ADC_Start_DMA+0x102>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2254      	movs	r2, #84	; 0x54
 8005770:	2101      	movs	r1, #1
 8005772:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	4013      	ands	r3, r2
 800577e:	d113      	bne.n	80057a8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	0018      	movs	r0, r3
 8005786:	f7ff fddd 	bl	8005344 <LL_ADC_IsEnabled>
 800578a:	1e03      	subs	r3, r0, #0
 800578c:	d004      	beq.n	8005798 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	0018      	movs	r0, r3
 8005794:	f7ff fdc4 	bl	8005320 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2101      	movs	r1, #1
 80057a4:	430a      	orrs	r2, r1
 80057a6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80057a8:	2517      	movs	r5, #23
 80057aa:	197c      	adds	r4, r7, r5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	0018      	movs	r0, r3
 80057b0:	f000 fc12 	bl	8005fd8 <ADC_Enable>
 80057b4:	0003      	movs	r3, r0
 80057b6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80057b8:	002c      	movs	r4, r5
 80057ba:	193b      	adds	r3, r7, r4
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d13e      	bne.n	8005840 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	4a22      	ldr	r2, [pc, #136]	; (8005850 <HAL_ADC_Start_DMA+0x10c>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	2280      	movs	r2, #128	; 0x80
 80057cc:	0052      	lsls	r2, r2, #1
 80057ce:	431a      	orrs	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057de:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <HAL_ADC_Start_DMA+0x110>)
 80057e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <HAL_ADC_Start_DMA+0x114>)
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ee:	4a1b      	ldr	r2, [pc, #108]	; (800585c <HAL_ADC_Start_DMA+0x118>)
 80057f0:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	221c      	movs	r2, #28
 80057f8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2254      	movs	r2, #84	; 0x54
 80057fe:	2100      	movs	r1, #0
 8005800:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2110      	movs	r1, #16
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3340      	adds	r3, #64	; 0x40
 800581c:	0019      	movs	r1, r3
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	193c      	adds	r4, r7, r4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f001 fb26 	bl	8006e74 <HAL_DMA_Start_IT>
 8005828:	0003      	movs	r3, r0
 800582a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	0018      	movs	r0, r3
 8005832:	f7ff fda9 	bl	8005388 <LL_ADC_REG_StartConversion>
 8005836:	e003      	b.n	8005840 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005838:	2317      	movs	r3, #23
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	2202      	movs	r2, #2
 800583e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005840:	2317      	movs	r3, #23
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	781b      	ldrb	r3, [r3, #0]
}
 8005846:	0018      	movs	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	b006      	add	sp, #24
 800584c:	bdb0      	pop	{r4, r5, r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	fffff0fe 	.word	0xfffff0fe
 8005854:	080061a1 	.word	0x080061a1
 8005858:	08006269 	.word	0x08006269
 800585c:	08006287 	.word	0x08006287

08005860 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005860:	b5b0      	push	{r4, r5, r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2254      	movs	r2, #84	; 0x54
 800586c:	5c9b      	ldrb	r3, [r3, r2]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_ADC_Stop_DMA+0x16>
 8005872:	2302      	movs	r3, #2
 8005874:	e05f      	b.n	8005936 <HAL_ADC_Stop_DMA+0xd6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2254      	movs	r2, #84	; 0x54
 800587a:	2101      	movs	r1, #1
 800587c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800587e:	250f      	movs	r5, #15
 8005880:	197c      	adds	r4, r7, r5
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	0018      	movs	r0, r3
 8005886:	f000 fb65 	bl	8005f54 <ADC_ConversionStop>
 800588a:	0003      	movs	r3, r0
 800588c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800588e:	0029      	movs	r1, r5
 8005890:	187b      	adds	r3, r7, r1
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d147      	bne.n	8005928 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	2225      	movs	r2, #37	; 0x25
 800589e:	5c9b      	ldrb	r3, [r3, r2]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d112      	bne.n	80058cc <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058aa:	000d      	movs	r5, r1
 80058ac:	187c      	adds	r4, r7, r1
 80058ae:	0018      	movs	r0, r3
 80058b0:	f001 fb66 	bl	8006f80 <HAL_DMA_Abort>
 80058b4:	0003      	movs	r3, r0
 80058b6:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80058b8:	197b      	adds	r3, r7, r5
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c4:	2240      	movs	r2, #64	; 0x40
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2110      	movs	r1, #16
 80058d8:	438a      	bics	r2, r1
 80058da:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80058dc:	220f      	movs	r2, #15
 80058de:	18bb      	adds	r3, r7, r2
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d107      	bne.n	80058f6 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80058e6:	18bc      	adds	r4, r7, r2
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	0018      	movs	r0, r3
 80058ec:	f000 fbfa 	bl	80060e4 <ADC_Disable>
 80058f0:	0003      	movs	r3, r0
 80058f2:	7023      	strb	r3, [r4, #0]
 80058f4:	e003      	b.n	80058fe <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f000 fbf3 	bl	80060e4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80058fe:	230f      	movs	r3, #15
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d107      	bne.n	8005918 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <HAL_ADC_Stop_DMA+0xe0>)
 800590e:	4013      	ands	r3, r2
 8005910:	2201      	movs	r2, #1
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2101      	movs	r1, #1
 8005924:	438a      	bics	r2, r1
 8005926:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2254      	movs	r2, #84	; 0x54
 800592c:	2100      	movs	r1, #0
 800592e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005930:	230f      	movs	r3, #15
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	781b      	ldrb	r3, [r3, #0]
}
 8005936:	0018      	movs	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	b004      	add	sp, #16
 800593c:	bdb0      	pop	{r4, r5, r7, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	fffffefe 	.word	0xfffffefe

08005944 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2202      	movs	r2, #2
 8005964:	4013      	ands	r3, r2
 8005966:	d017      	beq.n	8005998 <HAL_ADC_IRQHandler+0x54>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2202      	movs	r2, #2
 800596c:	4013      	ands	r3, r2
 800596e:	d013      	beq.n	8005998 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005974:	2210      	movs	r2, #16
 8005976:	4013      	ands	r3, r2
 8005978:	d106      	bne.n	8005988 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	0018      	movs	r0, r3
 800598c:	f000 fdfc 	bl	8006588 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2202      	movs	r2, #2
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2204      	movs	r2, #4
 800599c:	4013      	ands	r3, r2
 800599e:	d003      	beq.n	80059a8 <HAL_ADC_IRQHandler+0x64>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2204      	movs	r2, #4
 80059a4:	4013      	ands	r3, r2
 80059a6:	d107      	bne.n	80059b8 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2208      	movs	r2, #8
 80059ac:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80059ae:	d04d      	beq.n	8005a4c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2208      	movs	r2, #8
 80059b4:	4013      	ands	r3, r2
 80059b6:	d049      	beq.n	8005a4c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	2210      	movs	r2, #16
 80059be:	4013      	ands	r3, r2
 80059c0:	d106      	bne.n	80059d0 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	2280      	movs	r2, #128	; 0x80
 80059c8:	0092      	lsls	r2, r2, #2
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f7ff fbec 	bl	80051b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80059da:	1e03      	subs	r3, r0, #0
 80059dc:	d02e      	beq.n	8005a3c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	7e9b      	ldrb	r3, [r3, #26]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d12a      	bne.n	8005a3c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2208      	movs	r2, #8
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d123      	bne.n	8005a3c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	0018      	movs	r0, r3
 80059fa:	f7ff fce9 	bl	80053d0 <LL_ADC_REG_IsConversionOngoing>
 80059fe:	1e03      	subs	r3, r0, #0
 8005a00:	d110      	bne.n	8005a24 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	210c      	movs	r1, #12
 8005a0e:	438a      	bics	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a16:	4a56      	ldr	r2, [pc, #344]	; (8005b70 <HAL_ADC_IRQHandler+0x22c>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	659a      	str	r2, [r3, #88]	; 0x58
 8005a22:	e00b      	b.n	8005a3c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a28:	2220      	movs	r2, #32
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	2201      	movs	r2, #1
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f7fe fbfe 	bl	8004240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	220c      	movs	r2, #12
 8005a4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2280      	movs	r2, #128	; 0x80
 8005a50:	4013      	ands	r3, r2
 8005a52:	d012      	beq.n	8005a7a <HAL_ADC_IRQHandler+0x136>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2280      	movs	r2, #128	; 0x80
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	0252      	lsls	r2, r2, #9
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 f889 	bl	8005b84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2280      	movs	r2, #128	; 0x80
 8005a78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	4013      	ands	r3, r2
 8005a82:	d014      	beq.n	8005aae <HAL_ADC_IRQHandler+0x16a>
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d00f      	beq.n	8005aae <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	2280      	movs	r2, #128	; 0x80
 8005a94:	0292      	lsls	r2, r2, #10
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f000 fd62 	bl	8006568 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2280      	movs	r2, #128	; 0x80
 8005aaa:	0052      	lsls	r2, r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d014      	beq.n	8005ae2 <HAL_ADC_IRQHandler+0x19e>
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4013      	ands	r3, r2
 8005ac0:	d00f      	beq.n	8005ae2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	02d2      	lsls	r2, r2, #11
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f000 fd50 	bl	8006578 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2280      	movs	r2, #128	; 0x80
 8005ade:	0092      	lsls	r2, r2, #2
 8005ae0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d02b      	beq.n	8005b42 <HAL_ADC_IRQHandler+0x1fe>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2210      	movs	r2, #16
 8005aee:	4013      	ands	r3, r2
 8005af0:	d027      	beq.n	8005b42 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d102      	bne.n	8005b00 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8005afa:	2301      	movs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	e008      	b.n	8005b12 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7ff fba8 	bl	800525a <LL_ADC_REG_GetDMATransfer>
 8005b0a:	1e03      	subs	r3, r0, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d110      	bne.n	8005b3a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	00d2      	lsls	r2, r2, #3
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	0018      	movs	r0, r3
 8005b36:	f000 f82d 	bl	8005b94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2210      	movs	r2, #16
 8005b40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	019b      	lsls	r3, r3, #6
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d00d      	beq.n	8005b68 <HAL_ADC_IRQHandler+0x224>
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	2380      	movs	r3, #128	; 0x80
 8005b50:	019b      	lsls	r3, r3, #6
 8005b52:	4013      	ands	r3, r2
 8005b54:	d008      	beq.n	8005b68 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f000 fd1d 	bl	8006598 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2280      	movs	r2, #128	; 0x80
 8005b64:	0192      	lsls	r2, r2, #6
 8005b66:	601a      	str	r2, [r3, #0]
  }
}
 8005b68:	46c0      	nop			; (mov r8, r8)
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b006      	add	sp, #24
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	fffffefe 	.word	0xfffffefe

08005b74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bae:	2317      	movs	r3, #23
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2254      	movs	r2, #84	; 0x54
 8005bbe:	5c9b      	ldrb	r3, [r3, r2]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x24>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e1c0      	b.n	8005f4a <HAL_ADC_ConfigChannel+0x3a6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2254      	movs	r2, #84	; 0x54
 8005bcc:	2101      	movs	r1, #1
 8005bce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7ff fbfb 	bl	80053d0 <LL_ADC_REG_IsConversionOngoing>
 8005bda:	1e03      	subs	r3, r0, #0
 8005bdc:	d000      	beq.n	8005be0 <HAL_ADC_ConfigChannel+0x3c>
 8005bde:	e1a3      	b.n	8005f28 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d100      	bne.n	8005bea <HAL_ADC_ConfigChannel+0x46>
 8005be8:	e143      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	061b      	lsls	r3, r3, #24
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d004      	beq.n	8005c00 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005bfa:	4ac1      	ldr	r2, [pc, #772]	; (8005f00 <HAL_ADC_ConfigChannel+0x35c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	0019      	movs	r1, r3
 8005c0a:	0010      	movs	r0, r2
 8005c0c:	f7ff fb02 	bl	8005214 <LL_ADC_REG_SetSequencerChAdd>
 8005c10:	e0c9      	b.n	8005da6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	211f      	movs	r1, #31
 8005c1c:	400b      	ands	r3, r1
 8005c1e:	210f      	movs	r1, #15
 8005c20:	4099      	lsls	r1, r3
 8005c22:	000b      	movs	r3, r1
 8005c24:	43db      	mvns	r3, r3
 8005c26:	4013      	ands	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	035b      	lsls	r3, r3, #13
 8005c30:	0b5b      	lsrs	r3, r3, #13
 8005c32:	d105      	bne.n	8005c40 <HAL_ADC_ConfigChannel+0x9c>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	0e9b      	lsrs	r3, r3, #26
 8005c3a:	221f      	movs	r2, #31
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	e098      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2201      	movs	r2, #1
 8005c46:	4013      	ands	r3, r2
 8005c48:	d000      	beq.n	8005c4c <HAL_ADC_ConfigChannel+0xa8>
 8005c4a:	e091      	b.n	8005d70 <HAL_ADC_ConfigChannel+0x1cc>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2202      	movs	r2, #2
 8005c52:	4013      	ands	r3, r2
 8005c54:	d000      	beq.n	8005c58 <HAL_ADC_ConfigChannel+0xb4>
 8005c56:	e089      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x1c8>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d000      	beq.n	8005c64 <HAL_ADC_ConfigChannel+0xc0>
 8005c62:	e081      	b.n	8005d68 <HAL_ADC_ConfigChannel+0x1c4>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d000      	beq.n	8005c70 <HAL_ADC_ConfigChannel+0xcc>
 8005c6e:	e079      	b.n	8005d64 <HAL_ADC_ConfigChannel+0x1c0>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2210      	movs	r2, #16
 8005c76:	4013      	ands	r3, r2
 8005c78:	d000      	beq.n	8005c7c <HAL_ADC_ConfigChannel+0xd8>
 8005c7a:	e071      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x1bc>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2220      	movs	r2, #32
 8005c82:	4013      	ands	r3, r2
 8005c84:	d000      	beq.n	8005c88 <HAL_ADC_ConfigChannel+0xe4>
 8005c86:	e069      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x1b8>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2240      	movs	r2, #64	; 0x40
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d000      	beq.n	8005c94 <HAL_ADC_ConfigChannel+0xf0>
 8005c92:	e061      	b.n	8005d58 <HAL_ADC_ConfigChannel+0x1b4>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2280      	movs	r2, #128	; 0x80
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d000      	beq.n	8005ca0 <HAL_ADC_ConfigChannel+0xfc>
 8005c9e:	e059      	b.n	8005d54 <HAL_ADC_ConfigChannel+0x1b0>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	2380      	movs	r3, #128	; 0x80
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d151      	bne.n	8005d50 <HAL_ADC_ConfigChannel+0x1ac>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	2380      	movs	r3, #128	; 0x80
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d149      	bne.n	8005d4c <HAL_ADC_ConfigChannel+0x1a8>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	2380      	movs	r3, #128	; 0x80
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d141      	bne.n	8005d48 <HAL_ADC_ConfigChannel+0x1a4>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d139      	bne.n	8005d44 <HAL_ADC_ConfigChannel+0x1a0>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	015b      	lsls	r3, r3, #5
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d131      	bne.n	8005d40 <HAL_ADC_ConfigChannel+0x19c>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	2380      	movs	r3, #128	; 0x80
 8005ce2:	019b      	lsls	r3, r3, #6
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d129      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x198>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	01db      	lsls	r3, r3, #7
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d121      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x194>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d119      	bne.n	8005d34 <HAL_ADC_ConfigChannel+0x190>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	025b      	lsls	r3, r3, #9
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d111      	bne.n	8005d30 <HAL_ADC_ConfigChannel+0x18c>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	2380      	movs	r3, #128	; 0x80
 8005d12:	029b      	lsls	r3, r3, #10
 8005d14:	4013      	ands	r3, r2
 8005d16:	d109      	bne.n	8005d2c <HAL_ADC_ConfigChannel+0x188>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	2380      	movs	r3, #128	; 0x80
 8005d1e:	02db      	lsls	r3, r3, #11
 8005d20:	4013      	ands	r3, r2
 8005d22:	d001      	beq.n	8005d28 <HAL_ADC_ConfigChannel+0x184>
 8005d24:	2312      	movs	r3, #18
 8005d26:	e024      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e022      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d2c:	2311      	movs	r3, #17
 8005d2e:	e020      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d30:	2310      	movs	r3, #16
 8005d32:	e01e      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d34:	230f      	movs	r3, #15
 8005d36:	e01c      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d38:	230e      	movs	r3, #14
 8005d3a:	e01a      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d3c:	230d      	movs	r3, #13
 8005d3e:	e018      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d40:	230c      	movs	r3, #12
 8005d42:	e016      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d44:	230b      	movs	r3, #11
 8005d46:	e014      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d48:	230a      	movs	r3, #10
 8005d4a:	e012      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d4c:	2309      	movs	r3, #9
 8005d4e:	e010      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d50:	2308      	movs	r3, #8
 8005d52:	e00e      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d54:	2307      	movs	r3, #7
 8005d56:	e00c      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d58:	2306      	movs	r3, #6
 8005d5a:	e00a      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d5c:	2305      	movs	r3, #5
 8005d5e:	e008      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d60:	2304      	movs	r3, #4
 8005d62:	e006      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d64:	2303      	movs	r3, #3
 8005d66:	e004      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e002      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x1ce>
 8005d70:	2300      	movs	r3, #0
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	6852      	ldr	r2, [r2, #4]
 8005d76:	201f      	movs	r0, #31
 8005d78:	4002      	ands	r2, r0
 8005d7a:	4093      	lsls	r3, r2
 8005d7c:	000a      	movs	r2, r1
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	089b      	lsrs	r3, r3, #2
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d808      	bhi.n	8005da6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	6859      	ldr	r1, [r3, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	001a      	movs	r2, r3
 8005da2:	f7ff fa17 	bl	80051d4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	001a      	movs	r2, r3
 8005db4:	f7ff fa5e 	bl	8005274 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	db00      	blt.n	8005dc2 <HAL_ADC_ConfigChannel+0x21e>
 8005dc0:	e0bc      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005dc2:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <HAL_ADC_ConfigChannel+0x360>)
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7ff f9b3 	bl	8005130 <LL_ADC_GetCommonPathInternalCh>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a4d      	ldr	r2, [pc, #308]	; (8005f08 <HAL_ADC_ConfigChannel+0x364>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d122      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005de0:	d11d      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2280      	movs	r2, #128	; 0x80
 8005de6:	0412      	lsls	r2, r2, #16
 8005de8:	4313      	orrs	r3, r2
 8005dea:	4a46      	ldr	r2, [pc, #280]	; (8005f04 <HAL_ADC_ConfigChannel+0x360>)
 8005dec:	0019      	movs	r1, r3
 8005dee:	0010      	movs	r0, r2
 8005df0:	f7ff f98a 	bl	8005108 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005df4:	4b45      	ldr	r3, [pc, #276]	; (8005f0c <HAL_ADC_ConfigChannel+0x368>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4945      	ldr	r1, [pc, #276]	; (8005f10 <HAL_ADC_ConfigChannel+0x36c>)
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7fa f98e 	bl	800011c <__udivsi3>
 8005e00:	0003      	movs	r3, r0
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	0013      	movs	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	189b      	adds	r3, r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e0e:	e002      	b.n	8005e16 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f9      	bne.n	8005e10 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e1c:	e08e      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a3c      	ldr	r2, [pc, #240]	; (8005f14 <HAL_ADC_ConfigChannel+0x370>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d10e      	bne.n	8005e46 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	2380      	movs	r3, #128	; 0x80
 8005e2c:	045b      	lsls	r3, r3, #17
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d109      	bne.n	8005e46 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2280      	movs	r2, #128	; 0x80
 8005e36:	0452      	lsls	r2, r2, #17
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	4a32      	ldr	r2, [pc, #200]	; (8005f04 <HAL_ADC_ConfigChannel+0x360>)
 8005e3c:	0019      	movs	r1, r3
 8005e3e:	0010      	movs	r0, r2
 8005e40:	f7ff f962 	bl	8005108 <LL_ADC_SetCommonPathInternalCh>
 8005e44:	e07a      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a33      	ldr	r2, [pc, #204]	; (8005f18 <HAL_ADC_ConfigChannel+0x374>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d000      	beq.n	8005e52 <HAL_ADC_ConfigChannel+0x2ae>
 8005e50:	e074      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	03db      	lsls	r3, r3, #15
 8005e58:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005e5a:	d000      	beq.n	8005e5e <HAL_ADC_ConfigChannel+0x2ba>
 8005e5c:	e06e      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2280      	movs	r2, #128	; 0x80
 8005e62:	03d2      	lsls	r2, r2, #15
 8005e64:	4313      	orrs	r3, r2
 8005e66:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <HAL_ADC_ConfigChannel+0x360>)
 8005e68:	0019      	movs	r1, r3
 8005e6a:	0010      	movs	r0, r2
 8005e6c:	f7ff f94c 	bl	8005108 <LL_ADC_SetCommonPathInternalCh>
 8005e70:	e064      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	2380      	movs	r3, #128	; 0x80
 8005e78:	061b      	lsls	r3, r3, #24
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d004      	beq.n	8005e88 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e82:	4a1f      	ldr	r2, [pc, #124]	; (8005f00 <HAL_ADC_ConfigChannel+0x35c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d107      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	0019      	movs	r1, r3
 8005e92:	0010      	movs	r0, r2
 8005e94:	f7ff f9cf 	bl	8005236 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da4d      	bge.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ea0:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <HAL_ADC_ConfigChannel+0x360>)
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f7ff f944 	bl	8005130 <LL_ADC_GetCommonPathInternalCh>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <HAL_ADC_ConfigChannel+0x364>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d108      	bne.n	8005ec8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <HAL_ADC_ConfigChannel+0x378>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <HAL_ADC_ConfigChannel+0x360>)
 8005ebe:	0019      	movs	r1, r3
 8005ec0:	0010      	movs	r0, r2
 8005ec2:	f7ff f921 	bl	8005108 <LL_ADC_SetCommonPathInternalCh>
 8005ec6:	e039      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a11      	ldr	r2, [pc, #68]	; (8005f14 <HAL_ADC_ConfigChannel+0x370>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d108      	bne.n	8005ee4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <HAL_ADC_ConfigChannel+0x37c>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	4a0a      	ldr	r2, [pc, #40]	; (8005f04 <HAL_ADC_ConfigChannel+0x360>)
 8005eda:	0019      	movs	r1, r3
 8005edc:	0010      	movs	r0, r2
 8005ede:	f7ff f913 	bl	8005108 <LL_ADC_SetCommonPathInternalCh>
 8005ee2:	e02b      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0b      	ldr	r2, [pc, #44]	; (8005f18 <HAL_ADC_ConfigChannel+0x374>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d126      	bne.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <HAL_ADC_ConfigChannel+0x380>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	4a03      	ldr	r2, [pc, #12]	; (8005f04 <HAL_ADC_ConfigChannel+0x360>)
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	0010      	movs	r0, r2
 8005efa:	f7ff f905 	bl	8005108 <LL_ADC_SetCommonPathInternalCh>
 8005efe:	e01d      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x398>
 8005f00:	80000004 	.word	0x80000004
 8005f04:	40012708 	.word	0x40012708
 8005f08:	b0001000 	.word	0xb0001000
 8005f0c:	200000e8 	.word	0x200000e8
 8005f10:	00030d40 	.word	0x00030d40
 8005f14:	b8004000 	.word	0xb8004000
 8005f18:	b4002000 	.word	0xb4002000
 8005f1c:	ff7fffff 	.word	0xff7fffff
 8005f20:	feffffff 	.word	0xfeffffff
 8005f24:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f34:	2317      	movs	r3, #23
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	2201      	movs	r2, #1
 8005f3a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2254      	movs	r2, #84	; 0x54
 8005f40:	2100      	movs	r1, #0
 8005f42:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005f44:	2317      	movs	r3, #23
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	781b      	ldrb	r3, [r3, #0]
}
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b006      	add	sp, #24
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	46c0      	nop			; (mov r8, r8)

08005f54 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f7ff fa35 	bl	80053d0 <LL_ADC_REG_IsConversionOngoing>
 8005f66:	1e03      	subs	r3, r0, #0
 8005f68:	d031      	beq.n	8005fce <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7ff f9f9 	bl	8005366 <LL_ADC_IsDisableOngoing>
 8005f74:	1e03      	subs	r3, r0, #0
 8005f76:	d104      	bne.n	8005f82 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f7ff fa15 	bl	80053ac <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f82:	f7ff f87d 	bl	8005080 <HAL_GetTick>
 8005f86:	0003      	movs	r3, r0
 8005f88:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005f8a:	e01a      	b.n	8005fc2 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005f8c:	f7ff f878 	bl	8005080 <HAL_GetTick>
 8005f90:	0002      	movs	r2, r0
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d913      	bls.n	8005fc2 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d00d      	beq.n	8005fc2 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005faa:	2210      	movs	r2, #16
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e006      	b.n	8005fd0 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	4013      	ands	r3, r2
 8005fcc:	d1de      	bne.n	8005f8c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b004      	add	sp, #16
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f7ff f9ab 	bl	8005344 <LL_ADC_IsEnabled>
 8005fee:	1e03      	subs	r3, r0, #0
 8005ff0:	d000      	beq.n	8005ff4 <ADC_Enable+0x1c>
 8005ff2:	e069      	b.n	80060c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	4a36      	ldr	r2, [pc, #216]	; (80060d4 <ADC_Enable+0xfc>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d00d      	beq.n	800601c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006004:	2210      	movs	r2, #16
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006010:	2201      	movs	r2, #1
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e056      	b.n	80060ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	0018      	movs	r0, r3
 8006022:	f7ff f96b 	bl	80052fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006026:	4b2c      	ldr	r3, [pc, #176]	; (80060d8 <ADC_Enable+0x100>)
 8006028:	0018      	movs	r0, r3
 800602a:	f7ff f881 	bl	8005130 <LL_ADC_GetCommonPathInternalCh>
 800602e:	0002      	movs	r2, r0
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	4013      	ands	r3, r2
 8006036:	d00f      	beq.n	8006058 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006038:	4b28      	ldr	r3, [pc, #160]	; (80060dc <ADC_Enable+0x104>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4928      	ldr	r1, [pc, #160]	; (80060e0 <ADC_Enable+0x108>)
 800603e:	0018      	movs	r0, r3
 8006040:	f7fa f86c 	bl	800011c <__udivsi3>
 8006044:	0003      	movs	r3, r0
 8006046:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8006048:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800604a:	e002      	b.n	8006052 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	3b01      	subs	r3, #1
 8006050:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f9      	bne.n	800604c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	7e5b      	ldrb	r3, [r3, #25]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d033      	beq.n	80060c8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006060:	f7ff f80e 	bl	8005080 <HAL_GetTick>
 8006064:	0003      	movs	r3, r0
 8006066:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006068:	e027      	b.n	80060ba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	0018      	movs	r0, r3
 8006070:	f7ff f968 	bl	8005344 <LL_ADC_IsEnabled>
 8006074:	1e03      	subs	r3, r0, #0
 8006076:	d104      	bne.n	8006082 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	0018      	movs	r0, r3
 800607e:	f7ff f93d 	bl	80052fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006082:	f7fe fffd 	bl	8005080 <HAL_GetTick>
 8006086:	0002      	movs	r2, r0
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d914      	bls.n	80060ba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2201      	movs	r2, #1
 8006098:	4013      	ands	r3, r2
 800609a:	2b01      	cmp	r3, #1
 800609c:	d00d      	beq.n	80060ba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a2:	2210      	movs	r2, #16
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ae:	2201      	movs	r2, #1
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e007      	b.n	80060ca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d1d0      	bne.n	800606a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	0018      	movs	r0, r3
 80060cc:	46bd      	mov	sp, r7
 80060ce:	b004      	add	sp, #16
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	80000017 	.word	0x80000017
 80060d8:	40012708 	.word	0x40012708
 80060dc:	200000e8 	.word	0x200000e8
 80060e0:	00030d40 	.word	0x00030d40

080060e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7ff f938 	bl	8005366 <LL_ADC_IsDisableOngoing>
 80060f6:	0003      	movs	r3, r0
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	0018      	movs	r0, r3
 8006100:	f7ff f920 	bl	8005344 <LL_ADC_IsEnabled>
 8006104:	1e03      	subs	r3, r0, #0
 8006106:	d046      	beq.n	8006196 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d143      	bne.n	8006196 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2205      	movs	r2, #5
 8006116:	4013      	ands	r3, r2
 8006118:	2b01      	cmp	r3, #1
 800611a:	d10d      	bne.n	8006138 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	0018      	movs	r0, r3
 8006122:	f7ff f8fd 	bl	8005320 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2203      	movs	r2, #3
 800612c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800612e:	f7fe ffa7 	bl	8005080 <HAL_GetTick>
 8006132:	0003      	movs	r3, r0
 8006134:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006136:	e028      	b.n	800618a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613c:	2210      	movs	r2, #16
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	2201      	movs	r2, #1
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e021      	b.n	8006198 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006154:	f7fe ff94 	bl	8005080 <HAL_GetTick>
 8006158:	0002      	movs	r2, r0
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d913      	bls.n	800618a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2201      	movs	r2, #1
 800616a:	4013      	ands	r3, r2
 800616c:	d00d      	beq.n	800618a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	2210      	movs	r2, #16
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617e:	2201      	movs	r2, #1
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e006      	b.n	8006198 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2201      	movs	r2, #1
 8006192:	4013      	ands	r3, r2
 8006194:	d1de      	bne.n	8006154 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	0018      	movs	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	b004      	add	sp, #16
 800619e:	bd80      	pop	{r7, pc}

080061a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	2250      	movs	r2, #80	; 0x50
 80061b4:	4013      	ands	r3, r2
 80061b6:	d141      	bne.n	800623c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061bc:	2280      	movs	r2, #128	; 0x80
 80061be:	0092      	lsls	r2, r2, #2
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7fe fff1 	bl	80051b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80061d0:	1e03      	subs	r3, r0, #0
 80061d2:	d02e      	beq.n	8006232 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	7e9b      	ldrb	r3, [r3, #26]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d12a      	bne.n	8006232 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2208      	movs	r2, #8
 80061e4:	4013      	ands	r3, r2
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d123      	bne.n	8006232 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	0018      	movs	r0, r3
 80061f0:	f7ff f8ee 	bl	80053d0 <LL_ADC_REG_IsConversionOngoing>
 80061f4:	1e03      	subs	r3, r0, #0
 80061f6:	d110      	bne.n	800621a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	210c      	movs	r1, #12
 8006204:	438a      	bics	r2, r1
 8006206:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620c:	4a15      	ldr	r2, [pc, #84]	; (8006264 <ADC_DMAConvCplt+0xc4>)
 800620e:	4013      	ands	r3, r2
 8006210:	2201      	movs	r2, #1
 8006212:	431a      	orrs	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	659a      	str	r2, [r3, #88]	; 0x58
 8006218:	e00b      	b.n	8006232 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621e:	2220      	movs	r2, #32
 8006220:	431a      	orrs	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622a:	2201      	movs	r2, #1
 800622c:	431a      	orrs	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	0018      	movs	r0, r3
 8006236:	f7fe f803 	bl	8004240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800623a:	e00f      	b.n	800625c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006240:	2210      	movs	r2, #16
 8006242:	4013      	ands	r3, r2
 8006244:	d004      	beq.n	8006250 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	0018      	movs	r0, r3
 800624a:	f7ff fca3 	bl	8005b94 <HAL_ADC_ErrorCallback>
}
 800624e:	e005      	b.n	800625c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	0010      	movs	r0, r2
 800625a:	4798      	blx	r3
}
 800625c:	46c0      	nop			; (mov r8, r8)
 800625e:	46bd      	mov	sp, r7
 8006260:	b004      	add	sp, #16
 8006262:	bd80      	pop	{r7, pc}
 8006264:	fffffefe 	.word	0xfffffefe

08006268 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	0018      	movs	r0, r3
 800627a:	f7ff fc7b 	bl	8005b74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	46bd      	mov	sp, r7
 8006282:	b004      	add	sp, #16
 8006284:	bd80      	pop	{r7, pc}

08006286 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006298:	2240      	movs	r2, #64	; 0x40
 800629a:	431a      	orrs	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a4:	2204      	movs	r2, #4
 80062a6:	431a      	orrs	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7ff fc70 	bl	8005b94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80062b4:	46c0      	nop			; (mov r8, r8)
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b004      	add	sp, #16
 80062ba:	bd80      	pop	{r7, pc}

080062bc <LL_ADC_SetCalibrationFactor>:
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	22b4      	movs	r2, #180	; 0xb4
 80062ca:	589b      	ldr	r3, [r3, r2]
 80062cc:	227f      	movs	r2, #127	; 0x7f
 80062ce:	4393      	bics	r3, r2
 80062d0:	001a      	movs	r2, r3
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	21b4      	movs	r1, #180	; 0xb4
 80062da:	505a      	str	r2, [r3, r1]
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b002      	add	sp, #8
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <LL_ADC_GetCalibrationFactor>:
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	22b4      	movs	r2, #180	; 0xb4
 80062f0:	589b      	ldr	r3, [r3, r2]
 80062f2:	227f      	movs	r2, #127	; 0x7f
 80062f4:	4013      	ands	r3, r2
}
 80062f6:	0018      	movs	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b002      	add	sp, #8
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <LL_ADC_Enable>:
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	4a04      	ldr	r2, [pc, #16]	; (8006320 <LL_ADC_Enable+0x20>)
 800630e:	4013      	ands	r3, r2
 8006310:	2201      	movs	r2, #1
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	609a      	str	r2, [r3, #8]
}
 8006318:	46c0      	nop			; (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b002      	add	sp, #8
 800631e:	bd80      	pop	{r7, pc}
 8006320:	7fffffe8 	.word	0x7fffffe8

08006324 <LL_ADC_Disable>:
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a04      	ldr	r2, [pc, #16]	; (8006344 <LL_ADC_Disable+0x20>)
 8006332:	4013      	ands	r3, r2
 8006334:	2202      	movs	r2, #2
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	609a      	str	r2, [r3, #8]
}
 800633c:	46c0      	nop			; (mov r8, r8)
 800633e:	46bd      	mov	sp, r7
 8006340:	b002      	add	sp, #8
 8006342:	bd80      	pop	{r7, pc}
 8006344:	7fffffe8 	.word	0x7fffffe8

08006348 <LL_ADC_IsEnabled>:
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2201      	movs	r2, #1
 8006356:	4013      	ands	r3, r2
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <LL_ADC_IsEnabled+0x18>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <LL_ADC_IsEnabled+0x1a>
 8006360:	2300      	movs	r3, #0
}
 8006362:	0018      	movs	r0, r3
 8006364:	46bd      	mov	sp, r7
 8006366:	b002      	add	sp, #8
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <LL_ADC_StartCalibration>:
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4a05      	ldr	r2, [pc, #20]	; (8006390 <LL_ADC_StartCalibration+0x24>)
 800637a:	4013      	ands	r3, r2
 800637c:	2280      	movs	r2, #128	; 0x80
 800637e:	0612      	lsls	r2, r2, #24
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	609a      	str	r2, [r3, #8]
}
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	46bd      	mov	sp, r7
 800638a:	b002      	add	sp, #8
 800638c:	bd80      	pop	{r7, pc}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	7fffffe8 	.word	0x7fffffe8

08006394 <LL_ADC_IsCalibrationOnGoing>:
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	0fdb      	lsrs	r3, r3, #31
 80063a2:	07da      	lsls	r2, r3, #31
 80063a4:	2380      	movs	r3, #128	; 0x80
 80063a6:	061b      	lsls	r3, r3, #24
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d101      	bne.n	80063b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	0018      	movs	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b002      	add	sp, #8
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80063bc:	b590      	push	{r4, r7, lr}
 80063be:	b089      	sub	sp, #36	; 0x24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2254      	movs	r2, #84	; 0x54
 80063d0:	5c9b      	ldrb	r3, [r3, r2]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_ADCEx_Calibration_Start+0x1e>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e0ba      	b.n	8006550 <HAL_ADCEx_Calibration_Start+0x194>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2254      	movs	r2, #84	; 0x54
 80063de:	2101      	movs	r1, #1
 80063e0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80063e2:	2317      	movs	r3, #23
 80063e4:	18fc      	adds	r4, r7, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7ff fe7b 	bl	80060e4 <ADC_Disable>
 80063ee:	0003      	movs	r3, r0
 80063f0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	0018      	movs	r0, r3
 80063f8:	f7ff ffa6 	bl	8006348 <LL_ADC_IsEnabled>
 80063fc:	1e03      	subs	r3, r0, #0
 80063fe:	d000      	beq.n	8006402 <HAL_ADCEx_Calibration_Start+0x46>
 8006400:	e099      	b.n	8006536 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006406:	4a54      	ldr	r2, [pc, #336]	; (8006558 <HAL_ADCEx_Calibration_Start+0x19c>)
 8006408:	4013      	ands	r3, r2
 800640a:	2202      	movs	r2, #2
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4a50      	ldr	r2, [pc, #320]	; (800655c <HAL_ADCEx_Calibration_Start+0x1a0>)
 800641a:	4013      	ands	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	494d      	ldr	r1, [pc, #308]	; (8006560 <HAL_ADCEx_Calibration_Start+0x1a4>)
 800642a:	400a      	ands	r2, r1
 800642c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	e02d      	b.n	8006490 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	0018      	movs	r0, r3
 800643a:	f7ff ff97 	bl	800636c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800643e:	e014      	b.n	800646a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	3301      	adds	r3, #1
 8006444:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	4a46      	ldr	r2, [pc, #280]	; (8006564 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d90d      	bls.n	800646a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006452:	2212      	movs	r2, #18
 8006454:	4393      	bics	r3, r2
 8006456:	2210      	movs	r2, #16
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2254      	movs	r2, #84	; 0x54
 8006462:	2100      	movs	r1, #0
 8006464:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e072      	b.n	8006550 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	0018      	movs	r0, r3
 8006470:	f7ff ff90 	bl	8006394 <LL_ADC_IsCalibrationOnGoing>
 8006474:	1e03      	subs	r3, r0, #0
 8006476:	d1e3      	bne.n	8006440 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	0018      	movs	r0, r3
 800647e:	f7ff ff31 	bl	80062e4 <LL_ADC_GetCalibrationFactor>
 8006482:	0002      	movs	r2, r0
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	189b      	adds	r3, r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	3301      	adds	r3, #1
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	2b07      	cmp	r3, #7
 8006494:	d9ce      	bls.n	8006434 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8006496:	69f9      	ldr	r1, [r7, #28]
 8006498:	69b8      	ldr	r0, [r7, #24]
 800649a:	f7f9 fe3f 	bl	800011c <__udivsi3>
 800649e:	0003      	movs	r3, r0
 80064a0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f7ff ff2a 	bl	8006300 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	0011      	movs	r1, r2
 80064b4:	0018      	movs	r0, r3
 80064b6:	f7ff ff01 	bl	80062bc <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	0018      	movs	r0, r3
 80064c0:	f7ff ff30 	bl	8006324 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80064c4:	f7fe fddc 	bl	8005080 <HAL_GetTick>
 80064c8:	0003      	movs	r3, r0
 80064ca:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80064cc:	e01b      	b.n	8006506 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80064ce:	f7fe fdd7 	bl	8005080 <HAL_GetTick>
 80064d2:	0002      	movs	r2, r0
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d914      	bls.n	8006506 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	0018      	movs	r0, r3
 80064e2:	f7ff ff31 	bl	8006348 <LL_ADC_IsEnabled>
 80064e6:	1e03      	subs	r3, r0, #0
 80064e8:	d00d      	beq.n	8006506 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	2210      	movs	r2, #16
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fa:	2201      	movs	r2, #1
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e024      	b.n	8006550 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	0018      	movs	r0, r3
 800650c:	f7ff ff1c 	bl	8006348 <LL_ADC_IsEnabled>
 8006510:	1e03      	subs	r3, r0, #0
 8006512:	d1dc      	bne.n	80064ce <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68d9      	ldr	r1, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	430a      	orrs	r2, r1
 8006522:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006528:	2203      	movs	r2, #3
 800652a:	4393      	bics	r3, r2
 800652c:	2201      	movs	r2, #1
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	659a      	str	r2, [r3, #88]	; 0x58
 8006534:	e005      	b.n	8006542 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653a:	2210      	movs	r2, #16
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2254      	movs	r2, #84	; 0x54
 8006546:	2100      	movs	r1, #0
 8006548:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800654a:	2317      	movs	r3, #23
 800654c:	18fb      	adds	r3, r7, r3
 800654e:	781b      	ldrb	r3, [r3, #0]
}
 8006550:	0018      	movs	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	b009      	add	sp, #36	; 0x24
 8006556:	bd90      	pop	{r4, r7, pc}
 8006558:	fffffefd 	.word	0xfffffefd
 800655c:	00008003 	.word	0x00008003
 8006560:	ffff7ffc 	.word	0xffff7ffc
 8006564:	0002f1ff 	.word	0x0002f1ff

08006568 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006570:	46c0      	nop			; (mov r8, r8)
 8006572:	46bd      	mov	sp, r7
 8006574:	b002      	add	sp, #8
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006580:	46c0      	nop			; (mov r8, r8)
 8006582:	46bd      	mov	sp, r7
 8006584:	b002      	add	sp, #8
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80065a0:	46c0      	nop			; (mov r8, r8)
 80065a2:	46bd      	mov	sp, r7
 80065a4:	b002      	add	sp, #8
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	0002      	movs	r2, r0
 80065b0:	1dfb      	adds	r3, r7, #7
 80065b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80065b4:	1dfb      	adds	r3, r7, #7
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ba:	d809      	bhi.n	80065d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065bc:	1dfb      	adds	r3, r7, #7
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	001a      	movs	r2, r3
 80065c2:	231f      	movs	r3, #31
 80065c4:	401a      	ands	r2, r3
 80065c6:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <__NVIC_EnableIRQ+0x30>)
 80065c8:	2101      	movs	r1, #1
 80065ca:	4091      	lsls	r1, r2
 80065cc:	000a      	movs	r2, r1
 80065ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	46bd      	mov	sp, r7
 80065d4:	b002      	add	sp, #8
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	e000e100 	.word	0xe000e100

080065dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	0002      	movs	r2, r0
 80065e4:	6039      	str	r1, [r7, #0]
 80065e6:	1dfb      	adds	r3, r7, #7
 80065e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80065ea:	1dfb      	adds	r3, r7, #7
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b7f      	cmp	r3, #127	; 0x7f
 80065f0:	d828      	bhi.n	8006644 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80065f2:	4a2f      	ldr	r2, [pc, #188]	; (80066b0 <__NVIC_SetPriority+0xd4>)
 80065f4:	1dfb      	adds	r3, r7, #7
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	089b      	lsrs	r3, r3, #2
 80065fc:	33c0      	adds	r3, #192	; 0xc0
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	589b      	ldr	r3, [r3, r2]
 8006602:	1dfa      	adds	r2, r7, #7
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	0011      	movs	r1, r2
 8006608:	2203      	movs	r2, #3
 800660a:	400a      	ands	r2, r1
 800660c:	00d2      	lsls	r2, r2, #3
 800660e:	21ff      	movs	r1, #255	; 0xff
 8006610:	4091      	lsls	r1, r2
 8006612:	000a      	movs	r2, r1
 8006614:	43d2      	mvns	r2, r2
 8006616:	401a      	ands	r2, r3
 8006618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	019b      	lsls	r3, r3, #6
 800661e:	22ff      	movs	r2, #255	; 0xff
 8006620:	401a      	ands	r2, r3
 8006622:	1dfb      	adds	r3, r7, #7
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	0018      	movs	r0, r3
 8006628:	2303      	movs	r3, #3
 800662a:	4003      	ands	r3, r0
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006630:	481f      	ldr	r0, [pc, #124]	; (80066b0 <__NVIC_SetPriority+0xd4>)
 8006632:	1dfb      	adds	r3, r7, #7
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b25b      	sxtb	r3, r3
 8006638:	089b      	lsrs	r3, r3, #2
 800663a:	430a      	orrs	r2, r1
 800663c:	33c0      	adds	r3, #192	; 0xc0
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006642:	e031      	b.n	80066a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006644:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <__NVIC_SetPriority+0xd8>)
 8006646:	1dfb      	adds	r3, r7, #7
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	0019      	movs	r1, r3
 800664c:	230f      	movs	r3, #15
 800664e:	400b      	ands	r3, r1
 8006650:	3b08      	subs	r3, #8
 8006652:	089b      	lsrs	r3, r3, #2
 8006654:	3306      	adds	r3, #6
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	18d3      	adds	r3, r2, r3
 800665a:	3304      	adds	r3, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	1dfa      	adds	r2, r7, #7
 8006660:	7812      	ldrb	r2, [r2, #0]
 8006662:	0011      	movs	r1, r2
 8006664:	2203      	movs	r2, #3
 8006666:	400a      	ands	r2, r1
 8006668:	00d2      	lsls	r2, r2, #3
 800666a:	21ff      	movs	r1, #255	; 0xff
 800666c:	4091      	lsls	r1, r2
 800666e:	000a      	movs	r2, r1
 8006670:	43d2      	mvns	r2, r2
 8006672:	401a      	ands	r2, r3
 8006674:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	22ff      	movs	r2, #255	; 0xff
 800667c:	401a      	ands	r2, r3
 800667e:	1dfb      	adds	r3, r7, #7
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	0018      	movs	r0, r3
 8006684:	2303      	movs	r3, #3
 8006686:	4003      	ands	r3, r0
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800668c:	4809      	ldr	r0, [pc, #36]	; (80066b4 <__NVIC_SetPriority+0xd8>)
 800668e:	1dfb      	adds	r3, r7, #7
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	001c      	movs	r4, r3
 8006694:	230f      	movs	r3, #15
 8006696:	4023      	ands	r3, r4
 8006698:	3b08      	subs	r3, #8
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	430a      	orrs	r2, r1
 800669e:	3306      	adds	r3, #6
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	18c3      	adds	r3, r0, r3
 80066a4:	3304      	adds	r3, #4
 80066a6:	601a      	str	r2, [r3, #0]
}
 80066a8:	46c0      	nop			; (mov r8, r8)
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b003      	add	sp, #12
 80066ae:	bd90      	pop	{r4, r7, pc}
 80066b0:	e000e100 	.word	0xe000e100
 80066b4:	e000ed00 	.word	0xe000ed00

080066b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	1e5a      	subs	r2, r3, #1
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	045b      	lsls	r3, r3, #17
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d301      	bcc.n	80066d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066cc:	2301      	movs	r3, #1
 80066ce:	e010      	b.n	80066f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <SysTick_Config+0x44>)
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	3a01      	subs	r2, #1
 80066d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066d8:	2301      	movs	r3, #1
 80066da:	425b      	negs	r3, r3
 80066dc:	2103      	movs	r1, #3
 80066de:	0018      	movs	r0, r3
 80066e0:	f7ff ff7c 	bl	80065dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <SysTick_Config+0x44>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066ea:	4b04      	ldr	r3, [pc, #16]	; (80066fc <SysTick_Config+0x44>)
 80066ec:	2207      	movs	r2, #7
 80066ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	0018      	movs	r0, r3
 80066f4:	46bd      	mov	sp, r7
 80066f6:	b002      	add	sp, #8
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	e000e010 	.word	0xe000e010

08006700 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	210f      	movs	r1, #15
 800670c:	187b      	adds	r3, r7, r1
 800670e:	1c02      	adds	r2, r0, #0
 8006710:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	187b      	adds	r3, r7, r1
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	b25b      	sxtb	r3, r3
 800671a:	0011      	movs	r1, r2
 800671c:	0018      	movs	r0, r3
 800671e:	f7ff ff5d 	bl	80065dc <__NVIC_SetPriority>
}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	46bd      	mov	sp, r7
 8006726:	b004      	add	sp, #16
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	0002      	movs	r2, r0
 8006732:	1dfb      	adds	r3, r7, #7
 8006734:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006736:	1dfb      	adds	r3, r7, #7
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	b25b      	sxtb	r3, r3
 800673c:	0018      	movs	r0, r3
 800673e:	f7ff ff33 	bl	80065a8 <__NVIC_EnableIRQ>
}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	46bd      	mov	sp, r7
 8006746:	b002      	add	sp, #8
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0018      	movs	r0, r3
 8006756:	f7ff ffaf 	bl	80066b8 <SysTick_Config>
 800675a:	0003      	movs	r3, r0
}
 800675c:	0018      	movs	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	b002      	add	sp, #8
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e056      	b.n	8006824 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	7f5b      	ldrb	r3, [r3, #29]
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d106      	bne.n	800678e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	0018      	movs	r0, r3
 800678a:	f7fe f9cd 	bl	8004b28 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2202      	movs	r2, #2
 8006792:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	791b      	ldrb	r3, [r3, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10c      	bne.n	80067b6 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a22      	ldr	r2, [pc, #136]	; (800682c <HAL_CRC_Init+0xc8>)
 80067a2:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2118      	movs	r1, #24
 80067b0:	438a      	bics	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	e00b      	b.n	80067ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6899      	ldr	r1, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	0018      	movs	r0, r3
 80067c2:	f000 f835 	bl	8006830 <HAL_CRCEx_Polynomial_Set>
 80067c6:	1e03      	subs	r3, r0, #0
 80067c8:	d001      	beq.n	80067ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e02a      	b.n	8006824 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	795b      	ldrb	r3, [r3, #5]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d105      	bne.n	80067e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2201      	movs	r2, #1
 80067dc:	4252      	negs	r2, r2
 80067de:	611a      	str	r2, [r3, #16]
 80067e0:	e004      	b.n	80067ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6912      	ldr	r2, [r2, #16]
 80067ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2260      	movs	r2, #96	; 0x60
 80067f4:	4393      	bics	r3, r2
 80067f6:	0019      	movs	r1, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695a      	ldr	r2, [r3, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2280      	movs	r2, #128	; 0x80
 800680c:	4393      	bics	r3, r2
 800680e:	0019      	movs	r1, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	0018      	movs	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	b002      	add	sp, #8
 800682a:	bd80      	pop	{r7, pc}
 800682c:	04c11db7 	.word	0x04c11db7

08006830 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800683c:	2317      	movs	r3, #23
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006844:	231f      	movs	r3, #31
 8006846:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006848:	46c0      	nop			; (mov r8, r8)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1e5a      	subs	r2, r3, #1
 800684e:	613a      	str	r2, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d008      	beq.n	8006866 <HAL_CRCEx_Polynomial_Set+0x36>
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	221f      	movs	r2, #31
 8006858:	4013      	ands	r3, r2
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	40da      	lsrs	r2, r3
 800685e:	0013      	movs	r3, r2
 8006860:	2201      	movs	r2, #1
 8006862:	4013      	ands	r3, r2
 8006864:	d0f1      	beq.n	800684a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b18      	cmp	r3, #24
 800686a:	d00f      	beq.n	800688c <HAL_CRCEx_Polynomial_Set+0x5c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b18      	cmp	r3, #24
 8006870:	d824      	bhi.n	80068bc <HAL_CRCEx_Polynomial_Set+0x8c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b10      	cmp	r3, #16
 8006876:	d011      	beq.n	800689c <HAL_CRCEx_Polynomial_Set+0x6c>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b10      	cmp	r3, #16
 800687c:	d81e      	bhi.n	80068bc <HAL_CRCEx_Polynomial_Set+0x8c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d020      	beq.n	80068c6 <HAL_CRCEx_Polynomial_Set+0x96>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b08      	cmp	r3, #8
 8006888:	d010      	beq.n	80068ac <HAL_CRCEx_Polynomial_Set+0x7c>
 800688a:	e017      	b.n	80068bc <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b06      	cmp	r3, #6
 8006890:	d91b      	bls.n	80068ca <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8006892:	2317      	movs	r3, #23
 8006894:	18fb      	adds	r3, r7, r3
 8006896:	2201      	movs	r2, #1
 8006898:	701a      	strb	r2, [r3, #0]
      }
      break;
 800689a:	e016      	b.n	80068ca <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b07      	cmp	r3, #7
 80068a0:	d915      	bls.n	80068ce <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 80068a2:	2317      	movs	r3, #23
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80068aa:	e010      	b.n	80068ce <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b0f      	cmp	r3, #15
 80068b0:	d90f      	bls.n	80068d2 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 80068b2:	2317      	movs	r3, #23
 80068b4:	18fb      	adds	r3, r7, r3
 80068b6:	2201      	movs	r2, #1
 80068b8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80068ba:	e00a      	b.n	80068d2 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80068bc:	2317      	movs	r3, #23
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
      break;
 80068c4:	e006      	b.n	80068d4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	e004      	b.n	80068d4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	e002      	b.n	80068d4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	e000      	b.n	80068d4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80068d2:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 80068d4:	2317      	movs	r3, #23
 80068d6:	18fb      	adds	r3, r7, r3
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10e      	bne.n	80068fc <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2218      	movs	r2, #24
 80068ee:	4393      	bics	r3, r2
 80068f0:	0019      	movs	r1, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80068fc:	2317      	movs	r3, #23
 80068fe:	18fb      	adds	r3, r7, r3
 8006900:	781b      	ldrb	r3, [r3, #0]
}
 8006902:	0018      	movs	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	b006      	add	sp, #24
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e015      	b.n	8006948 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	791b      	ldrb	r3, [r3, #4]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0018      	movs	r0, r3
 8006930:	f7fe f91a 	bl	8004b68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	0018      	movs	r0, r3
 800694a:	46bd      	mov	sp, r7
 800694c:	b002      	add	sp, #8
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	795b      	ldrb	r3, [r3, #5]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_DAC_Start+0x16>
 8006962:	2302      	movs	r3, #2
 8006964:	e041      	b.n	80069ea <HAL_DAC_Start+0x9a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6819      	ldr	r1, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2210      	movs	r2, #16
 800697c:	4013      	ands	r3, r2
 800697e:	2201      	movs	r2, #1
 8006980:	409a      	lsls	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10f      	bne.n	80069b0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	223e      	movs	r2, #62	; 0x3e
 8006998:	4013      	ands	r3, r2
 800699a:	2b02      	cmp	r3, #2
 800699c:	d11e      	bne.n	80069dc <HAL_DAC_Start+0x8c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2101      	movs	r1, #1
 80069aa:	430a      	orrs	r2, r1
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	e015      	b.n	80069dc <HAL_DAC_Start+0x8c>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	23f8      	movs	r3, #248	; 0xf8
 80069b8:	039b      	lsls	r3, r3, #14
 80069ba:	401a      	ands	r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2110      	movs	r1, #16
 80069c0:	400b      	ands	r3, r1
 80069c2:	2102      	movs	r1, #2
 80069c4:	4099      	lsls	r1, r3
 80069c6:	000b      	movs	r3, r1
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d107      	bne.n	80069dc <HAL_DAC_Start+0x8c>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2102      	movs	r1, #2
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	0018      	movs	r0, r3
 80069ec:	46bd      	mov	sp, r7
 80069ee:	b002      	add	sp, #8
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	2380      	movs	r3, #128	; 0x80
 8006a04:	019b      	lsls	r3, r3, #6
 8006a06:	401a      	ands	r2, r3
 8006a08:	2380      	movs	r3, #128	; 0x80
 8006a0a:	019b      	lsls	r3, r3, #6
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d123      	bne.n	8006a58 <HAL_DAC_IRQHandler+0x64>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a16:	2380      	movs	r3, #128	; 0x80
 8006a18:	019b      	lsls	r3, r3, #6
 8006a1a:	401a      	ands	r2, r3
 8006a1c:	2380      	movs	r3, #128	; 0x80
 8006a1e:	019b      	lsls	r3, r3, #6
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d119      	bne.n	8006a58 <HAL_DAC_IRQHandler+0x64>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2204      	movs	r2, #4
 8006a28:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2280      	movs	r2, #128	; 0x80
 8006a3c:	0192      	lsls	r2, r2, #6
 8006a3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	491c      	ldr	r1, [pc, #112]	; (8006abc <HAL_DAC_IRQHandler+0xc8>)
 8006a4c:	400a      	ands	r2, r1
 8006a4e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	0018      	movs	r0, r3
 8006a54:	f000 f858 	bl	8006b08 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	2380      	movs	r3, #128	; 0x80
 8006a60:	059b      	lsls	r3, r3, #22
 8006a62:	401a      	ands	r2, r3
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	059b      	lsls	r3, r3, #22
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d123      	bne.n	8006ab4 <HAL_DAC_IRQHandler+0xc0>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	059b      	lsls	r3, r3, #22
 8006a76:	401a      	ands	r2, r3
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	059b      	lsls	r3, r3, #22
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d119      	bne.n	8006ab4 <HAL_DAC_IRQHandler+0xc0>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2204      	movs	r2, #4
 8006a84:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2280      	movs	r2, #128	; 0x80
 8006a98:	0592      	lsls	r2, r2, #22
 8006a9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4906      	ldr	r1, [pc, #24]	; (8006ac0 <HAL_DAC_IRQHandler+0xcc>)
 8006aa8:	400a      	ands	r2, r1
 8006aaa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f000 f94e 	bl	8006d50 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006ab4:	46c0      	nop			; (mov r8, r8)
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b002      	add	sp, #8
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	ffffefff 	.word	0xffffefff
 8006ac0:	efffffff 	.word	0xefffffff

08006ac4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	18d3      	adds	r3, r2, r3
 8006ae8:	3308      	adds	r3, #8
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	e004      	b.n	8006af8 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	18d3      	adds	r3, r2, r3
 8006af4:	3314      	adds	r3, #20
 8006af6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b006      	add	sp, #24
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006b10:	46c0      	nop			; (mov r8, r8)
 8006b12:	46bd      	mov	sp, r7
 8006b14:	b002      	add	sp, #8
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	795b      	ldrb	r3, [r3, #5]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_DAC_ConfigChannel+0x18>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e107      	b.n	8006d40 <HAL_DAC_ConfigChannel+0x228>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d000      	beq.n	8006b46 <HAL_DAC_ConfigChannel+0x2e>
 8006b44:	e074      	b.n	8006c30 <HAL_DAC_ConfigChannel+0x118>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006b46:	f7fe fa9b 	bl	8005080 <HAL_GetTick>
 8006b4a:	0003      	movs	r3, r0
 8006b4c:	61fb      	str	r3, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d134      	bne.n	8006bbe <HAL_DAC_ConfigChannel+0xa6>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b54:	e011      	b.n	8006b7a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006b56:	f7fe fa93 	bl	8005080 <HAL_GetTick>
 8006b5a:	0002      	movs	r2, r0
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d90a      	bls.n	8006b7a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2203      	movs	r2, #3
 8006b74:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e0e2      	b.n	8006d40 <HAL_DAC_ConfigChannel+0x228>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	4013      	ands	r3, r2
 8006b86:	d1e6      	bne.n	8006b56 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8006b88:	2001      	movs	r0, #1
 8006b8a:	f7fe fa83 	bl	8005094 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	6992      	ldr	r2, [r2, #24]
 8006b96:	641a      	str	r2, [r3, #64]	; 0x40
 8006b98:	e01e      	b.n	8006bd8 <HAL_DAC_ConfigChannel+0xc0>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006b9a:	f7fe fa71 	bl	8005080 <HAL_GetTick>
 8006b9e:	0002      	movs	r2, r0
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d90a      	bls.n	8006bbe <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2208      	movs	r2, #8
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e0c0      	b.n	8006d40 <HAL_DAC_ConfigChannel+0x228>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dbe8      	blt.n	8006b9a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8006bc8:	2001      	movs	r0, #1
 8006bca:	f7fe fa63 	bl	8005094 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	6992      	ldr	r2, [r2, #24]
 8006bd6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	2110      	movs	r1, #16
 8006be2:	400a      	ands	r2, r1
 8006be4:	4958      	ldr	r1, [pc, #352]	; (8006d48 <HAL_DAC_ConfigChannel+0x230>)
 8006be6:	4091      	lsls	r1, r2
 8006be8:	000a      	movs	r2, r1
 8006bea:	43d2      	mvns	r2, r2
 8006bec:	401a      	ands	r2, r3
 8006bee:	0011      	movs	r1, r2
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2010      	movs	r0, #16
 8006bf8:	4003      	ands	r3, r0
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	2110      	movs	r1, #16
 8006c0e:	400a      	ands	r2, r1
 8006c10:	21ff      	movs	r1, #255	; 0xff
 8006c12:	4091      	lsls	r1, r2
 8006c14:	000a      	movs	r2, r1
 8006c16:	43d2      	mvns	r2, r2
 8006c18:	401a      	ands	r2, r3
 8006c1a:	0011      	movs	r1, r2
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2010      	movs	r0, #16
 8006c24:	4003      	ands	r3, r0
 8006c26:	409a      	lsls	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d11d      	bne.n	8006c74 <HAL_DAC_ConfigChannel+0x15c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2210      	movs	r2, #16
 8006c44:	4013      	ands	r3, r2
 8006c46:	221f      	movs	r2, #31
 8006c48:	409a      	lsls	r2, r3
 8006c4a:	0013      	movs	r3, r2
 8006c4c:	43da      	mvns	r2, r3
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	4013      	ands	r3, r2
 8006c52:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	4013      	ands	r3, r2
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	409a      	lsls	r2, r3
 8006c64:	0013      	movs	r3, r2
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2210      	movs	r2, #16
 8006c80:	4013      	ands	r3, r2
 8006c82:	2207      	movs	r2, #7
 8006c84:	409a      	lsls	r2, r3
 8006c86:	0013      	movs	r3, r2
 8006c88:	43da      	mvns	r2, r3
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	409a      	lsls	r2, r3
 8006cac:	0013      	movs	r3, r2
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2110      	movs	r1, #16
 8006cc6:	400b      	ands	r3, r1
 8006cc8:	2180      	movs	r1, #128	; 0x80
 8006cca:	01c9      	lsls	r1, r1, #7
 8006ccc:	4099      	lsls	r1, r3
 8006cce:	000b      	movs	r3, r1
 8006cd0:	43d9      	mvns	r1, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	400a      	ands	r2, r1
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2210      	movs	r2, #16
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_DAC_ConfigChannel+0x234>)
 8006cea:	409a      	lsls	r2, r3
 8006cec:	0013      	movs	r3, r2
 8006cee:	43da      	mvns	r2, r3
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	4013      	ands	r3, r2
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	409a      	lsls	r2, r3
 8006d06:	0013      	movs	r3, r2
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2110      	movs	r1, #16
 8006d20:	400b      	ands	r3, r1
 8006d22:	21c0      	movs	r1, #192	; 0xc0
 8006d24:	4099      	lsls	r1, r3
 8006d26:	000b      	movs	r3, r1
 8006d28:	43d9      	mvns	r1, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	400a      	ands	r2, r1
 8006d30:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b008      	add	sp, #32
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	000003ff 	.word	0x000003ff
 8006d4c:	00000ffe 	.word	0x00000ffe

08006d50 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006d58:	46c0      	nop			; (mov r8, r8)
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b002      	add	sp, #8
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e077      	b.n	8006e62 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <HAL_DMA_Init+0x10c>)
 8006d78:	4694      	mov	ip, r2
 8006d7a:	4463      	add	r3, ip
 8006d7c:	2114      	movs	r1, #20
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7f9 f9cc 	bl	800011c <__udivsi3>
 8006d84:	0003      	movs	r3, r0
 8006d86:	009a      	lsls	r2, r3, #2
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2225      	movs	r2, #37	; 0x25
 8006d90:	2102      	movs	r1, #2
 8006d92:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4934      	ldr	r1, [pc, #208]	; (8006e70 <HAL_DMA_Init+0x110>)
 8006da0:	400a      	ands	r2, r1
 8006da2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6819      	ldr	r1, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f000 fa8d 	bl	80072fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	01db      	lsls	r3, r3, #7
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d102      	bne.n	8006df4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfc:	213f      	movs	r1, #63	; 0x3f
 8006dfe:	400a      	ands	r2, r1
 8006e00:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e0a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d011      	beq.n	8006e38 <HAL_DMA_Init+0xd8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d80d      	bhi.n	8006e38 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	0018      	movs	r0, r3
 8006e20:	f000 fa98 	bl	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006e34:	605a      	str	r2, [r3, #4]
 8006e36:	e008      	b.n	8006e4a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2225      	movs	r2, #37	; 0x25
 8006e54:	2101      	movs	r1, #1
 8006e56:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2224      	movs	r2, #36	; 0x24
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	0018      	movs	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	b002      	add	sp, #8
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	46c0      	nop			; (mov r8, r8)
 8006e6c:	bffdfff8 	.word	0xbffdfff8
 8006e70:	ffff800f 	.word	0xffff800f

08006e74 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e82:	2317      	movs	r3, #23
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	2200      	movs	r2, #0
 8006e88:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2224      	movs	r2, #36	; 0x24
 8006e8e:	5c9b      	ldrb	r3, [r3, r2]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_DMA_Start_IT+0x24>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e06f      	b.n	8006f78 <HAL_DMA_Start_IT+0x104>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2224      	movs	r2, #36	; 0x24
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2225      	movs	r2, #37	; 0x25
 8006ea4:	5c9b      	ldrb	r3, [r3, r2]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d157      	bne.n	8006f5c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2225      	movs	r2, #37	; 0x25
 8006eb0:	2102      	movs	r1, #2
 8006eb2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	438a      	bics	r2, r1
 8006ec8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f9d3 	bl	800727c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d008      	beq.n	8006ef0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	210e      	movs	r1, #14
 8006eea:	430a      	orrs	r2, r1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e00f      	b.n	8006f10 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2104      	movs	r1, #4
 8006efc:	438a      	bics	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	210a      	movs	r1, #10
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	2380      	movs	r3, #128	; 0x80
 8006f18:	025b      	lsls	r3, r3, #9
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	d008      	beq.n	8006f30 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f28:	2180      	movs	r1, #128	; 0x80
 8006f2a:	0049      	lsls	r1, r1, #1
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f42:	2180      	movs	r1, #128	; 0x80
 8006f44:	0049      	lsls	r1, r1, #1
 8006f46:	430a      	orrs	r2, r1
 8006f48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2101      	movs	r1, #1
 8006f56:	430a      	orrs	r2, r1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e00a      	b.n	8006f72 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2280      	movs	r2, #128	; 0x80
 8006f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2224      	movs	r2, #36	; 0x24
 8006f66:	2100      	movs	r1, #0
 8006f68:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006f6a:	2317      	movs	r3, #23
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	2201      	movs	r2, #1
 8006f70:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006f72:	2317      	movs	r3, #23
 8006f74:	18fb      	adds	r3, r7, r3
 8006f76:	781b      	ldrb	r3, [r3, #0]
}
 8006f78:	0018      	movs	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b006      	add	sp, #24
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e050      	b.n	8007034 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2225      	movs	r2, #37	; 0x25
 8006f96:	5c9b      	ldrb	r3, [r3, r2]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d008      	beq.n	8006fb0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2204      	movs	r2, #4
 8006fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2224      	movs	r2, #36	; 0x24
 8006fa8:	2100      	movs	r1, #0
 8006faa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e041      	b.n	8007034 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	210e      	movs	r1, #14
 8006fbc:	438a      	bics	r2, r1
 8006fbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fca:	491c      	ldr	r1, [pc, #112]	; (800703c <HAL_DMA_Abort+0xbc>)
 8006fcc:	400a      	ands	r2, r1
 8006fce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2101      	movs	r1, #1
 8006fdc:	438a      	bics	r2, r1
 8006fde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006fe0:	4b17      	ldr	r3, [pc, #92]	; (8007040 <HAL_DMA_Abort+0xc0>)
 8006fe2:	6859      	ldr	r1, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	221c      	movs	r2, #28
 8006fea:	4013      	ands	r3, r2
 8006fec:	2201      	movs	r2, #1
 8006fee:	409a      	lsls	r2, r3
 8006ff0:	4b13      	ldr	r3, [pc, #76]	; (8007040 <HAL_DMA_Abort+0xc0>)
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ffe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007012:	490a      	ldr	r1, [pc, #40]	; (800703c <HAL_DMA_Abort+0xbc>)
 8007014:	400a      	ands	r2, r1
 8007016:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007020:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2225      	movs	r2, #37	; 0x25
 8007026:	2101      	movs	r1, #1
 8007028:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2224      	movs	r2, #36	; 0x24
 800702e:	2100      	movs	r1, #0
 8007030:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	0018      	movs	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	b002      	add	sp, #8
 800703a:	bd80      	pop	{r7, pc}
 800703c:	fffffeff 	.word	0xfffffeff
 8007040:	40020000 	.word	0x40020000

08007044 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800704c:	210f      	movs	r1, #15
 800704e:	187b      	adds	r3, r7, r1
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2225      	movs	r2, #37	; 0x25
 8007058:	5c9b      	ldrb	r3, [r3, r2]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d006      	beq.n	800706e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2204      	movs	r2, #4
 8007064:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007066:	187b      	adds	r3, r7, r1
 8007068:	2201      	movs	r2, #1
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	e049      	b.n	8007102 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	210e      	movs	r1, #14
 800707a:	438a      	bics	r2, r1
 800707c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2101      	movs	r1, #1
 800708a:	438a      	bics	r2, r1
 800708c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007098:	491d      	ldr	r1, [pc, #116]	; (8007110 <HAL_DMA_Abort_IT+0xcc>)
 800709a:	400a      	ands	r2, r1
 800709c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800709e:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <HAL_DMA_Abort_IT+0xd0>)
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	221c      	movs	r2, #28
 80070a8:	4013      	ands	r3, r2
 80070aa:	2201      	movs	r2, #1
 80070ac:	409a      	lsls	r2, r3
 80070ae:	4b19      	ldr	r3, [pc, #100]	; (8007114 <HAL_DMA_Abort_IT+0xd0>)
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80070bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00c      	beq.n	80070e0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d0:	490f      	ldr	r1, [pc, #60]	; (8007110 <HAL_DMA_Abort_IT+0xcc>)
 80070d2:	400a      	ands	r2, r1
 80070d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80070de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2225      	movs	r2, #37	; 0x25
 80070e4:	2101      	movs	r1, #1
 80070e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2224      	movs	r2, #36	; 0x24
 80070ec:	2100      	movs	r1, #0
 80070ee:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	0010      	movs	r0, r2
 8007100:	4798      	blx	r3
    }
  }
  return status;
 8007102:	230f      	movs	r3, #15
 8007104:	18fb      	adds	r3, r7, r3
 8007106:	781b      	ldrb	r3, [r3, #0]
}
 8007108:	0018      	movs	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	b004      	add	sp, #16
 800710e:	bd80      	pop	{r7, pc}
 8007110:	fffffeff 	.word	0xfffffeff
 8007114:	40020000 	.word	0x40020000

08007118 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007120:	4b55      	ldr	r3, [pc, #340]	; (8007278 <HAL_DMA_IRQHandler+0x160>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	221c      	movs	r2, #28
 8007134:	4013      	ands	r3, r2
 8007136:	2204      	movs	r2, #4
 8007138:	409a      	lsls	r2, r3
 800713a:	0013      	movs	r3, r2
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4013      	ands	r3, r2
 8007140:	d027      	beq.n	8007192 <HAL_DMA_IRQHandler+0x7a>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2204      	movs	r2, #4
 8007146:	4013      	ands	r3, r2
 8007148:	d023      	beq.n	8007192 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2220      	movs	r2, #32
 8007152:	4013      	ands	r3, r2
 8007154:	d107      	bne.n	8007166 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2104      	movs	r1, #4
 8007162:	438a      	bics	r2, r1
 8007164:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007166:	4b44      	ldr	r3, [pc, #272]	; (8007278 <HAL_DMA_IRQHandler+0x160>)
 8007168:	6859      	ldr	r1, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	221c      	movs	r2, #28
 8007170:	4013      	ands	r3, r2
 8007172:	2204      	movs	r2, #4
 8007174:	409a      	lsls	r2, r3
 8007176:	4b40      	ldr	r3, [pc, #256]	; (8007278 <HAL_DMA_IRQHandler+0x160>)
 8007178:	430a      	orrs	r2, r1
 800717a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	2b00      	cmp	r3, #0
 8007182:	d100      	bne.n	8007186 <HAL_DMA_IRQHandler+0x6e>
 8007184:	e073      	b.n	800726e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	0010      	movs	r0, r2
 800718e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007190:	e06d      	b.n	800726e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	221c      	movs	r2, #28
 8007198:	4013      	ands	r3, r2
 800719a:	2202      	movs	r2, #2
 800719c:	409a      	lsls	r2, r3
 800719e:	0013      	movs	r3, r2
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4013      	ands	r3, r2
 80071a4:	d02e      	beq.n	8007204 <HAL_DMA_IRQHandler+0xec>
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2202      	movs	r2, #2
 80071aa:	4013      	ands	r3, r2
 80071ac:	d02a      	beq.n	8007204 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2220      	movs	r2, #32
 80071b6:	4013      	ands	r3, r2
 80071b8:	d10b      	bne.n	80071d2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	210a      	movs	r1, #10
 80071c6:	438a      	bics	r2, r1
 80071c8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2225      	movs	r2, #37	; 0x25
 80071ce:	2101      	movs	r1, #1
 80071d0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80071d2:	4b29      	ldr	r3, [pc, #164]	; (8007278 <HAL_DMA_IRQHandler+0x160>)
 80071d4:	6859      	ldr	r1, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	221c      	movs	r2, #28
 80071dc:	4013      	ands	r3, r2
 80071de:	2202      	movs	r2, #2
 80071e0:	409a      	lsls	r2, r3
 80071e2:	4b25      	ldr	r3, [pc, #148]	; (8007278 <HAL_DMA_IRQHandler+0x160>)
 80071e4:	430a      	orrs	r2, r1
 80071e6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	2100      	movs	r1, #0
 80071ee:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d03a      	beq.n	800726e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	0010      	movs	r0, r2
 8007200:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007202:	e034      	b.n	800726e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	221c      	movs	r2, #28
 800720a:	4013      	ands	r3, r2
 800720c:	2208      	movs	r2, #8
 800720e:	409a      	lsls	r2, r3
 8007210:	0013      	movs	r3, r2
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4013      	ands	r3, r2
 8007216:	d02b      	beq.n	8007270 <HAL_DMA_IRQHandler+0x158>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2208      	movs	r2, #8
 800721c:	4013      	ands	r3, r2
 800721e:	d027      	beq.n	8007270 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	210e      	movs	r1, #14
 800722c:	438a      	bics	r2, r1
 800722e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007230:	4b11      	ldr	r3, [pc, #68]	; (8007278 <HAL_DMA_IRQHandler+0x160>)
 8007232:	6859      	ldr	r1, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	221c      	movs	r2, #28
 800723a:	4013      	ands	r3, r2
 800723c:	2201      	movs	r2, #1
 800723e:	409a      	lsls	r2, r3
 8007240:	4b0d      	ldr	r3, [pc, #52]	; (8007278 <HAL_DMA_IRQHandler+0x160>)
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2225      	movs	r2, #37	; 0x25
 8007250:	2101      	movs	r1, #1
 8007252:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2224      	movs	r2, #36	; 0x24
 8007258:	2100      	movs	r1, #0
 800725a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	0010      	movs	r0, r2
 800726c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	46c0      	nop			; (mov r8, r8)
}
 8007272:	46bd      	mov	sp, r7
 8007274:	b004      	add	sp, #16
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40020000 	.word	0x40020000

0800727c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007292:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80072a4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <DMA_SetConfig+0x7c>)
 80072a8:	6859      	ldr	r1, [r3, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	221c      	movs	r2, #28
 80072b0:	4013      	ands	r3, r2
 80072b2:	2201      	movs	r2, #1
 80072b4:	409a      	lsls	r2, r3
 80072b6:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <DMA_SetConfig+0x7c>)
 80072b8:	430a      	orrs	r2, r1
 80072ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d108      	bne.n	80072de <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80072dc:	e007      	b.n	80072ee <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	60da      	str	r2, [r3, #12]
}
 80072ee:	46c0      	nop			; (mov r8, r8)
 80072f0:	46bd      	mov	sp, r7
 80072f2:	b004      	add	sp, #16
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	40020000 	.word	0x40020000

080072fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	089b      	lsrs	r3, r3, #2
 800730a:	4a10      	ldr	r2, [pc, #64]	; (800734c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800730c:	4694      	mov	ip, r2
 800730e:	4463      	add	r3, ip
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	001a      	movs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	001a      	movs	r2, r3
 800731e:	23ff      	movs	r3, #255	; 0xff
 8007320:	4013      	ands	r3, r2
 8007322:	3b08      	subs	r3, #8
 8007324:	2114      	movs	r1, #20
 8007326:	0018      	movs	r0, r3
 8007328:	f7f8 fef8 	bl	800011c <__udivsi3>
 800732c:	0003      	movs	r3, r0
 800732e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a07      	ldr	r2, [pc, #28]	; (8007350 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007334:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	221f      	movs	r2, #31
 800733a:	4013      	ands	r3, r2
 800733c:	2201      	movs	r2, #1
 800733e:	409a      	lsls	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007344:	46c0      	nop			; (mov r8, r8)
 8007346:	46bd      	mov	sp, r7
 8007348:	b004      	add	sp, #16
 800734a:	bd80      	pop	{r7, pc}
 800734c:	10008200 	.word	0x10008200
 8007350:	40020880 	.word	0x40020880

08007354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	223f      	movs	r2, #63	; 0x3f
 8007362:	4013      	ands	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800736a:	4694      	mov	ip, r2
 800736c:	4463      	add	r3, ip
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	001a      	movs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a07      	ldr	r2, [pc, #28]	; (8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800737a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3b01      	subs	r3, #1
 8007380:	2203      	movs	r2, #3
 8007382:	4013      	ands	r3, r2
 8007384:	2201      	movs	r2, #1
 8007386:	409a      	lsls	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800738c:	46c0      	nop			; (mov r8, r8)
 800738e:	46bd      	mov	sp, r7
 8007390:	b004      	add	sp, #16
 8007392:	bd80      	pop	{r7, pc}
 8007394:	1000823f 	.word	0x1000823f
 8007398:	40020940 	.word	0x40020940

0800739c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800739c:	b5b0      	push	{r4, r5, r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	603a      	str	r2, [r7, #0]
 80073a8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80073aa:	4b21      	ldr	r3, [pc, #132]	; (8007430 <HAL_FLASH_Program+0x94>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_FLASH_Program+0x1a>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e038      	b.n	8007428 <HAL_FLASH_Program+0x8c>
 80073b6:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <HAL_FLASH_Program+0x94>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80073bc:	4b1c      	ldr	r3, [pc, #112]	; (8007430 <HAL_FLASH_Program+0x94>)
 80073be:	2200      	movs	r2, #0
 80073c0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80073c2:	2517      	movs	r5, #23
 80073c4:	197c      	adds	r4, r7, r5
 80073c6:	23fa      	movs	r3, #250	; 0xfa
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	0018      	movs	r0, r3
 80073cc:	f000 f874 	bl	80074b8 <FLASH_WaitForLastOperation>
 80073d0:	0003      	movs	r3, r0
 80073d2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80073d4:	197b      	adds	r3, r7, r5
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11f      	bne.n	800741c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d106      	bne.n	80073f0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	0008      	movs	r0, r1
 80073ea:	f000 f8b3 	bl	8007554 <FLASH_Program_DoubleWord>
 80073ee:	e005      	b.n	80073fc <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	0011      	movs	r1, r2
 80073f6:	0018      	movs	r0, r3
 80073f8:	f005 fc36 	bl	800cc68 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80073fc:	2317      	movs	r3, #23
 80073fe:	18fc      	adds	r4, r7, r3
 8007400:	23fa      	movs	r3, #250	; 0xfa
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	0018      	movs	r0, r3
 8007406:	f000 f857 	bl	80074b8 <FLASH_WaitForLastOperation>
 800740a:	0003      	movs	r3, r0
 800740c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800740e:	4b09      	ldr	r3, [pc, #36]	; (8007434 <HAL_FLASH_Program+0x98>)
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	43d9      	mvns	r1, r3
 8007416:	4b07      	ldr	r3, [pc, #28]	; (8007434 <HAL_FLASH_Program+0x98>)
 8007418:	400a      	ands	r2, r1
 800741a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800741c:	4b04      	ldr	r3, [pc, #16]	; (8007430 <HAL_FLASH_Program+0x94>)
 800741e:	2200      	movs	r2, #0
 8007420:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007422:	2317      	movs	r3, #23
 8007424:	18fb      	adds	r3, r7, r3
 8007426:	781b      	ldrb	r3, [r3, #0]
}
 8007428:	0018      	movs	r0, r3
 800742a:	46bd      	mov	sp, r7
 800742c:	b006      	add	sp, #24
 800742e:	bdb0      	pop	{r4, r5, r7, pc}
 8007430:	200018b0 	.word	0x200018b0
 8007434:	40022000 	.word	0x40022000

08007438 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800743e:	1dfb      	adds	r3, r7, #7
 8007440:	2200      	movs	r2, #0
 8007442:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8007444:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <HAL_FLASH_Unlock+0x3c>)
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	da0c      	bge.n	8007466 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800744c:	4b09      	ldr	r3, [pc, #36]	; (8007474 <HAL_FLASH_Unlock+0x3c>)
 800744e:	4a0a      	ldr	r2, [pc, #40]	; (8007478 <HAL_FLASH_Unlock+0x40>)
 8007450:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <HAL_FLASH_Unlock+0x3c>)
 8007454:	4a09      	ldr	r2, [pc, #36]	; (800747c <HAL_FLASH_Unlock+0x44>)
 8007456:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8007458:	4b06      	ldr	r3, [pc, #24]	; (8007474 <HAL_FLASH_Unlock+0x3c>)
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	da02      	bge.n	8007466 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8007460:	1dfb      	adds	r3, r7, #7
 8007462:	2201      	movs	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8007466:	1dfb      	adds	r3, r7, #7
 8007468:	781b      	ldrb	r3, [r3, #0]
}
 800746a:	0018      	movs	r0, r3
 800746c:	46bd      	mov	sp, r7
 800746e:	b002      	add	sp, #8
 8007470:	bd80      	pop	{r7, pc}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	40022000 	.word	0x40022000
 8007478:	45670123 	.word	0x45670123
 800747c:	cdef89ab 	.word	0xcdef89ab

08007480 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8007486:	1dfb      	adds	r3, r7, #7
 8007488:	2201      	movs	r2, #1
 800748a:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800748c:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <HAL_FLASH_Lock+0x34>)
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <HAL_FLASH_Lock+0x34>)
 8007492:	2180      	movs	r1, #128	; 0x80
 8007494:	0609      	lsls	r1, r1, #24
 8007496:	430a      	orrs	r2, r1
 8007498:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800749a:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <HAL_FLASH_Lock+0x34>)
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da02      	bge.n	80074a8 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80074a2:	1dfb      	adds	r3, r7, #7
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80074a8:	1dfb      	adds	r3, r7, #7
 80074aa:	781b      	ldrb	r3, [r3, #0]
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b002      	add	sp, #8
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40022000 	.word	0x40022000

080074b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80074c0:	f7fd fdde 	bl	8005080 <HAL_GetTick>
 80074c4:	0002      	movs	r2, r0
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	189b      	adds	r3, r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	025b      	lsls	r3, r3, #9
 80074d0:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80074d2:	e007      	b.n	80074e4 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80074d4:	f7fd fdd4 	bl	8005080 <HAL_GetTick>
 80074d8:	0002      	movs	r2, r0
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4293      	cmp	r3, r2
 80074de:	d801      	bhi.n	80074e4 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e02a      	b.n	800753a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80074e4:	4b17      	ldr	r3, [pc, #92]	; (8007544 <FLASH_WaitForLastOperation+0x8c>)
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	4013      	ands	r3, r2
 80074ec:	d1f2      	bne.n	80074d4 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80074ee:	4b15      	ldr	r3, [pc, #84]	; (8007544 <FLASH_WaitForLastOperation+0x8c>)
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	4a15      	ldr	r2, [pc, #84]	; (8007548 <FLASH_WaitForLastOperation+0x90>)
 80074f4:	4013      	ands	r3, r2
 80074f6:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80074f8:	4b12      	ldr	r3, [pc, #72]	; (8007544 <FLASH_WaitForLastOperation+0x8c>)
 80074fa:	4a14      	ldr	r2, [pc, #80]	; (800754c <FLASH_WaitForLastOperation+0x94>)
 80074fc:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d004      	beq.n	800750e <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8007504:	4b12      	ldr	r3, [pc, #72]	; (8007550 <FLASH_WaitForLastOperation+0x98>)
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e015      	b.n	800753a <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800750e:	f7fd fdb7 	bl	8005080 <HAL_GetTick>
 8007512:	0002      	movs	r2, r0
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	189b      	adds	r3, r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800751a:	e007      	b.n	800752c <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 800751c:	f7fd fdb0 	bl	8005080 <HAL_GetTick>
 8007520:	0002      	movs	r2, r0
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4293      	cmp	r3, r2
 8007526:	d801      	bhi.n	800752c <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e006      	b.n	800753a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <FLASH_WaitForLastOperation+0x8c>)
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	2380      	movs	r3, #128	; 0x80
 8007532:	02db      	lsls	r3, r3, #11
 8007534:	4013      	ands	r3, r2
 8007536:	d1f1      	bne.n	800751c <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	0018      	movs	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	b004      	add	sp, #16
 8007540:	bd80      	pop	{r7, pc}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	40022000 	.word	0x40022000
 8007548:	0000c3fa 	.word	0x0000c3fa
 800754c:	0000c3fb 	.word	0x0000c3fb
 8007550:	200018b0 	.word	0x200018b0

08007554 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007554:	b5b0      	push	{r4, r5, r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	603a      	str	r2, [r7, #0]
 800755e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <FLASH_Program_DoubleWord+0x3c>)
 8007562:	695a      	ldr	r2, [r3, #20]
 8007564:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <FLASH_Program_DoubleWord+0x3c>)
 8007566:	2101      	movs	r1, #1
 8007568:	430a      	orrs	r2, r1
 800756a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8007572:	f3bf 8f6f 	isb	sy
}
 8007576:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	001c      	movs	r4, r3
 800757c:	2300      	movs	r3, #0
 800757e:	001d      	movs	r5, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	3304      	adds	r3, #4
 8007584:	0022      	movs	r2, r4
 8007586:	601a      	str	r2, [r3, #0]
}
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	46bd      	mov	sp, r7
 800758c:	b004      	add	sp, #16
 800758e:	bdb0      	pop	{r4, r5, r7, pc}
 8007590:	40022000 	.word	0x40022000

08007594 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007594:	b5b0      	push	{r4, r5, r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800759e:	4b35      	ldr	r3, [pc, #212]	; (8007674 <HAL_FLASHEx_Erase+0xe0>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d101      	bne.n	80075aa <HAL_FLASHEx_Erase+0x16>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e05f      	b.n	800766a <HAL_FLASHEx_Erase+0xd6>
 80075aa:	4b32      	ldr	r3, [pc, #200]	; (8007674 <HAL_FLASHEx_Erase+0xe0>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80075b0:	4b30      	ldr	r3, [pc, #192]	; (8007674 <HAL_FLASHEx_Erase+0xe0>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80075b6:	250f      	movs	r5, #15
 80075b8:	197c      	adds	r4, r7, r5
 80075ba:	23fa      	movs	r3, #250	; 0xfa
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	0018      	movs	r0, r3
 80075c0:	f7ff ff7a 	bl	80074b8 <FLASH_WaitForLastOperation>
 80075c4:	0003      	movs	r3, r0
 80075c6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80075c8:	002c      	movs	r4, r5
 80075ca:	193b      	adds	r3, r7, r4
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d145      	bne.n	800765e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2204      	movs	r2, #4
 80075d6:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d10d      	bne.n	80075fc <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	0018      	movs	r0, r3
 80075e6:	f000 f849 	bl	800767c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80075ea:	193c      	adds	r4, r7, r4
 80075ec:	23fa      	movs	r3, #250	; 0xfa
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	0018      	movs	r0, r3
 80075f2:	f7ff ff61 	bl	80074b8 <FLASH_WaitForLastOperation>
 80075f6:	0003      	movs	r3, r0
 80075f8:	7023      	strb	r3, [r4, #0]
 80075fa:	e030      	b.n	800765e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2201      	movs	r2, #1
 8007600:	4252      	negs	r2, r2
 8007602:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	60bb      	str	r3, [r7, #8]
 800760a:	e01a      	b.n	8007642 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	0011      	movs	r1, r2
 8007614:	0018      	movs	r0, r3
 8007616:	f000 f845 	bl	80076a4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800761a:	250f      	movs	r5, #15
 800761c:	197c      	adds	r4, r7, r5
 800761e:	23fa      	movs	r3, #250	; 0xfa
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	0018      	movs	r0, r3
 8007624:	f7ff ff48 	bl	80074b8 <FLASH_WaitForLastOperation>
 8007628:	0003      	movs	r3, r0
 800762a:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800762c:	197b      	adds	r3, r7, r5
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	601a      	str	r2, [r3, #0]
          break;
 800763a:	e00a      	b.n	8007652 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	3301      	adds	r3, #1
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	18d3      	adds	r3, r2, r3
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	429a      	cmp	r2, r3
 8007650:	d3dc      	bcc.n	800760c <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <HAL_FLASHEx_Erase+0xe4>)
 8007654:	695a      	ldr	r2, [r3, #20]
 8007656:	4b08      	ldr	r3, [pc, #32]	; (8007678 <HAL_FLASHEx_Erase+0xe4>)
 8007658:	2102      	movs	r1, #2
 800765a:	438a      	bics	r2, r1
 800765c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <HAL_FLASHEx_Erase+0xe0>)
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007664:	230f      	movs	r3, #15
 8007666:	18fb      	adds	r3, r7, r3
 8007668:	781b      	ldrb	r3, [r3, #0]
}
 800766a:	0018      	movs	r0, r3
 800766c:	46bd      	mov	sp, r7
 800766e:	b004      	add	sp, #16
 8007670:	bdb0      	pop	{r4, r5, r7, pc}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	200018b0 	.word	0x200018b0
 8007678:	40022000 	.word	0x40022000

0800767c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <FLASH_MassErase+0x24>)
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	431a      	orrs	r2, r3
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <FLASH_MassErase+0x24>)
 800768e:	2180      	movs	r1, #128	; 0x80
 8007690:	0249      	lsls	r1, r1, #9
 8007692:	430a      	orrs	r2, r1
 8007694:	615a      	str	r2, [r3, #20]
}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	46bd      	mov	sp, r7
 800769a:	b002      	add	sp, #8
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	40022000 	.word	0x40022000

080076a4 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80076ae:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <FLASH_PageErase+0x2c>)
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	4a08      	ldr	r2, [pc, #32]	; (80076d4 <FLASH_PageErase+0x30>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	00da      	lsls	r2, r3, #3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	431a      	orrs	r2, r3
 80076c0:	4b03      	ldr	r3, [pc, #12]	; (80076d0 <FLASH_PageErase+0x2c>)
 80076c2:	4905      	ldr	r1, [pc, #20]	; (80076d8 <FLASH_PageErase+0x34>)
 80076c4:	430a      	orrs	r2, r1
 80076c6:	615a      	str	r2, [r3, #20]
}
 80076c8:	46c0      	nop			; (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b004      	add	sp, #16
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40022000 	.word	0x40022000
 80076d4:	ffffe007 	.word	0xffffe007
 80076d8:	00010002 	.word	0x00010002

080076dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80076e6:	2300      	movs	r3, #0
 80076e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076ea:	e147      	b.n	800797c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2101      	movs	r1, #1
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4091      	lsls	r1, r2
 80076f6:	000a      	movs	r2, r1
 80076f8:	4013      	ands	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d100      	bne.n	8007704 <HAL_GPIO_Init+0x28>
 8007702:	e138      	b.n	8007976 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2203      	movs	r2, #3
 800770a:	4013      	ands	r3, r2
 800770c:	2b01      	cmp	r3, #1
 800770e:	d005      	beq.n	800771c <HAL_GPIO_Init+0x40>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2203      	movs	r2, #3
 8007716:	4013      	ands	r3, r2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d130      	bne.n	800777e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	2203      	movs	r2, #3
 8007728:	409a      	lsls	r2, r3
 800772a:	0013      	movs	r3, r2
 800772c:	43da      	mvns	r2, r3
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	4013      	ands	r3, r2
 8007732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	409a      	lsls	r2, r3
 800773e:	0013      	movs	r3, r2
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007752:	2201      	movs	r2, #1
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	409a      	lsls	r2, r3
 8007758:	0013      	movs	r3, r2
 800775a:	43da      	mvns	r2, r3
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4013      	ands	r3, r2
 8007760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	091b      	lsrs	r3, r3, #4
 8007768:	2201      	movs	r2, #1
 800776a:	401a      	ands	r2, r3
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	409a      	lsls	r2, r3
 8007770:	0013      	movs	r3, r2
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	4313      	orrs	r3, r2
 8007776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2203      	movs	r2, #3
 8007784:	4013      	ands	r3, r2
 8007786:	2b03      	cmp	r3, #3
 8007788:	d017      	beq.n	80077ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	2203      	movs	r2, #3
 8007796:	409a      	lsls	r2, r3
 8007798:	0013      	movs	r3, r2
 800779a:	43da      	mvns	r2, r3
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	4013      	ands	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	409a      	lsls	r2, r3
 80077ac:	0013      	movs	r3, r2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2203      	movs	r2, #3
 80077c0:	4013      	ands	r3, r2
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d123      	bne.n	800780e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	08da      	lsrs	r2, r3, #3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3208      	adds	r2, #8
 80077ce:	0092      	lsls	r2, r2, #2
 80077d0:	58d3      	ldr	r3, [r2, r3]
 80077d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2207      	movs	r2, #7
 80077d8:	4013      	ands	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	220f      	movs	r2, #15
 80077de:	409a      	lsls	r2, r3
 80077e0:	0013      	movs	r3, r2
 80077e2:	43da      	mvns	r2, r3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	4013      	ands	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2107      	movs	r1, #7
 80077f2:	400b      	ands	r3, r1
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	409a      	lsls	r2, r3
 80077f8:	0013      	movs	r3, r2
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	08da      	lsrs	r2, r3, #3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3208      	adds	r2, #8
 8007808:	0092      	lsls	r2, r2, #2
 800780a:	6939      	ldr	r1, [r7, #16]
 800780c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	2203      	movs	r2, #3
 800781a:	409a      	lsls	r2, r3
 800781c:	0013      	movs	r3, r2
 800781e:	43da      	mvns	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4013      	ands	r3, r2
 8007824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2203      	movs	r2, #3
 800782c:	401a      	ands	r2, r3
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	409a      	lsls	r2, r3
 8007834:	0013      	movs	r3, r2
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	4313      	orrs	r3, r2
 800783a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	23c0      	movs	r3, #192	; 0xc0
 8007848:	029b      	lsls	r3, r3, #10
 800784a:	4013      	ands	r3, r2
 800784c:	d100      	bne.n	8007850 <HAL_GPIO_Init+0x174>
 800784e:	e092      	b.n	8007976 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007850:	4a50      	ldr	r2, [pc, #320]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	089b      	lsrs	r3, r3, #2
 8007856:	3318      	adds	r3, #24
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	589b      	ldr	r3, [r3, r2]
 800785c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2203      	movs	r2, #3
 8007862:	4013      	ands	r3, r2
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	220f      	movs	r2, #15
 8007868:	409a      	lsls	r2, r3
 800786a:	0013      	movs	r3, r2
 800786c:	43da      	mvns	r2, r3
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	4013      	ands	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	23a0      	movs	r3, #160	; 0xa0
 8007878:	05db      	lsls	r3, r3, #23
 800787a:	429a      	cmp	r2, r3
 800787c:	d013      	beq.n	80078a6 <HAL_GPIO_Init+0x1ca>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a45      	ldr	r2, [pc, #276]	; (8007998 <HAL_GPIO_Init+0x2bc>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00d      	beq.n	80078a2 <HAL_GPIO_Init+0x1c6>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a44      	ldr	r2, [pc, #272]	; (800799c <HAL_GPIO_Init+0x2c0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d007      	beq.n	800789e <HAL_GPIO_Init+0x1c2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a43      	ldr	r2, [pc, #268]	; (80079a0 <HAL_GPIO_Init+0x2c4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d101      	bne.n	800789a <HAL_GPIO_Init+0x1be>
 8007896:	2303      	movs	r3, #3
 8007898:	e006      	b.n	80078a8 <HAL_GPIO_Init+0x1cc>
 800789a:	2305      	movs	r3, #5
 800789c:	e004      	b.n	80078a8 <HAL_GPIO_Init+0x1cc>
 800789e:	2302      	movs	r3, #2
 80078a0:	e002      	b.n	80078a8 <HAL_GPIO_Init+0x1cc>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <HAL_GPIO_Init+0x1cc>
 80078a6:	2300      	movs	r3, #0
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	2103      	movs	r1, #3
 80078ac:	400a      	ands	r2, r1
 80078ae:	00d2      	lsls	r2, r2, #3
 80078b0:	4093      	lsls	r3, r2
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80078b8:	4936      	ldr	r1, [pc, #216]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	089b      	lsrs	r3, r3, #2
 80078be:	3318      	adds	r3, #24
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078c6:	4b33      	ldr	r3, [pc, #204]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	43da      	mvns	r2, r3
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4013      	ands	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	2380      	movs	r3, #128	; 0x80
 80078dc:	035b      	lsls	r3, r3, #13
 80078de:	4013      	ands	r3, r2
 80078e0:	d003      	beq.n	80078ea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80078ea:	4b2a      	ldr	r3, [pc, #168]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80078f0:	4b28      	ldr	r3, [pc, #160]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	43da      	mvns	r2, r3
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	4013      	ands	r3, r2
 80078fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	2380      	movs	r3, #128	; 0x80
 8007906:	039b      	lsls	r3, r3, #14
 8007908:	4013      	ands	r3, r2
 800790a:	d003      	beq.n	8007914 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007914:	4b1f      	ldr	r3, [pc, #124]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800791a:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 800791c:	2384      	movs	r3, #132	; 0x84
 800791e:	58d3      	ldr	r3, [r2, r3]
 8007920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	43da      	mvns	r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4013      	ands	r3, r2
 800792a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	2380      	movs	r3, #128	; 0x80
 8007932:	029b      	lsls	r3, r3, #10
 8007934:	4013      	ands	r3, r2
 8007936:	d003      	beq.n	8007940 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007940:	4914      	ldr	r1, [pc, #80]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 8007942:	2284      	movs	r2, #132	; 0x84
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007948:	4a12      	ldr	r2, [pc, #72]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 800794a:	2380      	movs	r3, #128	; 0x80
 800794c:	58d3      	ldr	r3, [r2, r3]
 800794e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	43da      	mvns	r2, r3
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4013      	ands	r3, r2
 8007958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	2380      	movs	r3, #128	; 0x80
 8007960:	025b      	lsls	r3, r3, #9
 8007962:	4013      	ands	r3, r2
 8007964:	d003      	beq.n	800796e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800796e:	4909      	ldr	r1, [pc, #36]	; (8007994 <HAL_GPIO_Init+0x2b8>)
 8007970:	2280      	movs	r2, #128	; 0x80
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	3301      	adds	r3, #1
 800797a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	40da      	lsrs	r2, r3
 8007984:	1e13      	subs	r3, r2, #0
 8007986:	d000      	beq.n	800798a <HAL_GPIO_Init+0x2ae>
 8007988:	e6b0      	b.n	80076ec <HAL_GPIO_Init+0x10>
  }
}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	46c0      	nop			; (mov r8, r8)
 800798e:	46bd      	mov	sp, r7
 8007990:	b006      	add	sp, #24
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40021800 	.word	0x40021800
 8007998:	50000400 	.word	0x50000400
 800799c:	50000800 	.word	0x50000800
 80079a0:	50000c00 	.word	0x50000c00

080079a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	000a      	movs	r2, r1
 80079ae:	1cbb      	adds	r3, r7, #2
 80079b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	1cba      	adds	r2, r7, #2
 80079b8:	8812      	ldrh	r2, [r2, #0]
 80079ba:	4013      	ands	r3, r2
 80079bc:	d004      	beq.n	80079c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80079be:	230f      	movs	r3, #15
 80079c0:	18fb      	adds	r3, r7, r3
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e003      	b.n	80079d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079c8:	230f      	movs	r3, #15
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	2200      	movs	r2, #0
 80079ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80079d0:	230f      	movs	r3, #15
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	781b      	ldrb	r3, [r3, #0]
}
 80079d6:	0018      	movs	r0, r3
 80079d8:	46bd      	mov	sp, r7
 80079da:	b004      	add	sp, #16
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	0008      	movs	r0, r1
 80079e8:	0011      	movs	r1, r2
 80079ea:	1cbb      	adds	r3, r7, #2
 80079ec:	1c02      	adds	r2, r0, #0
 80079ee:	801a      	strh	r2, [r3, #0]
 80079f0:	1c7b      	adds	r3, r7, #1
 80079f2:	1c0a      	adds	r2, r1, #0
 80079f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079f6:	1c7b      	adds	r3, r7, #1
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d004      	beq.n	8007a08 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079fe:	1cbb      	adds	r3, r7, #2
 8007a00:	881a      	ldrh	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a06:	e003      	b.n	8007a10 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a08:	1cbb      	adds	r3, r7, #2
 8007a0a:	881a      	ldrh	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007a10:	46c0      	nop			; (mov r8, r8)
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b002      	add	sp, #8
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	0002      	movs	r2, r0
 8007a20:	1dbb      	adds	r3, r7, #6
 8007a22:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8007a24:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	1dba      	adds	r2, r7, #6
 8007a2a:	8812      	ldrh	r2, [r2, #0]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	d008      	beq.n	8007a42 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007a30:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007a32:	1dba      	adds	r2, r7, #6
 8007a34:	8812      	ldrh	r2, [r2, #0]
 8007a36:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007a38:	1dbb      	adds	r3, r7, #6
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f7fc fbe7 	bl	8004210 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8007a42:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	1dba      	adds	r2, r7, #6
 8007a48:	8812      	ldrh	r2, [r2, #0]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	d008      	beq.n	8007a60 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007a50:	1dba      	adds	r2, r7, #6
 8007a52:	8812      	ldrh	r2, [r2, #0]
 8007a54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007a56:	1dbb      	adds	r3, r7, #6
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f7fc fbc0 	bl	80041e0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007a60:	46c0      	nop			; (mov r8, r8)
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b002      	add	sp, #8
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	40021800 	.word	0x40021800

08007a6c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e08b      	b.n	8007b96 <HAL_LPTIM_Init+0x12a>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2236      	movs	r2, #54	; 0x36
 8007a82:	5c9b      	ldrb	r3, [r3, r2]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d107      	bne.n	8007a9a <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2235      	movs	r2, #53	; 0x35
 8007a8e:	2100      	movs	r1, #0
 8007a90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f7fd f8b3 	bl	8004c00 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2236      	movs	r2, #54	; 0x36
 8007a9e:	2102      	movs	r1, #2
 8007aa0:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d005      	beq.n	8007abe <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ab6:	2380      	movs	r3, #128	; 0x80
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d103      	bne.n	8007ac6 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	221e      	movs	r2, #30
 8007ac2:	4393      	bics	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	4a35      	ldr	r2, [pc, #212]	; (8007ba0 <HAL_LPTIM_Init+0x134>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4a34      	ldr	r2, [pc, #208]	; (8007ba4 <HAL_LPTIM_Init+0x138>)
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4a33      	ldr	r2, [pc, #204]	; (8007ba8 <HAL_LPTIM_Init+0x13c>)
 8007adc:	4013      	ands	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007ae8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007aee:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007af4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007afa:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d107      	bne.n	8007b1a <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007b12:	4313      	orrs	r3, r2
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d005      	beq.n	8007b2e <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b26:	2380      	movs	r3, #128	; 0x80
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d107      	bne.n	8007b3e <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007b36:	4313      	orrs	r3, r2
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	4a17      	ldr	r2, [pc, #92]	; (8007ba0 <HAL_LPTIM_Init+0x134>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00a      	beq.n	8007b5e <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b50:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007b56:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a10      	ldr	r2, [pc, #64]	; (8007bac <HAL_LPTIM_Init+0x140>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d108      	bne.n	8007b82 <HAL_LPTIM_Init+0x116>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	625a      	str	r2, [r3, #36]	; 0x24
 8007b80:	e004      	b.n	8007b8c <HAL_LPTIM_Init+0x120>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b8a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2236      	movs	r2, #54	; 0x36
 8007b90:	2101      	movs	r1, #1
 8007b92:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	0018      	movs	r0, r3
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	b004      	add	sp, #16
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	46c0      	nop			; (mov r8, r8)
 8007ba0:	0000ffff 	.word	0x0000ffff
 8007ba4:	ffff1f3f 	.word	0xffff1f3f
 8007ba8:	ff19f1fe 	.word	0xff19f1fe
 8007bac:	40007c00 	.word	0x40007c00

08007bb0 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2236      	movs	r2, #54	; 0x36
 8007bbe:	2102      	movs	r1, #2
 8007bc0:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a3c      	ldr	r2, [pc, #240]	; (8007cb8 <HAL_LPTIM_Counter_Start_IT+0x108>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d109      	bne.n	8007be0 <HAL_LPTIM_Counter_Start_IT+0x30>
 8007bcc:	4a3b      	ldr	r2, [pc, #236]	; (8007cbc <HAL_LPTIM_Counter_Start_IT+0x10c>)
 8007bce:	2380      	movs	r3, #128	; 0x80
 8007bd0:	58d3      	ldr	r3, [r2, r3]
 8007bd2:	493a      	ldr	r1, [pc, #232]	; (8007cbc <HAL_LPTIM_Counter_Start_IT+0x10c>)
 8007bd4:	2280      	movs	r2, #128	; 0x80
 8007bd6:	0592      	lsls	r2, r2, #22
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	2280      	movs	r2, #128	; 0x80
 8007bdc:	508b      	str	r3, [r1, r2]
 8007bde:	e008      	b.n	8007bf2 <HAL_LPTIM_Counter_Start_IT+0x42>
 8007be0:	4a36      	ldr	r2, [pc, #216]	; (8007cbc <HAL_LPTIM_Counter_Start_IT+0x10c>)
 8007be2:	2380      	movs	r3, #128	; 0x80
 8007be4:	58d3      	ldr	r3, [r2, r3]
 8007be6:	4935      	ldr	r1, [pc, #212]	; (8007cbc <HAL_LPTIM_Counter_Start_IT+0x10c>)
 8007be8:	2280      	movs	r2, #128	; 0x80
 8007bea:	05d2      	lsls	r2, r2, #23
 8007bec:	4313      	orrs	r3, r2
 8007bee:	2280      	movs	r2, #128	; 0x80
 8007bf0:	508b      	str	r3, [r1, r2]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d00d      	beq.n	8007c16 <HAL_LPTIM_Counter_Start_IT+0x66>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bfe:	2380      	movs	r3, #128	; 0x80
 8007c00:	041b      	lsls	r3, r3, #16
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d107      	bne.n	8007c16 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	492b      	ldr	r1, [pc, #172]	; (8007cc0 <HAL_LPTIM_Counter_Start_IT+0x110>)
 8007c12:	400a      	ands	r2, r1
 8007c14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2101      	movs	r1, #1
 8007c22:	430a      	orrs	r2, r1
 8007c24:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2210      	movs	r2, #16
 8007c2c:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2110      	movs	r1, #16
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	f000 f920 	bl	8007e80 <LPTIM_WaitForFlag>
 8007c40:	0003      	movs	r3, r0
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d101      	bne.n	8007c4a <HAL_LPTIM_Counter_Start_IT+0x9a>
  {
    return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e031      	b.n	8007cae <HAL_LPTIM_Counter_Start_IT+0xfe>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	f000 f94f 	bl	8007ef0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	0018      	movs	r0, r3
 8007c56:	f000 f907 	bl	8007e68 <HAL_LPTIM_GetState>
 8007c5a:	0003      	movs	r3, r0
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d101      	bne.n	8007c64 <HAL_LPTIM_Counter_Start_IT+0xb4>
  {
    return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e024      	b.n	8007cae <HAL_LPTIM_Counter_Start_IT+0xfe>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689a      	ldr	r2, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2110      	movs	r1, #16
 8007c70:	430a      	orrs	r2, r1
 8007c72:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2102      	movs	r1, #2
 8007c80:	430a      	orrs	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691a      	ldr	r2, [r3, #16]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2101      	movs	r1, #1
 8007c90:	430a      	orrs	r2, r1
 8007c92:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691a      	ldr	r2, [r3, #16]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2104      	movs	r1, #4
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2236      	movs	r2, #54	; 0x36
 8007ca8:	2101      	movs	r1, #1
 8007caa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	0018      	movs	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b002      	add	sp, #8
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	40007c00 	.word	0x40007c00
 8007cbc:	40021800 	.word	0x40021800
 8007cc0:	fffff1ff 	.word	0xfffff1ff

08007cc4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d10e      	bne.n	8007cf8 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d107      	bne.n	8007cf8 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2201      	movs	r2, #1
 8007cee:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f000 f888 	bl	8007e08 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d10e      	bne.n	8007d24 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	4013      	ands	r3, r2
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d107      	bne.n	8007d24 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	0018      	movs	r0, r3
 8007d20:	f7fb fbc0 	bl	80034a4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d10e      	bne.n	8007d50 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	2204      	movs	r2, #4
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d107      	bne.n	8007d50 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2204      	movs	r2, #4
 8007d46:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	f000 f864 	bl	8007e18 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2208      	movs	r2, #8
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d10e      	bne.n	8007d7c <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2208      	movs	r2, #8
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d107      	bne.n	8007d7c <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2208      	movs	r2, #8
 8007d72:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	0018      	movs	r0, r3
 8007d78:	f000 f856 	bl	8007e28 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2210      	movs	r2, #16
 8007d84:	4013      	ands	r3, r2
 8007d86:	2b10      	cmp	r3, #16
 8007d88:	d10e      	bne.n	8007da8 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2210      	movs	r2, #16
 8007d92:	4013      	ands	r3, r2
 8007d94:	2b10      	cmp	r3, #16
 8007d96:	d107      	bne.n	8007da8 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2210      	movs	r2, #16
 8007d9e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	0018      	movs	r0, r3
 8007da4:	f000 f848 	bl	8007e38 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2220      	movs	r2, #32
 8007db0:	4013      	ands	r3, r2
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d10e      	bne.n	8007dd4 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d107      	bne.n	8007dd4 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	0018      	movs	r0, r3
 8007dd0:	f000 f83a 	bl	8007e48 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2240      	movs	r2, #64	; 0x40
 8007ddc:	4013      	ands	r3, r2
 8007dde:	2b40      	cmp	r3, #64	; 0x40
 8007de0:	d10e      	bne.n	8007e00 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	2240      	movs	r2, #64	; 0x40
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b40      	cmp	r3, #64	; 0x40
 8007dee:	d107      	bne.n	8007e00 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2240      	movs	r2, #64	; 0x40
 8007df6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	f000 f82c 	bl	8007e58 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e00:	46c0      	nop			; (mov r8, r8)
 8007e02:	46bd      	mov	sp, r7
 8007e04:	b002      	add	sp, #8
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007e10:	46c0      	nop			; (mov r8, r8)
 8007e12:	46bd      	mov	sp, r7
 8007e14:	b002      	add	sp, #8
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007e20:	46c0      	nop			; (mov r8, r8)
 8007e22:	46bd      	mov	sp, r7
 8007e24:	b002      	add	sp, #8
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007e30:	46c0      	nop			; (mov r8, r8)
 8007e32:	46bd      	mov	sp, r7
 8007e34:	b002      	add	sp, #8
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b002      	add	sp, #8
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007e50:	46c0      	nop			; (mov r8, r8)
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b002      	add	sp, #8
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007e60:	46c0      	nop			; (mov r8, r8)
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b002      	add	sp, #8
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2236      	movs	r2, #54	; 0x36
 8007e74:	5c9b      	ldrb	r3, [r3, r2]
 8007e76:	b2db      	uxtb	r3, r3
}
 8007e78:	0018      	movs	r0, r3
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	b002      	add	sp, #8
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007e8a:	230f      	movs	r3, #15
 8007e8c:	18fb      	adds	r3, r7, r3
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007e92:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <LPTIM_WaitForFlag+0x68>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4915      	ldr	r1, [pc, #84]	; (8007eec <LPTIM_WaitForFlag+0x6c>)
 8007e98:	0018      	movs	r0, r3
 8007e9a:	f7f8 f93f 	bl	800011c <__udivsi3>
 8007e9e:	0003      	movs	r3, r0
 8007ea0:	001a      	movs	r2, r3
 8007ea2:	0013      	movs	r3, r2
 8007ea4:	015b      	lsls	r3, r3, #5
 8007ea6:	1a9b      	subs	r3, r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	189b      	adds	r3, r3, r2
 8007eac:	00db      	lsls	r3, r3, #3
 8007eae:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d103      	bne.n	8007ec4 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8007ebc:	230f      	movs	r3, #15
 8007ebe:	18fb      	adds	r3, r7, r3
 8007ec0:	2203      	movs	r2, #3
 8007ec2:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d002      	beq.n	8007eda <LPTIM_WaitForFlag+0x5a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1ea      	bne.n	8007eb0 <LPTIM_WaitForFlag+0x30>

  return result;
 8007eda:	230f      	movs	r3, #15
 8007edc:	18fb      	adds	r3, r7, r3
 8007ede:	781b      	ldrb	r3, [r3, #0]
}
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b004      	add	sp, #16
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	200000e8 	.word	0x200000e8
 8007eec:	00004e20 	.word	0x00004e20

08007ef0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08c      	sub	sp, #48	; 0x30
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007efc:	f3ef 8310 	mrs	r3, PRIMASK
 8007f00:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f02:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8007f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f06:	2301      	movs	r3, #1
 8007f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f383 8810 	msr	PRIMASK, r3
}
 8007f10:	46c0      	nop			; (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a73      	ldr	r2, [pc, #460]	; (80080e4 <LPTIM_Disable+0x1f4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d003      	beq.n	8007f24 <LPTIM_Disable+0x34>
 8007f1c:	4a72      	ldr	r2, [pc, #456]	; (80080e8 <LPTIM_Disable+0x1f8>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d007      	beq.n	8007f32 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8007f22:	e00d      	b.n	8007f40 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007f24:	4b71      	ldr	r3, [pc, #452]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007f26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f28:	23c0      	movs	r3, #192	; 0xc0
 8007f2a:	031b      	lsls	r3, r3, #12
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007f30:	e006      	b.n	8007f40 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007f32:	4b6e      	ldr	r3, [pc, #440]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f36:	23c0      	movs	r3, #192	; 0xc0
 8007f38:	039b      	lsls	r3, r3, #14
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007f3e:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a5d      	ldr	r2, [pc, #372]	; (80080e4 <LPTIM_Disable+0x1f4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <LPTIM_Disable+0x8a>
 8007f72:	4a5d      	ldr	r2, [pc, #372]	; (80080e8 <LPTIM_Disable+0x1f8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00e      	beq.n	8007f96 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8007f78:	e01b      	b.n	8007fb2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8007f7a:	4b5c      	ldr	r3, [pc, #368]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7e:	4b5b      	ldr	r3, [pc, #364]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007f80:	2180      	movs	r1, #128	; 0x80
 8007f82:	0609      	lsls	r1, r1, #24
 8007f84:	430a      	orrs	r2, r1
 8007f86:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8007f88:	4b58      	ldr	r3, [pc, #352]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8c:	4b57      	ldr	r3, [pc, #348]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007f8e:	0052      	lsls	r2, r2, #1
 8007f90:	0852      	lsrs	r2, r2, #1
 8007f92:	62da      	str	r2, [r3, #44]	; 0x2c
      break;
 8007f94:	e00d      	b.n	8007fb2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8007f96:	4b55      	ldr	r3, [pc, #340]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9a:	4b54      	ldr	r3, [pc, #336]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007f9c:	2180      	movs	r1, #128	; 0x80
 8007f9e:	05c9      	lsls	r1, r1, #23
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8007fa4:	4b51      	ldr	r3, [pc, #324]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa8:	4b50      	ldr	r3, [pc, #320]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007faa:	4951      	ldr	r1, [pc, #324]	; (80080f0 <LPTIM_Disable+0x200>)
 8007fac:	400a      	ands	r2, r1
 8007fae:	62da      	str	r2, [r3, #44]	; 0x2c
      break;
 8007fb0:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d103      	bne.n	8007fc0 <LPTIM_Disable+0xd0>
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d100      	bne.n	8007fc0 <LPTIM_Disable+0xd0>
 8007fbe:	e071      	b.n	80080a4 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a47      	ldr	r2, [pc, #284]	; (80080e4 <LPTIM_Disable+0x1f4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d003      	beq.n	8007fd2 <LPTIM_Disable+0xe2>
 8007fca:	4a47      	ldr	r2, [pc, #284]	; (80080e8 <LPTIM_Disable+0x1f8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d007      	beq.n	8007fe0 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8007fd0:	e00d      	b.n	8007fee <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8007fd2:	4b46      	ldr	r3, [pc, #280]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fd6:	4b45      	ldr	r3, [pc, #276]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007fd8:	4946      	ldr	r1, [pc, #280]	; (80080f4 <LPTIM_Disable+0x204>)
 8007fda:	400a      	ands	r2, r1
 8007fdc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007fde:	e006      	b.n	8007fee <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8007fe0:	4b42      	ldr	r3, [pc, #264]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007fe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fe4:	4b41      	ldr	r3, [pc, #260]	; (80080ec <LPTIM_Disable+0x1fc>)
 8007fe6:	4944      	ldr	r1, [pc, #272]	; (80080f8 <LPTIM_Disable+0x208>)
 8007fe8:	400a      	ands	r2, r1
 8007fea:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007fec:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01b      	beq.n	800802c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2101      	movs	r1, #1
 8008000:	430a      	orrs	r2, r1
 8008002:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2108      	movs	r1, #8
 8008010:	0018      	movs	r0, r3
 8008012:	f7ff ff35 	bl	8007e80 <LPTIM_WaitForFlag>
 8008016:	0003      	movs	r3, r0
 8008018:	2b03      	cmp	r3, #3
 800801a:	d103      	bne.n	8008024 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2236      	movs	r2, #54	; 0x36
 8008020:	2103      	movs	r1, #3
 8008022:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2208      	movs	r2, #8
 800802a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d01b      	beq.n	800806a <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2101      	movs	r1, #1
 800803e:	430a      	orrs	r2, r1
 8008040:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2110      	movs	r1, #16
 800804e:	0018      	movs	r0, r3
 8008050:	f7ff ff16 	bl	8007e80 <LPTIM_WaitForFlag>
 8008054:	0003      	movs	r3, r0
 8008056:	2b03      	cmp	r3, #3
 8008058:	d103      	bne.n	8008062 <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2236      	movs	r2, #54	; 0x36
 800805e:	2103      	movs	r1, #3
 8008060:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2210      	movs	r2, #16
 8008068:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1d      	ldr	r2, [pc, #116]	; (80080e4 <LPTIM_Disable+0x1f4>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d003      	beq.n	800807c <LPTIM_Disable+0x18c>
 8008074:	4a1c      	ldr	r2, [pc, #112]	; (80080e8 <LPTIM_Disable+0x1f8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00a      	beq.n	8008090 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800807a:	e014      	b.n	80080a6 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800807c:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <LPTIM_Disable+0x1fc>)
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	4a1c      	ldr	r2, [pc, #112]	; (80080f4 <LPTIM_Disable+0x204>)
 8008082:	4013      	ands	r3, r2
 8008084:	0019      	movs	r1, r3
 8008086:	4b19      	ldr	r3, [pc, #100]	; (80080ec <LPTIM_Disable+0x1fc>)
 8008088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800808a:	430a      	orrs	r2, r1
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800808e:	e00a      	b.n	80080a6 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008090:	4b16      	ldr	r3, [pc, #88]	; (80080ec <LPTIM_Disable+0x1fc>)
 8008092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008094:	4a18      	ldr	r2, [pc, #96]	; (80080f8 <LPTIM_Disable+0x208>)
 8008096:	4013      	ands	r3, r2
 8008098:	0019      	movs	r1, r3
 800809a:	4b14      	ldr	r3, [pc, #80]	; (80080ec <LPTIM_Disable+0x1fc>)
 800809c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800809e:	430a      	orrs	r2, r1
 80080a0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80080a2:	e000      	b.n	80080a6 <LPTIM_Disable+0x1b6>
    }
  }
 80080a4:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	691a      	ldr	r2, [r3, #16]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2101      	movs	r1, #1
 80080b2:	438a      	bics	r2, r1
 80080b4:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080bc:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6a3a      	ldr	r2, [r7, #32]
 80080c4:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	625a      	str	r2, [r3, #36]	; 0x24
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f383 8810 	msr	PRIMASK, r3
}
 80080d8:	46c0      	nop			; (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	46bd      	mov	sp, r7
 80080de:	b00c      	add	sp, #48	; 0x30
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	40007c00 	.word	0x40007c00
 80080e8:	40009400 	.word	0x40009400
 80080ec:	40021000 	.word	0x40021000
 80080f0:	bfffffff 	.word	0xbfffffff
 80080f4:	fff3ffff 	.word	0xfff3ffff
 80080f8:	ffcfffff 	.word	0xffcfffff

080080fc <HAL_PWREx_ConfigPVD>:
  * @note   User should take care that rising threshold is higher than falling
  *         one in order to avoid having always PVDO output set.
  * @retval HAL_OK
  */
HAL_StatusTypeDef HAL_PWREx_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PVD level bits only according to PVDLevel value */
  MODIFY_REG(PWR->CR2, (PWR_CR2_PVDFT | PWR_CR2_PVDRT), sConfigPVD->PVDLevel);
 8008104:	4b30      	ldr	r3, [pc, #192]	; (80081c8 <HAL_PWREx_ConfigPVD+0xcc>)
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	227e      	movs	r2, #126	; 0x7e
 800810a:	4393      	bics	r3, r2
 800810c:	0019      	movs	r1, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b2d      	ldr	r3, [pc, #180]	; (80081c8 <HAL_PWREx_ConfigPVD+0xcc>)
 8008114:	430a      	orrs	r2, r1
 8008116:	605a      	str	r2, [r3, #4]

  /* Clear any previous config, in case no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8008118:	4a2c      	ldr	r2, [pc, #176]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 800811a:	2384      	movs	r3, #132	; 0x84
 800811c:	58d3      	ldr	r3, [r2, r3]
 800811e:	492b      	ldr	r1, [pc, #172]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 8008120:	4a2b      	ldr	r2, [pc, #172]	; (80081d0 <HAL_PWREx_ConfigPVD+0xd4>)
 8008122:	4013      	ands	r3, r2
 8008124:	2284      	movs	r2, #132	; 0x84
 8008126:	508b      	str	r3, [r1, r2]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8008128:	4a28      	ldr	r2, [pc, #160]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 800812a:	2380      	movs	r3, #128	; 0x80
 800812c:	58d3      	ldr	r3, [r2, r3]
 800812e:	4927      	ldr	r1, [pc, #156]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 8008130:	4a27      	ldr	r2, [pc, #156]	; (80081d0 <HAL_PWREx_ConfigPVD+0xd4>)
 8008132:	4013      	ands	r3, r2
 8008134:	2280      	movs	r2, #128	; 0x80
 8008136:	508b      	str	r3, [r1, r2]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8008138:	4b24      	ldr	r3, [pc, #144]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	4b23      	ldr	r3, [pc, #140]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 800813e:	4924      	ldr	r1, [pc, #144]	; (80081d0 <HAL_PWREx_ConfigPVD+0xd4>)
 8008140:	400a      	ands	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8008144:	4b21      	ldr	r3, [pc, #132]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	4b20      	ldr	r3, [pc, #128]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 800814a:	4921      	ldr	r1, [pc, #132]	; (80081d0 <HAL_PWREx_ConfigPVD+0xd4>)
 800814c:	400a      	ands	r2, r1
 800814e:	601a      	str	r2, [r3, #0]

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	2380      	movs	r3, #128	; 0x80
 8008156:	025b      	lsls	r3, r3, #9
 8008158:	4013      	ands	r3, r2
 800815a:	d008      	beq.n	800816e <HAL_PWREx_ConfigPVD+0x72>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800815c:	4a1b      	ldr	r2, [pc, #108]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 800815e:	2380      	movs	r3, #128	; 0x80
 8008160:	58d3      	ldr	r3, [r2, r3]
 8008162:	491a      	ldr	r1, [pc, #104]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 8008164:	2280      	movs	r2, #128	; 0x80
 8008166:	0252      	lsls	r2, r2, #9
 8008168:	4313      	orrs	r3, r2
 800816a:	2280      	movs	r2, #128	; 0x80
 800816c:	508b      	str	r3, [r1, r2]
  }

  /* Configure event mode */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	2380      	movs	r3, #128	; 0x80
 8008174:	029b      	lsls	r3, r3, #10
 8008176:	4013      	ands	r3, r2
 8008178:	d008      	beq.n	800818c <HAL_PWREx_ConfigPVD+0x90>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800817a:	4a14      	ldr	r2, [pc, #80]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 800817c:	2384      	movs	r3, #132	; 0x84
 800817e:	58d3      	ldr	r3, [r2, r3]
 8008180:	4912      	ldr	r1, [pc, #72]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 8008182:	2280      	movs	r2, #128	; 0x80
 8008184:	0252      	lsls	r2, r2, #9
 8008186:	4313      	orrs	r3, r2
 8008188:	2284      	movs	r2, #132	; 0x84
 800818a:	508b      	str	r3, [r1, r2]
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	4013      	ands	r3, r2
 8008194:	d006      	beq.n	80081a4 <HAL_PWREx_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8008196:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	0249      	lsls	r1, r1, #9
 80081a0:	430a      	orrs	r2, r1
 80081a2:	601a      	str	r2, [r3, #0]
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	2202      	movs	r2, #2
 80081aa:	4013      	ands	r3, r2
 80081ac:	d006      	beq.n	80081bc <HAL_PWREx_ConfigPVD+0xc0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80081ae:	4b07      	ldr	r3, [pc, #28]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <HAL_PWREx_ConfigPVD+0xd0>)
 80081b4:	2180      	movs	r1, #128	; 0x80
 80081b6:	0249      	lsls	r1, r1, #9
 80081b8:	430a      	orrs	r2, r1
 80081ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	0018      	movs	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	b002      	add	sp, #8
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	46c0      	nop			; (mov r8, r8)
 80081c8:	40007000 	.word	0x40007000
 80081cc:	40021800 	.word	0x40021800
 80081d0:	fffeffff 	.word	0xfffeffff

080081d4 <HAL_PWREx_EnablePVD>:
/**
  * @brief  Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWREx_EnablePVD(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <HAL_PWREx_EnablePVD+0x18>)
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	4b03      	ldr	r3, [pc, #12]	; (80081ec <HAL_PWREx_EnablePVD+0x18>)
 80081de:	2101      	movs	r1, #1
 80081e0:	430a      	orrs	r2, r1
 80081e2:	605a      	str	r2, [r3, #4]
}
 80081e4:	46c0      	nop			; (mov r8, r8)
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	46c0      	nop			; (mov r8, r8)
 80081ec:	40007000 	.word	0x40007000

080081f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80081f8:	4b19      	ldr	r3, [pc, #100]	; (8008260 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a19      	ldr	r2, [pc, #100]	; (8008264 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80081fe:	4013      	ands	r3, r2
 8008200:	0019      	movs	r1, r3
 8008202:	4b17      	ldr	r3, [pc, #92]	; (8008260 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	430a      	orrs	r2, r1
 8008208:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	2380      	movs	r3, #128	; 0x80
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	429a      	cmp	r2, r3
 8008212:	d11f      	bne.n	8008254 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008214:	4b14      	ldr	r3, [pc, #80]	; (8008268 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	0013      	movs	r3, r2
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	189b      	adds	r3, r3, r2
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	4912      	ldr	r1, [pc, #72]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008222:	0018      	movs	r0, r3
 8008224:	f7f7 ff7a 	bl	800011c <__udivsi3>
 8008228:	0003      	movs	r3, r0
 800822a:	3301      	adds	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800822e:	e008      	b.n	8008242 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3b01      	subs	r3, #1
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e001      	b.n	8008242 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e009      	b.n	8008256 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008242:	4b07      	ldr	r3, [pc, #28]	; (8008260 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	2380      	movs	r3, #128	; 0x80
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	401a      	ands	r2, r3
 800824c:	2380      	movs	r3, #128	; 0x80
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	429a      	cmp	r2, r3
 8008252:	d0ed      	beq.n	8008230 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	0018      	movs	r0, r3
 8008258:	46bd      	mov	sp, r7
 800825a:	b004      	add	sp, #16
 800825c:	bd80      	pop	{r7, pc}
 800825e:	46c0      	nop			; (mov r8, r8)
 8008260:	40007000 	.word	0x40007000
 8008264:	fffff9ff 	.word	0xfffff9ff
 8008268:	200000e8 	.word	0x200000e8
 800826c:	000f4240 	.word	0x000f4240

08008270 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 8008274:	4b0d      	ldr	r3, [pc, #52]	; (80082ac <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	2380      	movs	r3, #128	; 0x80
 800827a:	025b      	lsls	r3, r3, #9
 800827c:	4013      	ands	r3, r2
 800827e:	d005      	beq.n	800828c <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 8008280:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8008282:	2280      	movs	r2, #128	; 0x80
 8008284:	0252      	lsls	r2, r2, #9
 8008286:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 8008288:	f7fb f8fa 	bl	8003480 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 800828c:	4b07      	ldr	r3, [pc, #28]	; (80082ac <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	2380      	movs	r3, #128	; 0x80
 8008292:	025b      	lsls	r3, r3, #9
 8008294:	4013      	ands	r3, r2
 8008296:	d005      	beq.n	80082a4 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800829a:	2280      	movs	r2, #128	; 0x80
 800829c:	0252      	lsls	r2, r2, #9
 800829e:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 80082a0:	f000 f806 	bl	80082b0 <HAL_PWREx_PVD_Falling_Callback>
  }
}
 80082a4:	46c0      	nop			; (mov r8, r8)
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	40021800 	.word	0x40021800

080082b0 <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 80082b4:	46c0      	nop			; (mov r8, r8)
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80082c0:	4b03      	ldr	r3, [pc, #12]	; (80082d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	23e0      	movs	r3, #224	; 0xe0
 80082c6:	01db      	lsls	r3, r3, #7
 80082c8:	4013      	ands	r3, r2
}
 80082ca:	0018      	movs	r0, r3
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40021000 	.word	0x40021000

080082d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e2fe      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	4013      	ands	r3, r2
 80082ee:	d100      	bne.n	80082f2 <HAL_RCC_OscConfig+0x1e>
 80082f0:	e07c      	b.n	80083ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082f2:	4bc3      	ldr	r3, [pc, #780]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2238      	movs	r2, #56	; 0x38
 80082f8:	4013      	ands	r3, r2
 80082fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082fc:	4bc0      	ldr	r3, [pc, #768]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	2203      	movs	r2, #3
 8008302:	4013      	ands	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2b10      	cmp	r3, #16
 800830a:	d102      	bne.n	8008312 <HAL_RCC_OscConfig+0x3e>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2b03      	cmp	r3, #3
 8008310:	d002      	beq.n	8008318 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d10b      	bne.n	8008330 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008318:	4bb9      	ldr	r3, [pc, #740]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	029b      	lsls	r3, r3, #10
 8008320:	4013      	ands	r3, r2
 8008322:	d062      	beq.n	80083ea <HAL_RCC_OscConfig+0x116>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d15e      	bne.n	80083ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e2d9      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	2380      	movs	r3, #128	; 0x80
 8008336:	025b      	lsls	r3, r3, #9
 8008338:	429a      	cmp	r2, r3
 800833a:	d107      	bne.n	800834c <HAL_RCC_OscConfig+0x78>
 800833c:	4bb0      	ldr	r3, [pc, #704]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	4baf      	ldr	r3, [pc, #700]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008342:	2180      	movs	r1, #128	; 0x80
 8008344:	0249      	lsls	r1, r1, #9
 8008346:	430a      	orrs	r2, r1
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e020      	b.n	800838e <HAL_RCC_OscConfig+0xba>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	23a0      	movs	r3, #160	; 0xa0
 8008352:	02db      	lsls	r3, r3, #11
 8008354:	429a      	cmp	r2, r3
 8008356:	d10e      	bne.n	8008376 <HAL_RCC_OscConfig+0xa2>
 8008358:	4ba9      	ldr	r3, [pc, #676]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	4ba8      	ldr	r3, [pc, #672]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800835e:	2180      	movs	r1, #128	; 0x80
 8008360:	02c9      	lsls	r1, r1, #11
 8008362:	430a      	orrs	r2, r1
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	4ba6      	ldr	r3, [pc, #664]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	4ba5      	ldr	r3, [pc, #660]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800836c:	2180      	movs	r1, #128	; 0x80
 800836e:	0249      	lsls	r1, r1, #9
 8008370:	430a      	orrs	r2, r1
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	e00b      	b.n	800838e <HAL_RCC_OscConfig+0xba>
 8008376:	4ba2      	ldr	r3, [pc, #648]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4ba1      	ldr	r3, [pc, #644]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800837c:	49a1      	ldr	r1, [pc, #644]	; (8008604 <HAL_RCC_OscConfig+0x330>)
 800837e:	400a      	ands	r2, r1
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	4b9f      	ldr	r3, [pc, #636]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b9e      	ldr	r3, [pc, #632]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008388:	499f      	ldr	r1, [pc, #636]	; (8008608 <HAL_RCC_OscConfig+0x334>)
 800838a:	400a      	ands	r2, r1
 800838c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d014      	beq.n	80083c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008396:	f7fc fe73 	bl	8005080 <HAL_GetTick>
 800839a:	0003      	movs	r3, r0
 800839c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083a0:	f7fc fe6e 	bl	8005080 <HAL_GetTick>
 80083a4:	0002      	movs	r2, r0
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b64      	cmp	r3, #100	; 0x64
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e298      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083b2:	4b93      	ldr	r3, [pc, #588]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	2380      	movs	r3, #128	; 0x80
 80083b8:	029b      	lsls	r3, r3, #10
 80083ba:	4013      	ands	r3, r2
 80083bc:	d0f0      	beq.n	80083a0 <HAL_RCC_OscConfig+0xcc>
 80083be:	e015      	b.n	80083ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7fc fe5e 	bl	8005080 <HAL_GetTick>
 80083c4:	0003      	movs	r3, r0
 80083c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083c8:	e008      	b.n	80083dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083ca:	f7fc fe59 	bl	8005080 <HAL_GetTick>
 80083ce:	0002      	movs	r2, r0
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b64      	cmp	r3, #100	; 0x64
 80083d6:	d901      	bls.n	80083dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e283      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083dc:	4b88      	ldr	r3, [pc, #544]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	029b      	lsls	r3, r3, #10
 80083e4:	4013      	ands	r3, r2
 80083e6:	d1f0      	bne.n	80083ca <HAL_RCC_OscConfig+0xf6>
 80083e8:	e000      	b.n	80083ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2202      	movs	r2, #2
 80083f2:	4013      	ands	r3, r2
 80083f4:	d100      	bne.n	80083f8 <HAL_RCC_OscConfig+0x124>
 80083f6:	e099      	b.n	800852c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083f8:	4b81      	ldr	r3, [pc, #516]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2238      	movs	r2, #56	; 0x38
 80083fe:	4013      	ands	r3, r2
 8008400:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008402:	4b7f      	ldr	r3, [pc, #508]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2203      	movs	r2, #3
 8008408:	4013      	ands	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b10      	cmp	r3, #16
 8008410:	d102      	bne.n	8008418 <HAL_RCC_OscConfig+0x144>
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b02      	cmp	r3, #2
 8008416:	d002      	beq.n	800841e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d135      	bne.n	800848a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800841e:	4b78      	ldr	r3, [pc, #480]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	2380      	movs	r3, #128	; 0x80
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4013      	ands	r3, r2
 8008428:	d005      	beq.n	8008436 <HAL_RCC_OscConfig+0x162>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e256      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008436:	4b72      	ldr	r3, [pc, #456]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	4a74      	ldr	r2, [pc, #464]	; (800860c <HAL_RCC_OscConfig+0x338>)
 800843c:	4013      	ands	r3, r2
 800843e:	0019      	movs	r1, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	021a      	lsls	r2, r3, #8
 8008446:	4b6e      	ldr	r3, [pc, #440]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d112      	bne.n	8008478 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008452:	4b6b      	ldr	r3, [pc, #428]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a6e      	ldr	r2, [pc, #440]	; (8008610 <HAL_RCC_OscConfig+0x33c>)
 8008458:	4013      	ands	r3, r2
 800845a:	0019      	movs	r1, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	4b67      	ldr	r3, [pc, #412]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008462:	430a      	orrs	r2, r1
 8008464:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008466:	4b66      	ldr	r3, [pc, #408]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	0adb      	lsrs	r3, r3, #11
 800846c:	2207      	movs	r2, #7
 800846e:	4013      	ands	r3, r2
 8008470:	4a68      	ldr	r2, [pc, #416]	; (8008614 <HAL_RCC_OscConfig+0x340>)
 8008472:	40da      	lsrs	r2, r3
 8008474:	4b68      	ldr	r3, [pc, #416]	; (8008618 <HAL_RCC_OscConfig+0x344>)
 8008476:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008478:	4b68      	ldr	r3, [pc, #416]	; (800861c <HAL_RCC_OscConfig+0x348>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	0018      	movs	r0, r3
 800847e:	f7fc fda3 	bl	8004fc8 <HAL_InitTick>
 8008482:	1e03      	subs	r3, r0, #0
 8008484:	d051      	beq.n	800852a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e22c      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d030      	beq.n	80084f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008492:	4b5b      	ldr	r3, [pc, #364]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a5e      	ldr	r2, [pc, #376]	; (8008610 <HAL_RCC_OscConfig+0x33c>)
 8008498:	4013      	ands	r3, r2
 800849a:	0019      	movs	r1, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	4b57      	ldr	r3, [pc, #348]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084a2:	430a      	orrs	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80084a6:	4b56      	ldr	r3, [pc, #344]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	4b55      	ldr	r3, [pc, #340]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084ac:	2180      	movs	r1, #128	; 0x80
 80084ae:	0049      	lsls	r1, r1, #1
 80084b0:	430a      	orrs	r2, r1
 80084b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b4:	f7fc fde4 	bl	8005080 <HAL_GetTick>
 80084b8:	0003      	movs	r3, r0
 80084ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084be:	f7fc fddf 	bl	8005080 <HAL_GetTick>
 80084c2:	0002      	movs	r2, r0
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e209      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084d0:	4b4b      	ldr	r3, [pc, #300]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	4013      	ands	r3, r2
 80084da:	d0f0      	beq.n	80084be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084dc:	4b48      	ldr	r3, [pc, #288]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	4a4a      	ldr	r2, [pc, #296]	; (800860c <HAL_RCC_OscConfig+0x338>)
 80084e2:	4013      	ands	r3, r2
 80084e4:	0019      	movs	r1, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	021a      	lsls	r2, r3, #8
 80084ec:	4b44      	ldr	r3, [pc, #272]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084ee:	430a      	orrs	r2, r1
 80084f0:	605a      	str	r2, [r3, #4]
 80084f2:	e01b      	b.n	800852c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80084f4:	4b42      	ldr	r3, [pc, #264]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	4b41      	ldr	r3, [pc, #260]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80084fa:	4949      	ldr	r1, [pc, #292]	; (8008620 <HAL_RCC_OscConfig+0x34c>)
 80084fc:	400a      	ands	r2, r1
 80084fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008500:	f7fc fdbe 	bl	8005080 <HAL_GetTick>
 8008504:	0003      	movs	r3, r0
 8008506:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008508:	e008      	b.n	800851c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800850a:	f7fc fdb9 	bl	8005080 <HAL_GetTick>
 800850e:	0002      	movs	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d901      	bls.n	800851c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e1e3      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800851c:	4b38      	ldr	r3, [pc, #224]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	2380      	movs	r3, #128	; 0x80
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	4013      	ands	r3, r2
 8008526:	d1f0      	bne.n	800850a <HAL_RCC_OscConfig+0x236>
 8008528:	e000      	b.n	800852c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800852a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2208      	movs	r2, #8
 8008532:	4013      	ands	r3, r2
 8008534:	d047      	beq.n	80085c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008536:	4b32      	ldr	r3, [pc, #200]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2238      	movs	r2, #56	; 0x38
 800853c:	4013      	ands	r3, r2
 800853e:	2b18      	cmp	r3, #24
 8008540:	d10a      	bne.n	8008558 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008542:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008546:	2202      	movs	r2, #2
 8008548:	4013      	ands	r3, r2
 800854a:	d03c      	beq.n	80085c6 <HAL_RCC_OscConfig+0x2f2>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d138      	bne.n	80085c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e1c5      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d019      	beq.n	8008594 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008560:	4b27      	ldr	r3, [pc, #156]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008564:	4b26      	ldr	r3, [pc, #152]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008566:	2101      	movs	r1, #1
 8008568:	430a      	orrs	r2, r1
 800856a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800856c:	f7fc fd88 	bl	8005080 <HAL_GetTick>
 8008570:	0003      	movs	r3, r0
 8008572:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008574:	e008      	b.n	8008588 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008576:	f7fc fd83 	bl	8005080 <HAL_GetTick>
 800857a:	0002      	movs	r2, r0
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	2b02      	cmp	r3, #2
 8008582:	d901      	bls.n	8008588 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e1ad      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008588:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800858a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800858c:	2202      	movs	r2, #2
 800858e:	4013      	ands	r3, r2
 8008590:	d0f1      	beq.n	8008576 <HAL_RCC_OscConfig+0x2a2>
 8008592:	e018      	b.n	80085c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008594:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 8008596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008598:	4b19      	ldr	r3, [pc, #100]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 800859a:	2101      	movs	r1, #1
 800859c:	438a      	bics	r2, r1
 800859e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a0:	f7fc fd6e 	bl	8005080 <HAL_GetTick>
 80085a4:	0003      	movs	r3, r0
 80085a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085a8:	e008      	b.n	80085bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085aa:	f7fc fd69 	bl	8005080 <HAL_GetTick>
 80085ae:	0002      	movs	r2, r0
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d901      	bls.n	80085bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e193      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085bc:	4b10      	ldr	r3, [pc, #64]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80085be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c0:	2202      	movs	r2, #2
 80085c2:	4013      	ands	r3, r2
 80085c4:	d1f1      	bne.n	80085aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2204      	movs	r2, #4
 80085cc:	4013      	ands	r3, r2
 80085ce:	d100      	bne.n	80085d2 <HAL_RCC_OscConfig+0x2fe>
 80085d0:	e0c6      	b.n	8008760 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085d2:	231f      	movs	r3, #31
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80085da:	4b09      	ldr	r3, [pc, #36]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2238      	movs	r2, #56	; 0x38
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d11e      	bne.n	8008624 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80085e6:	4b06      	ldr	r3, [pc, #24]	; (8008600 <HAL_RCC_OscConfig+0x32c>)
 80085e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ea:	2202      	movs	r2, #2
 80085ec:	4013      	ands	r3, r2
 80085ee:	d100      	bne.n	80085f2 <HAL_RCC_OscConfig+0x31e>
 80085f0:	e0b6      	b.n	8008760 <HAL_RCC_OscConfig+0x48c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d000      	beq.n	80085fc <HAL_RCC_OscConfig+0x328>
 80085fa:	e0b1      	b.n	8008760 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e171      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
 8008600:	40021000 	.word	0x40021000
 8008604:	fffeffff 	.word	0xfffeffff
 8008608:	fffbffff 	.word	0xfffbffff
 800860c:	ffff80ff 	.word	0xffff80ff
 8008610:	ffffc7ff 	.word	0xffffc7ff
 8008614:	00f42400 	.word	0x00f42400
 8008618:	200000e8 	.word	0x200000e8
 800861c:	200000ec 	.word	0x200000ec
 8008620:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008624:	4bb1      	ldr	r3, [pc, #708]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008628:	2380      	movs	r3, #128	; 0x80
 800862a:	055b      	lsls	r3, r3, #21
 800862c:	4013      	ands	r3, r2
 800862e:	d101      	bne.n	8008634 <HAL_RCC_OscConfig+0x360>
 8008630:	2301      	movs	r3, #1
 8008632:	e000      	b.n	8008636 <HAL_RCC_OscConfig+0x362>
 8008634:	2300      	movs	r3, #0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d011      	beq.n	800865e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800863a:	4bac      	ldr	r3, [pc, #688]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 800863c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800863e:	4bab      	ldr	r3, [pc, #684]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008640:	2180      	movs	r1, #128	; 0x80
 8008642:	0549      	lsls	r1, r1, #21
 8008644:	430a      	orrs	r2, r1
 8008646:	63da      	str	r2, [r3, #60]	; 0x3c
 8008648:	4ba8      	ldr	r3, [pc, #672]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 800864a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800864c:	2380      	movs	r3, #128	; 0x80
 800864e:	055b      	lsls	r3, r3, #21
 8008650:	4013      	ands	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008656:	231f      	movs	r3, #31
 8008658:	18fb      	adds	r3, r7, r3
 800865a:	2201      	movs	r2, #1
 800865c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800865e:	4ba4      	ldr	r3, [pc, #656]	; (80088f0 <HAL_RCC_OscConfig+0x61c>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	2380      	movs	r3, #128	; 0x80
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	4013      	ands	r3, r2
 8008668:	d11a      	bne.n	80086a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800866a:	4ba1      	ldr	r3, [pc, #644]	; (80088f0 <HAL_RCC_OscConfig+0x61c>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	4ba0      	ldr	r3, [pc, #640]	; (80088f0 <HAL_RCC_OscConfig+0x61c>)
 8008670:	2180      	movs	r1, #128	; 0x80
 8008672:	0049      	lsls	r1, r1, #1
 8008674:	430a      	orrs	r2, r1
 8008676:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008678:	f7fc fd02 	bl	8005080 <HAL_GetTick>
 800867c:	0003      	movs	r3, r0
 800867e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008680:	e008      	b.n	8008694 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008682:	f7fc fcfd 	bl	8005080 <HAL_GetTick>
 8008686:	0002      	movs	r2, r0
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e127      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008694:	4b96      	ldr	r3, [pc, #600]	; (80088f0 <HAL_RCC_OscConfig+0x61c>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	2380      	movs	r3, #128	; 0x80
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	4013      	ands	r3, r2
 800869e:	d0f0      	beq.n	8008682 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d106      	bne.n	80086b6 <HAL_RCC_OscConfig+0x3e2>
 80086a8:	4b90      	ldr	r3, [pc, #576]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086ac:	4b8f      	ldr	r3, [pc, #572]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086ae:	2101      	movs	r1, #1
 80086b0:	430a      	orrs	r2, r1
 80086b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80086b4:	e01c      	b.n	80086f0 <HAL_RCC_OscConfig+0x41c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d10c      	bne.n	80086d8 <HAL_RCC_OscConfig+0x404>
 80086be:	4b8b      	ldr	r3, [pc, #556]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086c2:	4b8a      	ldr	r3, [pc, #552]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086c4:	2104      	movs	r1, #4
 80086c6:	430a      	orrs	r2, r1
 80086c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80086ca:	4b88      	ldr	r3, [pc, #544]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086ce:	4b87      	ldr	r3, [pc, #540]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086d0:	2101      	movs	r1, #1
 80086d2:	430a      	orrs	r2, r1
 80086d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80086d6:	e00b      	b.n	80086f0 <HAL_RCC_OscConfig+0x41c>
 80086d8:	4b84      	ldr	r3, [pc, #528]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086dc:	4b83      	ldr	r3, [pc, #524]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086de:	2101      	movs	r1, #1
 80086e0:	438a      	bics	r2, r1
 80086e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80086e4:	4b81      	ldr	r3, [pc, #516]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086e8:	4b80      	ldr	r3, [pc, #512]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80086ea:	2104      	movs	r1, #4
 80086ec:	438a      	bics	r2, r1
 80086ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d014      	beq.n	8008722 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f8:	f7fc fcc2 	bl	8005080 <HAL_GetTick>
 80086fc:	0003      	movs	r3, r0
 80086fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008700:	e009      	b.n	8008716 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008702:	f7fc fcbd 	bl	8005080 <HAL_GetTick>
 8008706:	0002      	movs	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	4a79      	ldr	r2, [pc, #484]	; (80088f4 <HAL_RCC_OscConfig+0x620>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e0e6      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008716:	4b75      	ldr	r3, [pc, #468]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871a:	2202      	movs	r2, #2
 800871c:	4013      	ands	r3, r2
 800871e:	d0f0      	beq.n	8008702 <HAL_RCC_OscConfig+0x42e>
 8008720:	e013      	b.n	800874a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008722:	f7fc fcad 	bl	8005080 <HAL_GetTick>
 8008726:	0003      	movs	r3, r0
 8008728:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800872a:	e009      	b.n	8008740 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800872c:	f7fc fca8 	bl	8005080 <HAL_GetTick>
 8008730:	0002      	movs	r2, r0
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	4a6f      	ldr	r2, [pc, #444]	; (80088f4 <HAL_RCC_OscConfig+0x620>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d901      	bls.n	8008740 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e0d1      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008740:	4b6a      	ldr	r3, [pc, #424]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008744:	2202      	movs	r2, #2
 8008746:	4013      	ands	r3, r2
 8008748:	d1f0      	bne.n	800872c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800874a:	231f      	movs	r3, #31
 800874c:	18fb      	adds	r3, r7, r3
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d105      	bne.n	8008760 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008754:	4b65      	ldr	r3, [pc, #404]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008758:	4b64      	ldr	r3, [pc, #400]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 800875a:	4967      	ldr	r1, [pc, #412]	; (80088f8 <HAL_RCC_OscConfig+0x624>)
 800875c:	400a      	ands	r2, r1
 800875e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d100      	bne.n	800876a <HAL_RCC_OscConfig+0x496>
 8008768:	e0bb      	b.n	80088e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800876a:	4b60      	ldr	r3, [pc, #384]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	2238      	movs	r2, #56	; 0x38
 8008770:	4013      	ands	r3, r2
 8008772:	2b10      	cmp	r3, #16
 8008774:	d100      	bne.n	8008778 <HAL_RCC_OscConfig+0x4a4>
 8008776:	e07b      	b.n	8008870 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d156      	bne.n	800882e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008780:	4b5a      	ldr	r3, [pc, #360]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	4b59      	ldr	r3, [pc, #356]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008786:	495d      	ldr	r1, [pc, #372]	; (80088fc <HAL_RCC_OscConfig+0x628>)
 8008788:	400a      	ands	r2, r1
 800878a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878c:	f7fc fc78 	bl	8005080 <HAL_GetTick>
 8008790:	0003      	movs	r3, r0
 8008792:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008796:	f7fc fc73 	bl	8005080 <HAL_GetTick>
 800879a:	0002      	movs	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e09d      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087a8:	4b50      	ldr	r3, [pc, #320]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	049b      	lsls	r3, r3, #18
 80087b0:	4013      	ands	r3, r2
 80087b2:	d1f0      	bne.n	8008796 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087b4:	4b4d      	ldr	r3, [pc, #308]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	4a51      	ldr	r2, [pc, #324]	; (8008900 <HAL_RCC_OscConfig+0x62c>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	0019      	movs	r1, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1a      	ldr	r2, [r3, #32]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	431a      	orrs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e0:	431a      	orrs	r2, r3
 80087e2:	4b42      	ldr	r3, [pc, #264]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80087e4:	430a      	orrs	r2, r1
 80087e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087e8:	4b40      	ldr	r3, [pc, #256]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	4b3f      	ldr	r3, [pc, #252]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	0449      	lsls	r1, r1, #17
 80087f2:	430a      	orrs	r2, r1
 80087f4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80087f6:	4b3d      	ldr	r3, [pc, #244]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	4b3c      	ldr	r3, [pc, #240]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 80087fc:	2180      	movs	r1, #128	; 0x80
 80087fe:	0549      	lsls	r1, r1, #21
 8008800:	430a      	orrs	r2, r1
 8008802:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008804:	f7fc fc3c 	bl	8005080 <HAL_GetTick>
 8008808:	0003      	movs	r3, r0
 800880a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800880c:	e008      	b.n	8008820 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800880e:	f7fc fc37 	bl	8005080 <HAL_GetTick>
 8008812:	0002      	movs	r2, r0
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d901      	bls.n	8008820 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e061      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008820:	4b32      	ldr	r3, [pc, #200]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	2380      	movs	r3, #128	; 0x80
 8008826:	049b      	lsls	r3, r3, #18
 8008828:	4013      	ands	r3, r2
 800882a:	d0f0      	beq.n	800880e <HAL_RCC_OscConfig+0x53a>
 800882c:	e059      	b.n	80088e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800882e:	4b2f      	ldr	r3, [pc, #188]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4b2e      	ldr	r3, [pc, #184]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008834:	4931      	ldr	r1, [pc, #196]	; (80088fc <HAL_RCC_OscConfig+0x628>)
 8008836:	400a      	ands	r2, r1
 8008838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883a:	f7fc fc21 	bl	8005080 <HAL_GetTick>
 800883e:	0003      	movs	r3, r0
 8008840:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008844:	f7fc fc1c 	bl	8005080 <HAL_GetTick>
 8008848:	0002      	movs	r2, r0
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b02      	cmp	r3, #2
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e046      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008856:	4b25      	ldr	r3, [pc, #148]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	2380      	movs	r3, #128	; 0x80
 800885c:	049b      	lsls	r3, r3, #18
 800885e:	4013      	ands	r3, r2
 8008860:	d1f0      	bne.n	8008844 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008862:	4b22      	ldr	r3, [pc, #136]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	4b21      	ldr	r3, [pc, #132]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 8008868:	4926      	ldr	r1, [pc, #152]	; (8008904 <HAL_RCC_OscConfig+0x630>)
 800886a:	400a      	ands	r2, r1
 800886c:	60da      	str	r2, [r3, #12]
 800886e:	e038      	b.n	80088e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e033      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800887c:	4b1b      	ldr	r3, [pc, #108]	; (80088ec <HAL_RCC_OscConfig+0x618>)
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2203      	movs	r2, #3
 8008886:	401a      	ands	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	429a      	cmp	r2, r3
 800888e:	d126      	bne.n	80088de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2270      	movs	r2, #112	; 0x70
 8008894:	401a      	ands	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800889a:	429a      	cmp	r2, r3
 800889c:	d11f      	bne.n	80088de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	23fe      	movs	r3, #254	; 0xfe
 80088a2:	01db      	lsls	r3, r3, #7
 80088a4:	401a      	ands	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088aa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d116      	bne.n	80088de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	23f8      	movs	r3, #248	; 0xf8
 80088b4:	039b      	lsls	r3, r3, #14
 80088b6:	401a      	ands	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088bc:	429a      	cmp	r2, r3
 80088be:	d10e      	bne.n	80088de <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	23e0      	movs	r3, #224	; 0xe0
 80088c4:	051b      	lsls	r3, r3, #20
 80088c6:	401a      	ands	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d106      	bne.n	80088de <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	0f5b      	lsrs	r3, r3, #29
 80088d4:	075a      	lsls	r2, r3, #29
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088da:	429a      	cmp	r2, r3
 80088dc:	d001      	beq.n	80088e2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	0018      	movs	r0, r3
 80088e6:	46bd      	mov	sp, r7
 80088e8:	b008      	add	sp, #32
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	40021000 	.word	0x40021000
 80088f0:	40007000 	.word	0x40007000
 80088f4:	00001388 	.word	0x00001388
 80088f8:	efffffff 	.word	0xefffffff
 80088fc:	feffffff 	.word	0xfeffffff
 8008900:	11c1808c 	.word	0x11c1808c
 8008904:	eefefffc 	.word	0xeefefffc

08008908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e0e9      	b.n	8008af0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800891c:	4b76      	ldr	r3, [pc, #472]	; (8008af8 <HAL_RCC_ClockConfig+0x1f0>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2207      	movs	r2, #7
 8008922:	4013      	ands	r3, r2
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d91e      	bls.n	8008968 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800892a:	4b73      	ldr	r3, [pc, #460]	; (8008af8 <HAL_RCC_ClockConfig+0x1f0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2207      	movs	r2, #7
 8008930:	4393      	bics	r3, r2
 8008932:	0019      	movs	r1, r3
 8008934:	4b70      	ldr	r3, [pc, #448]	; (8008af8 <HAL_RCC_ClockConfig+0x1f0>)
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800893c:	f7fc fba0 	bl	8005080 <HAL_GetTick>
 8008940:	0003      	movs	r3, r0
 8008942:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008944:	e009      	b.n	800895a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008946:	f7fc fb9b 	bl	8005080 <HAL_GetTick>
 800894a:	0002      	movs	r2, r0
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	4a6a      	ldr	r2, [pc, #424]	; (8008afc <HAL_RCC_ClockConfig+0x1f4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d901      	bls.n	800895a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e0ca      	b.n	8008af0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800895a:	4b67      	ldr	r3, [pc, #412]	; (8008af8 <HAL_RCC_ClockConfig+0x1f0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2207      	movs	r2, #7
 8008960:	4013      	ands	r3, r2
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d1ee      	bne.n	8008946 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2202      	movs	r2, #2
 800896e:	4013      	ands	r3, r2
 8008970:	d015      	beq.n	800899e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2204      	movs	r2, #4
 8008978:	4013      	ands	r3, r2
 800897a:	d006      	beq.n	800898a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800897c:	4b60      	ldr	r3, [pc, #384]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	4b5f      	ldr	r3, [pc, #380]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 8008982:	21e0      	movs	r1, #224	; 0xe0
 8008984:	01c9      	lsls	r1, r1, #7
 8008986:	430a      	orrs	r2, r1
 8008988:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800898a:	4b5d      	ldr	r3, [pc, #372]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	4a5d      	ldr	r2, [pc, #372]	; (8008b04 <HAL_RCC_ClockConfig+0x1fc>)
 8008990:	4013      	ands	r3, r2
 8008992:	0019      	movs	r1, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	4b59      	ldr	r3, [pc, #356]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 800899a:	430a      	orrs	r2, r1
 800899c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2201      	movs	r2, #1
 80089a4:	4013      	ands	r3, r2
 80089a6:	d057      	beq.n	8008a58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d107      	bne.n	80089c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089b0:	4b53      	ldr	r3, [pc, #332]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	2380      	movs	r3, #128	; 0x80
 80089b6:	029b      	lsls	r3, r3, #10
 80089b8:	4013      	ands	r3, r2
 80089ba:	d12b      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e097      	b.n	8008af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d107      	bne.n	80089d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089c8:	4b4d      	ldr	r3, [pc, #308]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	2380      	movs	r3, #128	; 0x80
 80089ce:	049b      	lsls	r3, r3, #18
 80089d0:	4013      	ands	r3, r2
 80089d2:	d11f      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e08b      	b.n	8008af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d107      	bne.n	80089f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089e0:	4b47      	ldr	r3, [pc, #284]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	2380      	movs	r3, #128	; 0x80
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	4013      	ands	r3, r2
 80089ea:	d113      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e07f      	b.n	8008af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d106      	bne.n	8008a06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089f8:	4b41      	ldr	r3, [pc, #260]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 80089fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089fc:	2202      	movs	r2, #2
 80089fe:	4013      	ands	r3, r2
 8008a00:	d108      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e074      	b.n	8008af0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a06:	4b3e      	ldr	r3, [pc, #248]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 8008a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	d101      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e06d      	b.n	8008af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a14:	4b3a      	ldr	r3, [pc, #232]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	2207      	movs	r2, #7
 8008a1a:	4393      	bics	r3, r2
 8008a1c:	0019      	movs	r1, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	4b37      	ldr	r3, [pc, #220]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 8008a24:	430a      	orrs	r2, r1
 8008a26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a28:	f7fc fb2a 	bl	8005080 <HAL_GetTick>
 8008a2c:	0003      	movs	r3, r0
 8008a2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a30:	e009      	b.n	8008a46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a32:	f7fc fb25 	bl	8005080 <HAL_GetTick>
 8008a36:	0002      	movs	r2, r0
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	4a2f      	ldr	r2, [pc, #188]	; (8008afc <HAL_RCC_ClockConfig+0x1f4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e054      	b.n	8008af0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a46:	4b2e      	ldr	r3, [pc, #184]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	2238      	movs	r2, #56	; 0x38
 8008a4c:	401a      	ands	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d1ec      	bne.n	8008a32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a58:	4b27      	ldr	r3, [pc, #156]	; (8008af8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2207      	movs	r2, #7
 8008a5e:	4013      	ands	r3, r2
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d21e      	bcs.n	8008aa4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a66:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2207      	movs	r2, #7
 8008a6c:	4393      	bics	r3, r2
 8008a6e:	0019      	movs	r1, r3
 8008a70:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a78:	f7fc fb02 	bl	8005080 <HAL_GetTick>
 8008a7c:	0003      	movs	r3, r0
 8008a7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a80:	e009      	b.n	8008a96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a82:	f7fc fafd 	bl	8005080 <HAL_GetTick>
 8008a86:	0002      	movs	r2, r0
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	4a1b      	ldr	r2, [pc, #108]	; (8008afc <HAL_RCC_ClockConfig+0x1f4>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d901      	bls.n	8008a96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e02c      	b.n	8008af0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a96:	4b18      	ldr	r3, [pc, #96]	; (8008af8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2207      	movs	r2, #7
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d1ee      	bne.n	8008a82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	4013      	ands	r3, r2
 8008aac:	d009      	beq.n	8008ac2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008aae:	4b14      	ldr	r3, [pc, #80]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	4a15      	ldr	r2, [pc, #84]	; (8008b08 <HAL_RCC_ClockConfig+0x200>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	0019      	movs	r1, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008ac2:	f000 f829 	bl	8008b18 <HAL_RCC_GetSysClockFreq>
 8008ac6:	0001      	movs	r1, r0
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <HAL_RCC_ClockConfig+0x1f8>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	0a1b      	lsrs	r3, r3, #8
 8008ace:	220f      	movs	r2, #15
 8008ad0:	401a      	ands	r2, r3
 8008ad2:	4b0e      	ldr	r3, [pc, #56]	; (8008b0c <HAL_RCC_ClockConfig+0x204>)
 8008ad4:	0092      	lsls	r2, r2, #2
 8008ad6:	58d3      	ldr	r3, [r2, r3]
 8008ad8:	221f      	movs	r2, #31
 8008ada:	4013      	ands	r3, r2
 8008adc:	000a      	movs	r2, r1
 8008ade:	40da      	lsrs	r2, r3
 8008ae0:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <HAL_RCC_ClockConfig+0x208>)
 8008ae2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008ae4:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <HAL_RCC_ClockConfig+0x20c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	0018      	movs	r0, r3
 8008aea:	f7fc fa6d 	bl	8004fc8 <HAL_InitTick>
 8008aee:	0003      	movs	r3, r0
}
 8008af0:	0018      	movs	r0, r3
 8008af2:	46bd      	mov	sp, r7
 8008af4:	b004      	add	sp, #16
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40022000 	.word	0x40022000
 8008afc:	00001388 	.word	0x00001388
 8008b00:	40021000 	.word	0x40021000
 8008b04:	fffff0ff 	.word	0xfffff0ff
 8008b08:	ffff8fff 	.word	0xffff8fff
 8008b0c:	0800cec0 	.word	0x0800cec0
 8008b10:	200000e8 	.word	0x200000e8
 8008b14:	200000ec 	.word	0x200000ec

08008b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b1e:	4b3c      	ldr	r3, [pc, #240]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	2238      	movs	r2, #56	; 0x38
 8008b24:	4013      	ands	r3, r2
 8008b26:	d10f      	bne.n	8008b48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008b28:	4b39      	ldr	r3, [pc, #228]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	0adb      	lsrs	r3, r3, #11
 8008b2e:	2207      	movs	r2, #7
 8008b30:	4013      	ands	r3, r2
 8008b32:	2201      	movs	r2, #1
 8008b34:	409a      	lsls	r2, r3
 8008b36:	0013      	movs	r3, r2
 8008b38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	4835      	ldr	r0, [pc, #212]	; (8008c14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008b3e:	f7f7 faed 	bl	800011c <__udivsi3>
 8008b42:	0003      	movs	r3, r0
 8008b44:	613b      	str	r3, [r7, #16]
 8008b46:	e05d      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b48:	4b31      	ldr	r3, [pc, #196]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2238      	movs	r2, #56	; 0x38
 8008b4e:	4013      	ands	r3, r2
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d102      	bne.n	8008b5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b54:	4b30      	ldr	r3, [pc, #192]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x100>)
 8008b56:	613b      	str	r3, [r7, #16]
 8008b58:	e054      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b5a:	4b2d      	ldr	r3, [pc, #180]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2238      	movs	r2, #56	; 0x38
 8008b60:	4013      	ands	r3, r2
 8008b62:	2b10      	cmp	r3, #16
 8008b64:	d138      	bne.n	8008bd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008b66:	4b2a      	ldr	r3, [pc, #168]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b70:	4b27      	ldr	r3, [pc, #156]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	091b      	lsrs	r3, r3, #4
 8008b76:	2207      	movs	r2, #7
 8008b78:	4013      	ands	r3, r2
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d10d      	bne.n	8008ba0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b84:	68b9      	ldr	r1, [r7, #8]
 8008b86:	4824      	ldr	r0, [pc, #144]	; (8008c18 <HAL_RCC_GetSysClockFreq+0x100>)
 8008b88:	f7f7 fac8 	bl	800011c <__udivsi3>
 8008b8c:	0003      	movs	r3, r0
 8008b8e:	0019      	movs	r1, r3
 8008b90:	4b1f      	ldr	r3, [pc, #124]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	0a1b      	lsrs	r3, r3, #8
 8008b96:	227f      	movs	r2, #127	; 0x7f
 8008b98:	4013      	ands	r3, r2
 8008b9a:	434b      	muls	r3, r1
 8008b9c:	617b      	str	r3, [r7, #20]
        break;
 8008b9e:	e00d      	b.n	8008bbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	481c      	ldr	r0, [pc, #112]	; (8008c14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008ba4:	f7f7 faba 	bl	800011c <__udivsi3>
 8008ba8:	0003      	movs	r3, r0
 8008baa:	0019      	movs	r1, r3
 8008bac:	4b18      	ldr	r3, [pc, #96]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	0a1b      	lsrs	r3, r3, #8
 8008bb2:	227f      	movs	r2, #127	; 0x7f
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	434b      	muls	r3, r1
 8008bb8:	617b      	str	r3, [r7, #20]
        break;
 8008bba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008bbc:	4b14      	ldr	r3, [pc, #80]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	0f5b      	lsrs	r3, r3, #29
 8008bc2:	2207      	movs	r2, #7
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	6978      	ldr	r0, [r7, #20]
 8008bce:	f7f7 faa5 	bl	800011c <__udivsi3>
 8008bd2:	0003      	movs	r3, r0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	e015      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008bd8:	4b0d      	ldr	r3, [pc, #52]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	2238      	movs	r2, #56	; 0x38
 8008bde:	4013      	ands	r3, r2
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d103      	bne.n	8008bec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008be4:	2380      	movs	r3, #128	; 0x80
 8008be6:	021b      	lsls	r3, r3, #8
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	e00b      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008bec:	4b08      	ldr	r3, [pc, #32]	; (8008c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	2238      	movs	r2, #56	; 0x38
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	2b18      	cmp	r3, #24
 8008bf6:	d103      	bne.n	8008c00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008bf8:	23fa      	movs	r3, #250	; 0xfa
 8008bfa:	01db      	lsls	r3, r3, #7
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	e001      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008c04:	693b      	ldr	r3, [r7, #16]
}
 8008c06:	0018      	movs	r0, r3
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	b006      	add	sp, #24
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	40021000 	.word	0x40021000
 8008c14:	00f42400 	.word	0x00f42400
 8008c18:	007a1200 	.word	0x007a1200

08008c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c20:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8008c22:	681b      	ldr	r3, [r3, #0]
}
 8008c24:	0018      	movs	r0, r3
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	200000e8 	.word	0x200000e8

08008c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c30:	b5b0      	push	{r4, r5, r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008c34:	f7ff fff2 	bl	8008c1c <HAL_RCC_GetHCLKFreq>
 8008c38:	0004      	movs	r4, r0
 8008c3a:	f7ff fb3f 	bl	80082bc <LL_RCC_GetAPB1Prescaler>
 8008c3e:	0003      	movs	r3, r0
 8008c40:	0b1a      	lsrs	r2, r3, #12
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c44:	0092      	lsls	r2, r2, #2
 8008c46:	58d3      	ldr	r3, [r2, r3]
 8008c48:	221f      	movs	r2, #31
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	40dc      	lsrs	r4, r3
 8008c4e:	0023      	movs	r3, r4
}
 8008c50:	0018      	movs	r0, r3
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bdb0      	pop	{r4, r5, r7, pc}
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	0800cf00 	.word	0x0800cf00

08008c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008c64:	2313      	movs	r3, #19
 8008c66:	18fb      	adds	r3, r7, r3
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c6c:	2312      	movs	r3, #18
 8008c6e:	18fb      	adds	r3, r7, r3
 8008c70:	2200      	movs	r2, #0
 8008c72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	2380      	movs	r3, #128	; 0x80
 8008c7a:	029b      	lsls	r3, r3, #10
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	d100      	bne.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008c80:	e0a3      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c82:	2011      	movs	r0, #17
 8008c84:	183b      	adds	r3, r7, r0
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c8a:	4bc3      	ldr	r3, [pc, #780]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c8e:	2380      	movs	r3, #128	; 0x80
 8008c90:	055b      	lsls	r3, r3, #21
 8008c92:	4013      	ands	r3, r2
 8008c94:	d110      	bne.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c96:	4bc0      	ldr	r3, [pc, #768]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c9a:	4bbf      	ldr	r3, [pc, #764]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c9c:	2180      	movs	r1, #128	; 0x80
 8008c9e:	0549      	lsls	r1, r1, #21
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	63da      	str	r2, [r3, #60]	; 0x3c
 8008ca4:	4bbc      	ldr	r3, [pc, #752]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ca8:	2380      	movs	r3, #128	; 0x80
 8008caa:	055b      	lsls	r3, r3, #21
 8008cac:	4013      	ands	r3, r2
 8008cae:	60bb      	str	r3, [r7, #8]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cb2:	183b      	adds	r3, r7, r0
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cb8:	4bb8      	ldr	r3, [pc, #736]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	4bb7      	ldr	r3, [pc, #732]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008cbe:	2180      	movs	r1, #128	; 0x80
 8008cc0:	0049      	lsls	r1, r1, #1
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cc6:	f7fc f9db 	bl	8005080 <HAL_GetTick>
 8008cca:	0003      	movs	r3, r0
 8008ccc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cce:	e00b      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cd0:	f7fc f9d6 	bl	8005080 <HAL_GetTick>
 8008cd4:	0002      	movs	r2, r0
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d904      	bls.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008cde:	2313      	movs	r3, #19
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	2203      	movs	r2, #3
 8008ce4:	701a      	strb	r2, [r3, #0]
        break;
 8008ce6:	e005      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ce8:	4bac      	ldr	r3, [pc, #688]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	2380      	movs	r3, #128	; 0x80
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	d0ed      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008cf4:	2313      	movs	r3, #19
 8008cf6:	18fb      	adds	r3, r7, r3
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d154      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008cfe:	4ba6      	ldr	r3, [pc, #664]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d02:	23c0      	movs	r3, #192	; 0xc0
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4013      	ands	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d019      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d014      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d1a:	4b9f      	ldr	r3, [pc, #636]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d1e:	4aa0      	ldr	r2, [pc, #640]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d24:	4b9c      	ldr	r3, [pc, #624]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d28:	4b9b      	ldr	r3, [pc, #620]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d2a:	2180      	movs	r1, #128	; 0x80
 8008d2c:	0249      	lsls	r1, r1, #9
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d32:	4b99      	ldr	r3, [pc, #612]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d36:	4b98      	ldr	r3, [pc, #608]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d38:	499a      	ldr	r1, [pc, #616]	; (8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008d3a:	400a      	ands	r2, r1
 8008d3c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d3e:	4b96      	ldr	r3, [pc, #600]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2201      	movs	r2, #1
 8008d48:	4013      	ands	r3, r2
 8008d4a:	d016      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4c:	f7fc f998 	bl	8005080 <HAL_GetTick>
 8008d50:	0003      	movs	r3, r0
 8008d52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d54:	e00c      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d56:	f7fc f993 	bl	8005080 <HAL_GetTick>
 8008d5a:	0002      	movs	r2, r0
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	4a91      	ldr	r2, [pc, #580]	; (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d904      	bls.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008d66:	2313      	movs	r3, #19
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	2203      	movs	r2, #3
 8008d6c:	701a      	strb	r2, [r3, #0]
            break;
 8008d6e:	e004      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d70:	4b89      	ldr	r3, [pc, #548]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d74:	2202      	movs	r2, #2
 8008d76:	4013      	ands	r3, r2
 8008d78:	d0ed      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008d7a:	2313      	movs	r3, #19
 8008d7c:	18fb      	adds	r3, r7, r3
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10a      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d84:	4b84      	ldr	r3, [pc, #528]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d88:	4a85      	ldr	r2, [pc, #532]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	0019      	movs	r1, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d92:	4b81      	ldr	r3, [pc, #516]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d94:	430a      	orrs	r2, r1
 8008d96:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d98:	e00c      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d9a:	2312      	movs	r3, #18
 8008d9c:	18fb      	adds	r3, r7, r3
 8008d9e:	2213      	movs	r2, #19
 8008da0:	18ba      	adds	r2, r7, r2
 8008da2:	7812      	ldrb	r2, [r2, #0]
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e005      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da8:	2312      	movs	r3, #18
 8008daa:	18fb      	adds	r3, r7, r3
 8008dac:	2213      	movs	r2, #19
 8008dae:	18ba      	adds	r2, r7, r2
 8008db0:	7812      	ldrb	r2, [r2, #0]
 8008db2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008db4:	2311      	movs	r3, #17
 8008db6:	18fb      	adds	r3, r7, r3
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d105      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dbe:	4b76      	ldr	r3, [pc, #472]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc2:	4b75      	ldr	r3, [pc, #468]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008dc4:	4979      	ldr	r1, [pc, #484]	; (8008fac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008dc6:	400a      	ands	r2, r1
 8008dc8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	d009      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008dd4:	4b70      	ldr	r3, [pc, #448]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd8:	2203      	movs	r2, #3
 8008dda:	4393      	bics	r3, r2
 8008ddc:	0019      	movs	r1, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	4b6d      	ldr	r3, [pc, #436]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008de4:	430a      	orrs	r2, r1
 8008de6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2202      	movs	r2, #2
 8008dee:	4013      	ands	r3, r2
 8008df0:	d009      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008df2:	4b69      	ldr	r3, [pc, #420]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df6:	220c      	movs	r2, #12
 8008df8:	4393      	bics	r3, r2
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	4b65      	ldr	r3, [pc, #404]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e02:	430a      	orrs	r2, r1
 8008e04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2210      	movs	r2, #16
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	d009      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e10:	4b61      	ldr	r3, [pc, #388]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e14:	4a66      	ldr	r2, [pc, #408]	; (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	0019      	movs	r1, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	4b5e      	ldr	r3, [pc, #376]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e20:	430a      	orrs	r2, r1
 8008e22:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	2380      	movs	r3, #128	; 0x80
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	d009      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e30:	4b59      	ldr	r3, [pc, #356]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e34:	4a5f      	ldr	r2, [pc, #380]	; (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	0019      	movs	r1, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	699a      	ldr	r2, [r3, #24]
 8008e3e:	4b56      	ldr	r3, [pc, #344]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e40:	430a      	orrs	r2, r1
 8008e42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	2380      	movs	r3, #128	; 0x80
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	d009      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e50:	4b51      	ldr	r3, [pc, #324]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e54:	4a58      	ldr	r2, [pc, #352]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e56:	4013      	ands	r3, r2
 8008e58:	0019      	movs	r1, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	69da      	ldr	r2, [r3, #28]
 8008e5e:	4b4e      	ldr	r3, [pc, #312]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e60:	430a      	orrs	r2, r1
 8008e62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	d009      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e6e:	4b4a      	ldr	r3, [pc, #296]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e72:	4a52      	ldr	r2, [pc, #328]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	0019      	movs	r1, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691a      	ldr	r2, [r3, #16]
 8008e7c:	4b46      	ldr	r3, [pc, #280]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	2380      	movs	r3, #128	; 0x80
 8008e88:	01db      	lsls	r3, r3, #7
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	d015      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e8e:	4b42      	ldr	r3, [pc, #264]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	0899      	lsrs	r1, r3, #2
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1a      	ldr	r2, [r3, #32]
 8008e9a:	4b3f      	ldr	r3, [pc, #252]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1a      	ldr	r2, [r3, #32]
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	05db      	lsls	r3, r3, #23
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d106      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008eac:	4b3a      	ldr	r3, [pc, #232]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	4b39      	ldr	r3, [pc, #228]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008eb2:	2180      	movs	r1, #128	; 0x80
 8008eb4:	0249      	lsls	r1, r1, #9
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	2380      	movs	r3, #128	; 0x80
 8008ec0:	031b      	lsls	r3, r3, #12
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	d009      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ec6:	4b34      	ldr	r3, [pc, #208]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eca:	2240      	movs	r2, #64	; 0x40
 8008ecc:	4393      	bics	r3, r2
 8008ece:	0019      	movs	r1, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ed4:	4b30      	ldr	r3, [pc, #192]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	2380      	movs	r3, #128	; 0x80
 8008ee0:	039b      	lsls	r3, r3, #14
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	d016      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008ee6:	4b2c      	ldr	r3, [pc, #176]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eea:	4a35      	ldr	r2, [pc, #212]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	0019      	movs	r1, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ef4:	4b28      	ldr	r3, [pc, #160]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008efe:	2380      	movs	r3, #128	; 0x80
 8008f00:	03db      	lsls	r3, r3, #15
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d106      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008f06:	4b24      	ldr	r3, [pc, #144]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	4b23      	ldr	r3, [pc, #140]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f0c:	2180      	movs	r1, #128	; 0x80
 8008f0e:	0449      	lsls	r1, r1, #17
 8008f10:	430a      	orrs	r2, r1
 8008f12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	2380      	movs	r3, #128	; 0x80
 8008f1a:	03db      	lsls	r3, r3, #15
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	d016      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008f20:	4b1d      	ldr	r3, [pc, #116]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f24:	4a27      	ldr	r2, [pc, #156]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008f26:	4013      	ands	r3, r2
 8008f28:	0019      	movs	r1, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2e:	4b1a      	ldr	r3, [pc, #104]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f30:	430a      	orrs	r2, r1
 8008f32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	2380      	movs	r3, #128	; 0x80
 8008f3a:	045b      	lsls	r3, r3, #17
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d106      	bne.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008f40:	4b15      	ldr	r3, [pc, #84]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	4b14      	ldr	r3, [pc, #80]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f46:	2180      	movs	r1, #128	; 0x80
 8008f48:	0449      	lsls	r1, r1, #17
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	2380      	movs	r3, #128	; 0x80
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	4013      	ands	r3, r2
 8008f58:	d016      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008f5a:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5e:	4a1a      	ldr	r2, [pc, #104]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	0019      	movs	r1, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695a      	ldr	r2, [r3, #20]
 8008f68:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	695a      	ldr	r2, [r3, #20]
 8008f72:	2380      	movs	r3, #128	; 0x80
 8008f74:	01db      	lsls	r3, r3, #7
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d106      	bne.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008f7a:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f80:	2180      	movs	r1, #128	; 0x80
 8008f82:	0249      	lsls	r1, r1, #9
 8008f84:	430a      	orrs	r2, r1
 8008f86:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008f88:	2312      	movs	r3, #18
 8008f8a:	18fb      	adds	r3, r7, r3
 8008f8c:	781b      	ldrb	r3, [r3, #0]
}
 8008f8e:	0018      	movs	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	b006      	add	sp, #24
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	40007000 	.word	0x40007000
 8008fa0:	fffffcff 	.word	0xfffffcff
 8008fa4:	fffeffff 	.word	0xfffeffff
 8008fa8:	00001388 	.word	0x00001388
 8008fac:	efffffff 	.word	0xefffffff
 8008fb0:	fffff3ff 	.word	0xfffff3ff
 8008fb4:	fff3ffff 	.word	0xfff3ffff
 8008fb8:	ffcfffff 	.word	0xffcfffff
 8008fbc:	ffffcfff 	.word	0xffffcfff
 8008fc0:	ffbfffff 	.word	0xffbfffff
 8008fc4:	feffffff 	.word	0xfeffffff
 8008fc8:	ffff3fff 	.word	0xffff3fff

08008fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e04a      	b.n	8009074 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	223d      	movs	r2, #61	; 0x3d
 8008fe2:	5c9b      	ldrb	r3, [r3, r2]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d107      	bne.n	8008ffa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	223c      	movs	r2, #60	; 0x3c
 8008fee:	2100      	movs	r1, #0
 8008ff0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	f7fb fe41 	bl	8004c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	223d      	movs	r2, #61	; 0x3d
 8008ffe:	2102      	movs	r1, #2
 8009000:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3304      	adds	r3, #4
 800900a:	0019      	movs	r1, r3
 800900c:	0010      	movs	r0, r2
 800900e:	f000 faa3 	bl	8009558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2248      	movs	r2, #72	; 0x48
 8009016:	2101      	movs	r1, #1
 8009018:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	223e      	movs	r2, #62	; 0x3e
 800901e:	2101      	movs	r1, #1
 8009020:	5499      	strb	r1, [r3, r2]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	223f      	movs	r2, #63	; 0x3f
 8009026:	2101      	movs	r1, #1
 8009028:	5499      	strb	r1, [r3, r2]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2240      	movs	r2, #64	; 0x40
 800902e:	2101      	movs	r1, #1
 8009030:	5499      	strb	r1, [r3, r2]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2241      	movs	r2, #65	; 0x41
 8009036:	2101      	movs	r1, #1
 8009038:	5499      	strb	r1, [r3, r2]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2242      	movs	r2, #66	; 0x42
 800903e:	2101      	movs	r1, #1
 8009040:	5499      	strb	r1, [r3, r2]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2243      	movs	r2, #67	; 0x43
 8009046:	2101      	movs	r1, #1
 8009048:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2244      	movs	r2, #68	; 0x44
 800904e:	2101      	movs	r1, #1
 8009050:	5499      	strb	r1, [r3, r2]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2245      	movs	r2, #69	; 0x45
 8009056:	2101      	movs	r1, #1
 8009058:	5499      	strb	r1, [r3, r2]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2246      	movs	r2, #70	; 0x46
 800905e:	2101      	movs	r1, #1
 8009060:	5499      	strb	r1, [r3, r2]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2247      	movs	r2, #71	; 0x47
 8009066:	2101      	movs	r1, #1
 8009068:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	223d      	movs	r2, #61	; 0x3d
 800906e:	2101      	movs	r1, #1
 8009070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	0018      	movs	r0, r3
 8009076:	46bd      	mov	sp, r7
 8009078:	b002      	add	sp, #8
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	223d      	movs	r2, #61	; 0x3d
 8009088:	5c9b      	ldrb	r3, [r3, r2]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b01      	cmp	r3, #1
 800908e:	d001      	beq.n	8009094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e042      	b.n	800911a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	223d      	movs	r2, #61	; 0x3d
 8009098:	2102      	movs	r1, #2
 800909a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2101      	movs	r1, #1
 80090a8:	430a      	orrs	r2, r1
 80090aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a1c      	ldr	r2, [pc, #112]	; (8009124 <HAL_TIM_Base_Start_IT+0xa8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d00f      	beq.n	80090d6 <HAL_TIM_Base_Start_IT+0x5a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	2380      	movs	r3, #128	; 0x80
 80090bc:	05db      	lsls	r3, r3, #23
 80090be:	429a      	cmp	r2, r3
 80090c0:	d009      	beq.n	80090d6 <HAL_TIM_Base_Start_IT+0x5a>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a18      	ldr	r2, [pc, #96]	; (8009128 <HAL_TIM_Base_Start_IT+0xac>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d004      	beq.n	80090d6 <HAL_TIM_Base_Start_IT+0x5a>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a16      	ldr	r2, [pc, #88]	; (800912c <HAL_TIM_Base_Start_IT+0xb0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d116      	bne.n	8009104 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	4a14      	ldr	r2, [pc, #80]	; (8009130 <HAL_TIM_Base_Start_IT+0xb4>)
 80090de:	4013      	ands	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b06      	cmp	r3, #6
 80090e6:	d016      	beq.n	8009116 <HAL_TIM_Base_Start_IT+0x9a>
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	2380      	movs	r3, #128	; 0x80
 80090ec:	025b      	lsls	r3, r3, #9
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d011      	beq.n	8009116 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2101      	movs	r1, #1
 80090fe:	430a      	orrs	r2, r1
 8009100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009102:	e008      	b.n	8009116 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2101      	movs	r1, #1
 8009110:	430a      	orrs	r2, r1
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	e000      	b.n	8009118 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009116:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	0018      	movs	r0, r3
 800911c:	46bd      	mov	sp, r7
 800911e:	b004      	add	sp, #16
 8009120:	bd80      	pop	{r7, pc}
 8009122:	46c0      	nop			; (mov r8, r8)
 8009124:	40012c00 	.word	0x40012c00
 8009128:	40000400 	.word	0x40000400
 800912c:	40014000 	.word	0x40014000
 8009130:	00010007 	.word	0x00010007

08009134 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e04a      	b.n	80091dc <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	223d      	movs	r2, #61	; 0x3d
 800914a:	5c9b      	ldrb	r3, [r3, r2]
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d107      	bne.n	8009162 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	223c      	movs	r2, #60	; 0x3c
 8009156:	2100      	movs	r1, #0
 8009158:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	0018      	movs	r0, r3
 800915e:	f000 f841 	bl	80091e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	223d      	movs	r2, #61	; 0x3d
 8009166:	2102      	movs	r1, #2
 8009168:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3304      	adds	r3, #4
 8009172:	0019      	movs	r1, r3
 8009174:	0010      	movs	r0, r2
 8009176:	f000 f9ef 	bl	8009558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2248      	movs	r2, #72	; 0x48
 800917e:	2101      	movs	r1, #1
 8009180:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	223e      	movs	r2, #62	; 0x3e
 8009186:	2101      	movs	r1, #1
 8009188:	5499      	strb	r1, [r3, r2]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	223f      	movs	r2, #63	; 0x3f
 800918e:	2101      	movs	r1, #1
 8009190:	5499      	strb	r1, [r3, r2]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2240      	movs	r2, #64	; 0x40
 8009196:	2101      	movs	r1, #1
 8009198:	5499      	strb	r1, [r3, r2]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2241      	movs	r2, #65	; 0x41
 800919e:	2101      	movs	r1, #1
 80091a0:	5499      	strb	r1, [r3, r2]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2242      	movs	r2, #66	; 0x42
 80091a6:	2101      	movs	r1, #1
 80091a8:	5499      	strb	r1, [r3, r2]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2243      	movs	r2, #67	; 0x43
 80091ae:	2101      	movs	r1, #1
 80091b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2244      	movs	r2, #68	; 0x44
 80091b6:	2101      	movs	r1, #1
 80091b8:	5499      	strb	r1, [r3, r2]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2245      	movs	r2, #69	; 0x45
 80091be:	2101      	movs	r1, #1
 80091c0:	5499      	strb	r1, [r3, r2]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2246      	movs	r2, #70	; 0x46
 80091c6:	2101      	movs	r1, #1
 80091c8:	5499      	strb	r1, [r3, r2]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2247      	movs	r2, #71	; 0x47
 80091ce:	2101      	movs	r1, #1
 80091d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	223d      	movs	r2, #61	; 0x3d
 80091d6:	2101      	movs	r1, #1
 80091d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	0018      	movs	r0, r3
 80091de:	46bd      	mov	sp, r7
 80091e0:	b002      	add	sp, #8
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80091ec:	46c0      	nop			; (mov r8, r8)
 80091ee:	46bd      	mov	sp, r7
 80091f0:	b002      	add	sp, #8
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2202      	movs	r2, #2
 8009204:	4013      	ands	r3, r2
 8009206:	2b02      	cmp	r3, #2
 8009208:	d124      	bne.n	8009254 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	2202      	movs	r2, #2
 8009212:	4013      	ands	r3, r2
 8009214:	2b02      	cmp	r3, #2
 8009216:	d11d      	bne.n	8009254 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2203      	movs	r2, #3
 800921e:	4252      	negs	r2, r2
 8009220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	2203      	movs	r2, #3
 8009230:	4013      	ands	r3, r2
 8009232:	d004      	beq.n	800923e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	0018      	movs	r0, r3
 8009238:	f000 f976 	bl	8009528 <HAL_TIM_IC_CaptureCallback>
 800923c:	e007      	b.n	800924e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	0018      	movs	r0, r3
 8009242:	f000 f969 	bl	8009518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	0018      	movs	r0, r3
 800924a:	f000 f975 	bl	8009538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2204      	movs	r2, #4
 800925c:	4013      	ands	r3, r2
 800925e:	2b04      	cmp	r3, #4
 8009260:	d125      	bne.n	80092ae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	2204      	movs	r2, #4
 800926a:	4013      	ands	r3, r2
 800926c:	2b04      	cmp	r3, #4
 800926e:	d11e      	bne.n	80092ae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2205      	movs	r2, #5
 8009276:	4252      	negs	r2, r2
 8009278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2202      	movs	r2, #2
 800927e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	699a      	ldr	r2, [r3, #24]
 8009286:	23c0      	movs	r3, #192	; 0xc0
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4013      	ands	r3, r2
 800928c:	d004      	beq.n	8009298 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	0018      	movs	r0, r3
 8009292:	f000 f949 	bl	8009528 <HAL_TIM_IC_CaptureCallback>
 8009296:	e007      	b.n	80092a8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	0018      	movs	r0, r3
 800929c:	f000 f93c 	bl	8009518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	0018      	movs	r0, r3
 80092a4:	f000 f948 	bl	8009538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	2208      	movs	r2, #8
 80092b6:	4013      	ands	r3, r2
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d124      	bne.n	8009306 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	2208      	movs	r2, #8
 80092c4:	4013      	ands	r3, r2
 80092c6:	2b08      	cmp	r3, #8
 80092c8:	d11d      	bne.n	8009306 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2209      	movs	r2, #9
 80092d0:	4252      	negs	r2, r2
 80092d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2204      	movs	r2, #4
 80092d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	2203      	movs	r2, #3
 80092e2:	4013      	ands	r3, r2
 80092e4:	d004      	beq.n	80092f0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	0018      	movs	r0, r3
 80092ea:	f000 f91d 	bl	8009528 <HAL_TIM_IC_CaptureCallback>
 80092ee:	e007      	b.n	8009300 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	0018      	movs	r0, r3
 80092f4:	f000 f910 	bl	8009518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	0018      	movs	r0, r3
 80092fc:	f000 f91c 	bl	8009538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2210      	movs	r2, #16
 800930e:	4013      	ands	r3, r2
 8009310:	2b10      	cmp	r3, #16
 8009312:	d125      	bne.n	8009360 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	2210      	movs	r2, #16
 800931c:	4013      	ands	r3, r2
 800931e:	2b10      	cmp	r3, #16
 8009320:	d11e      	bne.n	8009360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2211      	movs	r2, #17
 8009328:	4252      	negs	r2, r2
 800932a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2208      	movs	r2, #8
 8009330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	69da      	ldr	r2, [r3, #28]
 8009338:	23c0      	movs	r3, #192	; 0xc0
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4013      	ands	r3, r2
 800933e:	d004      	beq.n	800934a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	0018      	movs	r0, r3
 8009344:	f000 f8f0 	bl	8009528 <HAL_TIM_IC_CaptureCallback>
 8009348:	e007      	b.n	800935a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	0018      	movs	r0, r3
 800934e:	f000 f8e3 	bl	8009518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	0018      	movs	r0, r3
 8009356:	f000 f8ef 	bl	8009538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2201      	movs	r2, #1
 8009368:	4013      	ands	r3, r2
 800936a:	2b01      	cmp	r3, #1
 800936c:	d10f      	bne.n	800938e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2201      	movs	r2, #1
 8009376:	4013      	ands	r3, r2
 8009378:	2b01      	cmp	r3, #1
 800937a:	d108      	bne.n	800938e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2202      	movs	r2, #2
 8009382:	4252      	negs	r2, r2
 8009384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	0018      	movs	r0, r3
 800938a:	f7fa ff6d 	bl	8004268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	2280      	movs	r2, #128	; 0x80
 8009396:	4013      	ands	r3, r2
 8009398:	2b80      	cmp	r3, #128	; 0x80
 800939a:	d10f      	bne.n	80093bc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	2280      	movs	r2, #128	; 0x80
 80093a4:	4013      	ands	r3, r2
 80093a6:	2b80      	cmp	r3, #128	; 0x80
 80093a8:	d108      	bne.n	80093bc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2281      	movs	r2, #129	; 0x81
 80093b0:	4252      	negs	r2, r2
 80093b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	0018      	movs	r0, r3
 80093b8:	f000 fcc0 	bl	8009d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691a      	ldr	r2, [r3, #16]
 80093c2:	2380      	movs	r3, #128	; 0x80
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	401a      	ands	r2, r3
 80093c8:	2380      	movs	r3, #128	; 0x80
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d10e      	bne.n	80093ee <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	2280      	movs	r2, #128	; 0x80
 80093d8:	4013      	ands	r3, r2
 80093da:	2b80      	cmp	r3, #128	; 0x80
 80093dc:	d107      	bne.n	80093ee <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a1c      	ldr	r2, [pc, #112]	; (8009454 <HAL_TIM_IRQHandler+0x260>)
 80093e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	0018      	movs	r0, r3
 80093ea:	f000 fcaf 	bl	8009d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	2240      	movs	r2, #64	; 0x40
 80093f6:	4013      	ands	r3, r2
 80093f8:	2b40      	cmp	r3, #64	; 0x40
 80093fa:	d10f      	bne.n	800941c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	2240      	movs	r2, #64	; 0x40
 8009404:	4013      	ands	r3, r2
 8009406:	2b40      	cmp	r3, #64	; 0x40
 8009408:	d108      	bne.n	800941c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2241      	movs	r2, #65	; 0x41
 8009410:	4252      	negs	r2, r2
 8009412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	0018      	movs	r0, r3
 8009418:	f000 f896 	bl	8009548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	2220      	movs	r2, #32
 8009424:	4013      	ands	r3, r2
 8009426:	2b20      	cmp	r3, #32
 8009428:	d10f      	bne.n	800944a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	2220      	movs	r2, #32
 8009432:	4013      	ands	r3, r2
 8009434:	2b20      	cmp	r3, #32
 8009436:	d108      	bne.n	800944a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2221      	movs	r2, #33	; 0x21
 800943e:	4252      	negs	r2, r2
 8009440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	0018      	movs	r0, r3
 8009446:	f000 fc71 	bl	8009d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	46bd      	mov	sp, r7
 800944e:	b002      	add	sp, #8
 8009450:	bd80      	pop	{r7, pc}
 8009452:	46c0      	nop			; (mov r8, r8)
 8009454:	fffffeff 	.word	0xfffffeff

08009458 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009464:	2317      	movs	r3, #23
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	2200      	movs	r2, #0
 800946a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	223c      	movs	r2, #60	; 0x3c
 8009470:	5c9b      	ldrb	r3, [r3, r2]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d101      	bne.n	800947a <HAL_TIM_OC_ConfigChannel+0x22>
 8009476:	2302      	movs	r3, #2
 8009478:	e048      	b.n	800950c <HAL_TIM_OC_ConfigChannel+0xb4>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	223c      	movs	r2, #60	; 0x3c
 800947e:	2101      	movs	r1, #1
 8009480:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b14      	cmp	r3, #20
 8009486:	d835      	bhi.n	80094f4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	009a      	lsls	r2, r3, #2
 800948c:	4b21      	ldr	r3, [pc, #132]	; (8009514 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800948e:	18d3      	adds	r3, r2, r3
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	0011      	movs	r1, r2
 800949c:	0018      	movs	r0, r3
 800949e:	f000 f8db 	bl	8009658 <TIM_OC1_SetConfig>
      break;
 80094a2:	e02c      	b.n	80094fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	0011      	movs	r1, r2
 80094ac:	0018      	movs	r0, r3
 80094ae:	f000 f95d 	bl	800976c <TIM_OC2_SetConfig>
      break;
 80094b2:	e024      	b.n	80094fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	0011      	movs	r1, r2
 80094bc:	0018      	movs	r0, r3
 80094be:	f000 f9d9 	bl	8009874 <TIM_OC3_SetConfig>
      break;
 80094c2:	e01c      	b.n	80094fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	0011      	movs	r1, r2
 80094cc:	0018      	movs	r0, r3
 80094ce:	f000 fa59 	bl	8009984 <TIM_OC4_SetConfig>
      break;
 80094d2:	e014      	b.n	80094fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	0011      	movs	r1, r2
 80094dc:	0018      	movs	r0, r3
 80094de:	f000 fabb 	bl	8009a58 <TIM_OC5_SetConfig>
      break;
 80094e2:	e00c      	b.n	80094fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	0011      	movs	r1, r2
 80094ec:	0018      	movs	r0, r3
 80094ee:	f000 fb13 	bl	8009b18 <TIM_OC6_SetConfig>
      break;
 80094f2:	e004      	b.n	80094fe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80094f4:	2317      	movs	r3, #23
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	2201      	movs	r2, #1
 80094fa:	701a      	strb	r2, [r3, #0]
      break;
 80094fc:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	223c      	movs	r2, #60	; 0x3c
 8009502:	2100      	movs	r1, #0
 8009504:	5499      	strb	r1, [r3, r2]

  return status;
 8009506:	2317      	movs	r3, #23
 8009508:	18fb      	adds	r3, r7, r3
 800950a:	781b      	ldrb	r3, [r3, #0]
}
 800950c:	0018      	movs	r0, r3
 800950e:	46bd      	mov	sp, r7
 8009510:	b006      	add	sp, #24
 8009512:	bd80      	pop	{r7, pc}
 8009514:	0800cf20 	.word	0x0800cf20

08009518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009520:	46c0      	nop			; (mov r8, r8)
 8009522:	46bd      	mov	sp, r7
 8009524:	b002      	add	sp, #8
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009530:	46c0      	nop			; (mov r8, r8)
 8009532:	46bd      	mov	sp, r7
 8009534:	b002      	add	sp, #8
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009540:	46c0      	nop			; (mov r8, r8)
 8009542:	46bd      	mov	sp, r7
 8009544:	b002      	add	sp, #8
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009550:	46c0      	nop			; (mov r8, r8)
 8009552:	46bd      	mov	sp, r7
 8009554:	b002      	add	sp, #8
 8009556:	bd80      	pop	{r7, pc}

08009558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a34      	ldr	r2, [pc, #208]	; (800963c <TIM_Base_SetConfig+0xe4>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d008      	beq.n	8009582 <TIM_Base_SetConfig+0x2a>
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	2380      	movs	r3, #128	; 0x80
 8009574:	05db      	lsls	r3, r3, #23
 8009576:	429a      	cmp	r2, r3
 8009578:	d003      	beq.n	8009582 <TIM_Base_SetConfig+0x2a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a30      	ldr	r2, [pc, #192]	; (8009640 <TIM_Base_SetConfig+0xe8>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d108      	bne.n	8009594 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2270      	movs	r2, #112	; 0x70
 8009586:	4393      	bics	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	4313      	orrs	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a29      	ldr	r2, [pc, #164]	; (800963c <TIM_Base_SetConfig+0xe4>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d018      	beq.n	80095ce <TIM_Base_SetConfig+0x76>
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	2380      	movs	r3, #128	; 0x80
 80095a0:	05db      	lsls	r3, r3, #23
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d013      	beq.n	80095ce <TIM_Base_SetConfig+0x76>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a25      	ldr	r2, [pc, #148]	; (8009640 <TIM_Base_SetConfig+0xe8>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d00f      	beq.n	80095ce <TIM_Base_SetConfig+0x76>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a24      	ldr	r2, [pc, #144]	; (8009644 <TIM_Base_SetConfig+0xec>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d00b      	beq.n	80095ce <TIM_Base_SetConfig+0x76>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a23      	ldr	r2, [pc, #140]	; (8009648 <TIM_Base_SetConfig+0xf0>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d007      	beq.n	80095ce <TIM_Base_SetConfig+0x76>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a22      	ldr	r2, [pc, #136]	; (800964c <TIM_Base_SetConfig+0xf4>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d003      	beq.n	80095ce <TIM_Base_SetConfig+0x76>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a21      	ldr	r2, [pc, #132]	; (8009650 <TIM_Base_SetConfig+0xf8>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d108      	bne.n	80095e0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	4a20      	ldr	r2, [pc, #128]	; (8009654 <TIM_Base_SetConfig+0xfc>)
 80095d2:	4013      	ands	r3, r2
 80095d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	4313      	orrs	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2280      	movs	r2, #128	; 0x80
 80095e4:	4393      	bics	r3, r2
 80095e6:	001a      	movs	r2, r3
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	689a      	ldr	r2, [r3, #8]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a0c      	ldr	r2, [pc, #48]	; (800963c <TIM_Base_SetConfig+0xe4>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d00b      	beq.n	8009626 <TIM_Base_SetConfig+0xce>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a0d      	ldr	r2, [pc, #52]	; (8009648 <TIM_Base_SetConfig+0xf0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d007      	beq.n	8009626 <TIM_Base_SetConfig+0xce>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a0c      	ldr	r2, [pc, #48]	; (800964c <TIM_Base_SetConfig+0xf4>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d003      	beq.n	8009626 <TIM_Base_SetConfig+0xce>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a0b      	ldr	r2, [pc, #44]	; (8009650 <TIM_Base_SetConfig+0xf8>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d103      	bne.n	800962e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	691a      	ldr	r2, [r3, #16]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	615a      	str	r2, [r3, #20]
}
 8009634:	46c0      	nop			; (mov r8, r8)
 8009636:	46bd      	mov	sp, r7
 8009638:	b004      	add	sp, #16
 800963a:	bd80      	pop	{r7, pc}
 800963c:	40012c00 	.word	0x40012c00
 8009640:	40000400 	.word	0x40000400
 8009644:	40002000 	.word	0x40002000
 8009648:	40014000 	.word	0x40014000
 800964c:	40014400 	.word	0x40014400
 8009650:	40014800 	.word	0x40014800
 8009654:	fffffcff 	.word	0xfffffcff

08009658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	2201      	movs	r2, #1
 8009668:	4393      	bics	r3, r2
 800966a:	001a      	movs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	4a32      	ldr	r2, [pc, #200]	; (8009750 <TIM_OC1_SetConfig+0xf8>)
 8009686:	4013      	ands	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2203      	movs	r2, #3
 800968e:	4393      	bics	r3, r2
 8009690:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2202      	movs	r2, #2
 80096a0:	4393      	bics	r3, r2
 80096a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a28      	ldr	r2, [pc, #160]	; (8009754 <TIM_OC1_SetConfig+0xfc>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00b      	beq.n	80096ce <TIM_OC1_SetConfig+0x76>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a27      	ldr	r2, [pc, #156]	; (8009758 <TIM_OC1_SetConfig+0x100>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d007      	beq.n	80096ce <TIM_OC1_SetConfig+0x76>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a26      	ldr	r2, [pc, #152]	; (800975c <TIM_OC1_SetConfig+0x104>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d003      	beq.n	80096ce <TIM_OC1_SetConfig+0x76>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a25      	ldr	r2, [pc, #148]	; (8009760 <TIM_OC1_SetConfig+0x108>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d10c      	bne.n	80096e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2208      	movs	r2, #8
 80096d2:	4393      	bics	r3, r2
 80096d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	4313      	orrs	r3, r2
 80096de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2204      	movs	r2, #4
 80096e4:	4393      	bics	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a1a      	ldr	r2, [pc, #104]	; (8009754 <TIM_OC1_SetConfig+0xfc>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d00b      	beq.n	8009708 <TIM_OC1_SetConfig+0xb0>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a19      	ldr	r2, [pc, #100]	; (8009758 <TIM_OC1_SetConfig+0x100>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d007      	beq.n	8009708 <TIM_OC1_SetConfig+0xb0>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a18      	ldr	r2, [pc, #96]	; (800975c <TIM_OC1_SetConfig+0x104>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d003      	beq.n	8009708 <TIM_OC1_SetConfig+0xb0>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a17      	ldr	r2, [pc, #92]	; (8009760 <TIM_OC1_SetConfig+0x108>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d111      	bne.n	800972c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	4a16      	ldr	r2, [pc, #88]	; (8009764 <TIM_OC1_SetConfig+0x10c>)
 800970c:	4013      	ands	r3, r2
 800970e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	4a15      	ldr	r2, [pc, #84]	; (8009768 <TIM_OC1_SetConfig+0x110>)
 8009714:	4013      	ands	r3, r2
 8009716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4313      	orrs	r3, r2
 8009720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	4313      	orrs	r3, r2
 800972a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	621a      	str	r2, [r3, #32]
}
 8009746:	46c0      	nop			; (mov r8, r8)
 8009748:	46bd      	mov	sp, r7
 800974a:	b006      	add	sp, #24
 800974c:	bd80      	pop	{r7, pc}
 800974e:	46c0      	nop			; (mov r8, r8)
 8009750:	fffeff8f 	.word	0xfffeff8f
 8009754:	40012c00 	.word	0x40012c00
 8009758:	40014000 	.word	0x40014000
 800975c:	40014400 	.word	0x40014400
 8009760:	40014800 	.word	0x40014800
 8009764:	fffffeff 	.word	0xfffffeff
 8009768:	fffffdff 	.word	0xfffffdff

0800976c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	2210      	movs	r2, #16
 800977c:	4393      	bics	r3, r2
 800977e:	001a      	movs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4a2e      	ldr	r2, [pc, #184]	; (8009854 <TIM_OC2_SetConfig+0xe8>)
 800979a:	4013      	ands	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4a2d      	ldr	r2, [pc, #180]	; (8009858 <TIM_OC2_SetConfig+0xec>)
 80097a2:	4013      	ands	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2220      	movs	r2, #32
 80097b6:	4393      	bics	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a24      	ldr	r2, [pc, #144]	; (800985c <TIM_OC2_SetConfig+0xf0>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d10d      	bne.n	80097ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2280      	movs	r2, #128	; 0x80
 80097d2:	4393      	bics	r3, r2
 80097d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	011b      	lsls	r3, r3, #4
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4313      	orrs	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2240      	movs	r2, #64	; 0x40
 80097e6:	4393      	bics	r3, r2
 80097e8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a1b      	ldr	r2, [pc, #108]	; (800985c <TIM_OC2_SetConfig+0xf0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d00b      	beq.n	800980a <TIM_OC2_SetConfig+0x9e>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a1a      	ldr	r2, [pc, #104]	; (8009860 <TIM_OC2_SetConfig+0xf4>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d007      	beq.n	800980a <TIM_OC2_SetConfig+0x9e>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a19      	ldr	r2, [pc, #100]	; (8009864 <TIM_OC2_SetConfig+0xf8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d003      	beq.n	800980a <TIM_OC2_SetConfig+0x9e>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a18      	ldr	r2, [pc, #96]	; (8009868 <TIM_OC2_SetConfig+0xfc>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d113      	bne.n	8009832 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	4a17      	ldr	r2, [pc, #92]	; (800986c <TIM_OC2_SetConfig+0x100>)
 800980e:	4013      	ands	r3, r2
 8009810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	4a16      	ldr	r2, [pc, #88]	; (8009870 <TIM_OC2_SetConfig+0x104>)
 8009816:	4013      	ands	r3, r2
 8009818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	621a      	str	r2, [r3, #32]
}
 800984c:	46c0      	nop			; (mov r8, r8)
 800984e:	46bd      	mov	sp, r7
 8009850:	b006      	add	sp, #24
 8009852:	bd80      	pop	{r7, pc}
 8009854:	feff8fff 	.word	0xfeff8fff
 8009858:	fffffcff 	.word	0xfffffcff
 800985c:	40012c00 	.word	0x40012c00
 8009860:	40014000 	.word	0x40014000
 8009864:	40014400 	.word	0x40014400
 8009868:	40014800 	.word	0x40014800
 800986c:	fffffbff 	.word	0xfffffbff
 8009870:	fffff7ff 	.word	0xfffff7ff

08009874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	4a35      	ldr	r2, [pc, #212]	; (8009958 <TIM_OC3_SetConfig+0xe4>)
 8009884:	401a      	ands	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4a2f      	ldr	r2, [pc, #188]	; (800995c <TIM_OC3_SetConfig+0xe8>)
 80098a0:	4013      	ands	r3, r2
 80098a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2203      	movs	r2, #3
 80098a8:	4393      	bics	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	4a29      	ldr	r2, [pc, #164]	; (8009960 <TIM_OC3_SetConfig+0xec>)
 80098ba:	4013      	ands	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	021b      	lsls	r3, r3, #8
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a25      	ldr	r2, [pc, #148]	; (8009964 <TIM_OC3_SetConfig+0xf0>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d10d      	bne.n	80098ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	4a24      	ldr	r2, [pc, #144]	; (8009968 <TIM_OC3_SetConfig+0xf4>)
 80098d6:	4013      	ands	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	4a20      	ldr	r2, [pc, #128]	; (800996c <TIM_OC3_SetConfig+0xf8>)
 80098ea:	4013      	ands	r3, r2
 80098ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a1c      	ldr	r2, [pc, #112]	; (8009964 <TIM_OC3_SetConfig+0xf0>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00b      	beq.n	800990e <TIM_OC3_SetConfig+0x9a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a1d      	ldr	r2, [pc, #116]	; (8009970 <TIM_OC3_SetConfig+0xfc>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d007      	beq.n	800990e <TIM_OC3_SetConfig+0x9a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a1c      	ldr	r2, [pc, #112]	; (8009974 <TIM_OC3_SetConfig+0x100>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d003      	beq.n	800990e <TIM_OC3_SetConfig+0x9a>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a1b      	ldr	r2, [pc, #108]	; (8009978 <TIM_OC3_SetConfig+0x104>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d113      	bne.n	8009936 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	4a1a      	ldr	r2, [pc, #104]	; (800997c <TIM_OC3_SetConfig+0x108>)
 8009912:	4013      	ands	r3, r2
 8009914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	4a19      	ldr	r2, [pc, #100]	; (8009980 <TIM_OC3_SetConfig+0x10c>)
 800991a:	4013      	ands	r3, r2
 800991c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	4313      	orrs	r3, r2
 8009928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	011b      	lsls	r3, r3, #4
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	4313      	orrs	r3, r2
 8009934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	621a      	str	r2, [r3, #32]
}
 8009950:	46c0      	nop			; (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b006      	add	sp, #24
 8009956:	bd80      	pop	{r7, pc}
 8009958:	fffffeff 	.word	0xfffffeff
 800995c:	fffeff8f 	.word	0xfffeff8f
 8009960:	fffffdff 	.word	0xfffffdff
 8009964:	40012c00 	.word	0x40012c00
 8009968:	fffff7ff 	.word	0xfffff7ff
 800996c:	fffffbff 	.word	0xfffffbff
 8009970:	40014000 	.word	0x40014000
 8009974:	40014400 	.word	0x40014400
 8009978:	40014800 	.word	0x40014800
 800997c:	ffffefff 	.word	0xffffefff
 8009980:	ffffdfff 	.word	0xffffdfff

08009984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	4a28      	ldr	r2, [pc, #160]	; (8009a34 <TIM_OC4_SetConfig+0xb0>)
 8009994:	401a      	ands	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4a22      	ldr	r2, [pc, #136]	; (8009a38 <TIM_OC4_SetConfig+0xb4>)
 80099b0:	4013      	ands	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4a21      	ldr	r2, [pc, #132]	; (8009a3c <TIM_OC4_SetConfig+0xb8>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	021b      	lsls	r3, r3, #8
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	4a1d      	ldr	r2, [pc, #116]	; (8009a40 <TIM_OC4_SetConfig+0xbc>)
 80099cc:	4013      	ands	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	031b      	lsls	r3, r3, #12
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	4313      	orrs	r3, r2
 80099da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a19      	ldr	r2, [pc, #100]	; (8009a44 <TIM_OC4_SetConfig+0xc0>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00b      	beq.n	80099fc <TIM_OC4_SetConfig+0x78>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <TIM_OC4_SetConfig+0xc4>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d007      	beq.n	80099fc <TIM_OC4_SetConfig+0x78>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a17      	ldr	r2, [pc, #92]	; (8009a4c <TIM_OC4_SetConfig+0xc8>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d003      	beq.n	80099fc <TIM_OC4_SetConfig+0x78>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a16      	ldr	r2, [pc, #88]	; (8009a50 <TIM_OC4_SetConfig+0xcc>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d109      	bne.n	8009a10 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	4a15      	ldr	r2, [pc, #84]	; (8009a54 <TIM_OC4_SetConfig+0xd0>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	019b      	lsls	r3, r3, #6
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	621a      	str	r2, [r3, #32]
}
 8009a2a:	46c0      	nop			; (mov r8, r8)
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	b006      	add	sp, #24
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	46c0      	nop			; (mov r8, r8)
 8009a34:	ffffefff 	.word	0xffffefff
 8009a38:	feff8fff 	.word	0xfeff8fff
 8009a3c:	fffffcff 	.word	0xfffffcff
 8009a40:	ffffdfff 	.word	0xffffdfff
 8009a44:	40012c00 	.word	0x40012c00
 8009a48:	40014000 	.word	0x40014000
 8009a4c:	40014400 	.word	0x40014400
 8009a50:	40014800 	.word	0x40014800
 8009a54:	ffffbfff 	.word	0xffffbfff

08009a58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	4a25      	ldr	r2, [pc, #148]	; (8009afc <TIM_OC5_SetConfig+0xa4>)
 8009a68:	401a      	ands	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4a1f      	ldr	r2, [pc, #124]	; (8009b00 <TIM_OC5_SetConfig+0xa8>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	4a1b      	ldr	r2, [pc, #108]	; (8009b04 <TIM_OC5_SetConfig+0xac>)
 8009a96:	4013      	ands	r3, r2
 8009a98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	041b      	lsls	r3, r3, #16
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4a17      	ldr	r2, [pc, #92]	; (8009b08 <TIM_OC5_SetConfig+0xb0>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d00b      	beq.n	8009ac6 <TIM_OC5_SetConfig+0x6e>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a16      	ldr	r2, [pc, #88]	; (8009b0c <TIM_OC5_SetConfig+0xb4>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d007      	beq.n	8009ac6 <TIM_OC5_SetConfig+0x6e>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a15      	ldr	r2, [pc, #84]	; (8009b10 <TIM_OC5_SetConfig+0xb8>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d003      	beq.n	8009ac6 <TIM_OC5_SetConfig+0x6e>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a14      	ldr	r2, [pc, #80]	; (8009b14 <TIM_OC5_SetConfig+0xbc>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d109      	bne.n	8009ada <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	4a0c      	ldr	r2, [pc, #48]	; (8009afc <TIM_OC5_SetConfig+0xa4>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	021b      	lsls	r3, r3, #8
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	621a      	str	r2, [r3, #32]
}
 8009af4:	46c0      	nop			; (mov r8, r8)
 8009af6:	46bd      	mov	sp, r7
 8009af8:	b006      	add	sp, #24
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	fffeffff 	.word	0xfffeffff
 8009b00:	fffeff8f 	.word	0xfffeff8f
 8009b04:	fffdffff 	.word	0xfffdffff
 8009b08:	40012c00 	.word	0x40012c00
 8009b0c:	40014000 	.word	0x40014000
 8009b10:	40014400 	.word	0x40014400
 8009b14:	40014800 	.word	0x40014800

08009b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	4a26      	ldr	r2, [pc, #152]	; (8009bc0 <TIM_OC6_SetConfig+0xa8>)
 8009b28:	401a      	ands	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a20      	ldr	r2, [pc, #128]	; (8009bc4 <TIM_OC6_SetConfig+0xac>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	4a1c      	ldr	r2, [pc, #112]	; (8009bc8 <TIM_OC6_SetConfig+0xb0>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	051b      	lsls	r3, r3, #20
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a18      	ldr	r2, [pc, #96]	; (8009bcc <TIM_OC6_SetConfig+0xb4>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d00b      	beq.n	8009b88 <TIM_OC6_SetConfig+0x70>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a17      	ldr	r2, [pc, #92]	; (8009bd0 <TIM_OC6_SetConfig+0xb8>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d007      	beq.n	8009b88 <TIM_OC6_SetConfig+0x70>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a16      	ldr	r2, [pc, #88]	; (8009bd4 <TIM_OC6_SetConfig+0xbc>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d003      	beq.n	8009b88 <TIM_OC6_SetConfig+0x70>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a15      	ldr	r2, [pc, #84]	; (8009bd8 <TIM_OC6_SetConfig+0xc0>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d109      	bne.n	8009b9c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	4a14      	ldr	r2, [pc, #80]	; (8009bdc <TIM_OC6_SetConfig+0xc4>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	029b      	lsls	r3, r3, #10
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	621a      	str	r2, [r3, #32]
}
 8009bb6:	46c0      	nop			; (mov r8, r8)
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	b006      	add	sp, #24
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	46c0      	nop			; (mov r8, r8)
 8009bc0:	ffefffff 	.word	0xffefffff
 8009bc4:	feff8fff 	.word	0xfeff8fff
 8009bc8:	ffdfffff 	.word	0xffdfffff
 8009bcc:	40012c00 	.word	0x40012c00
 8009bd0:	40014000 	.word	0x40014000
 8009bd4:	40014400 	.word	0x40014400
 8009bd8:	40014800 	.word	0x40014800
 8009bdc:	fffbffff 	.word	0xfffbffff

08009be0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	223c      	movs	r2, #60	; 0x3c
 8009bf2:	5c9b      	ldrb	r3, [r3, r2]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d101      	bne.n	8009bfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e079      	b.n	8009cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	223c      	movs	r2, #60	; 0x3c
 8009c00:	2101      	movs	r1, #1
 8009c02:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	22ff      	movs	r2, #255	; 0xff
 8009c08:	4393      	bics	r3, r2
 8009c0a:	001a      	movs	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4a38      	ldr	r2, [pc, #224]	; (8009cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8009c18:	401a      	ands	r2, r3
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	4a35      	ldr	r2, [pc, #212]	; (8009cfc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009c26:	401a      	ands	r2, r3
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4a33      	ldr	r2, [pc, #204]	; (8009d00 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009c34:	401a      	ands	r2, r3
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	4a30      	ldr	r2, [pc, #192]	; (8009d04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009c42:	401a      	ands	r2, r3
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4a2e      	ldr	r2, [pc, #184]	; (8009d08 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8009c50:	401a      	ands	r2, r3
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4a2b      	ldr	r2, [pc, #172]	; (8009d0c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8009c5e:	401a      	ands	r2, r3
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c64:	4313      	orrs	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4a29      	ldr	r2, [pc, #164]	; (8009d10 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009c6c:	401a      	ands	r2, r3
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	041b      	lsls	r3, r3, #16
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a25      	ldr	r2, [pc, #148]	; (8009d14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d106      	bne.n	8009c90 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4a24      	ldr	r2, [pc, #144]	; (8009d18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009c86:	401a      	ands	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a1f      	ldr	r2, [pc, #124]	; (8009d14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d121      	bne.n	8009cde <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	4a1f      	ldr	r2, [pc, #124]	; (8009d1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009c9e:	401a      	ands	r2, r3
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca4:	051b      	lsls	r3, r3, #20
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4a1c      	ldr	r2, [pc, #112]	; (8009d20 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8009cae:	401a      	ands	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4a1a      	ldr	r2, [pc, #104]	; (8009d24 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8009cbc:	401a      	ands	r2, r3
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a12      	ldr	r2, [pc, #72]	; (8009d14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d106      	bne.n	8009cde <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4a15      	ldr	r2, [pc, #84]	; (8009d28 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8009cd4:	401a      	ands	r2, r3
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	223c      	movs	r2, #60	; 0x3c
 8009cea:	2100      	movs	r1, #0
 8009cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	b004      	add	sp, #16
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	fffffcff 	.word	0xfffffcff
 8009cfc:	fffffbff 	.word	0xfffffbff
 8009d00:	fffff7ff 	.word	0xfffff7ff
 8009d04:	ffffefff 	.word	0xffffefff
 8009d08:	ffffdfff 	.word	0xffffdfff
 8009d0c:	ffffbfff 	.word	0xffffbfff
 8009d10:	fff0ffff 	.word	0xfff0ffff
 8009d14:	40012c00 	.word	0x40012c00
 8009d18:	efffffff 	.word	0xefffffff
 8009d1c:	ff0fffff 	.word	0xff0fffff
 8009d20:	feffffff 	.word	0xfeffffff
 8009d24:	fdffffff 	.word	0xfdffffff
 8009d28:	dfffffff 	.word	0xdfffffff

08009d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d34:	46c0      	nop			; (mov r8, r8)
 8009d36:	46bd      	mov	sp, r7
 8009d38:	b002      	add	sp, #8
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d44:	46c0      	nop			; (mov r8, r8)
 8009d46:	46bd      	mov	sp, r7
 8009d48:	b002      	add	sp, #8
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d54:	46c0      	nop			; (mov r8, r8)
 8009d56:	46bd      	mov	sp, r7
 8009d58:	b002      	add	sp, #8
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e046      	b.n	8009dfc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2288      	movs	r2, #136	; 0x88
 8009d72:	589b      	ldr	r3, [r3, r2]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d107      	bne.n	8009d88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2284      	movs	r2, #132	; 0x84
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	0018      	movs	r0, r3
 8009d84:	f7fa ffa2 	bl	8004ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2288      	movs	r2, #136	; 0x88
 8009d8c:	2124      	movs	r1, #36	; 0x24
 8009d8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	438a      	bics	r2, r1
 8009d9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	0018      	movs	r0, r3
 8009da4:	f000 fc6a 	bl	800a67c <UART_SetConfig>
 8009da8:	0003      	movs	r3, r0
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e024      	b.n	8009dfc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f000 ff1b 	bl	800abf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	490d      	ldr	r1, [pc, #52]	; (8009e04 <HAL_UART_Init+0xa8>)
 8009dce:	400a      	ands	r2, r1
 8009dd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	212a      	movs	r1, #42	; 0x2a
 8009dde:	438a      	bics	r2, r1
 8009de0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2101      	movs	r1, #1
 8009dee:	430a      	orrs	r2, r1
 8009df0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	0018      	movs	r0, r3
 8009df6:	f000 ffb3 	bl	800ad60 <UART_CheckIdleState>
 8009dfa:	0003      	movs	r3, r0
}
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	b002      	add	sp, #8
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	ffffb7ff 	.word	0xffffb7ff

08009e08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	1dbb      	adds	r3, r7, #6
 8009e14:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	228c      	movs	r2, #140	; 0x8c
 8009e1a:	589b      	ldr	r3, [r3, r2]
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d14a      	bne.n	8009eb6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <HAL_UART_Receive_IT+0x26>
 8009e26:	1dbb      	adds	r3, r7, #6
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e042      	b.n	8009eb8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	2380      	movs	r3, #128	; 0x80
 8009e38:	015b      	lsls	r3, r3, #5
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d109      	bne.n	8009e52 <HAL_UART_Receive_IT+0x4a>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d105      	bne.n	8009e52 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	d001      	beq.n	8009e52 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e032      	b.n	8009eb8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a18      	ldr	r2, [pc, #96]	; (8009ec0 <HAL_UART_Receive_IT+0xb8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d020      	beq.n	8009ea4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	2380      	movs	r3, #128	; 0x80
 8009e6a:	041b      	lsls	r3, r3, #16
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	d019      	beq.n	8009ea4 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e70:	f3ef 8310 	mrs	r3, PRIMASK
 8009e74:	613b      	str	r3, [r7, #16]
  return(result);
 8009e76:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f383 8810 	msr	PRIMASK, r3
}
 8009e84:	46c0      	nop			; (mov r8, r8)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2180      	movs	r1, #128	; 0x80
 8009e92:	04c9      	lsls	r1, r1, #19
 8009e94:	430a      	orrs	r2, r1
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	f383 8810 	msr	PRIMASK, r3
}
 8009ea2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ea4:	1dbb      	adds	r3, r7, #6
 8009ea6:	881a      	ldrh	r2, [r3, #0]
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	0018      	movs	r0, r3
 8009eae:	f001 f86d 	bl	800af8c <UART_Start_Receive_IT>
 8009eb2:	0003      	movs	r3, r0
 8009eb4:	e000      	b.n	8009eb8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8009eb6:	2302      	movs	r3, #2
  }
}
 8009eb8:	0018      	movs	r0, r3
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	b008      	add	sp, #32
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	40008000 	.word	0x40008000

08009ec4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b088      	sub	sp, #32
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	1dbb      	adds	r3, r7, #6
 8009ed0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2288      	movs	r2, #136	; 0x88
 8009ed6:	589b      	ldr	r3, [r3, r2]
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	d000      	beq.n	8009ede <HAL_UART_Transmit_DMA+0x1a>
 8009edc:	e079      	b.n	8009fd2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <HAL_UART_Transmit_DMA+0x28>
 8009ee4:	1dbb      	adds	r3, r7, #6
 8009ee6:	881b      	ldrh	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e071      	b.n	8009fd4 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	689a      	ldr	r2, [r3, #8]
 8009ef4:	2380      	movs	r3, #128	; 0x80
 8009ef6:	015b      	lsls	r3, r3, #5
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d109      	bne.n	8009f10 <HAL_UART_Transmit_DMA+0x4c>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d105      	bne.n	8009f10 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2201      	movs	r2, #1
 8009f08:	4013      	ands	r3, r2
 8009f0a:	d001      	beq.n	8009f10 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e061      	b.n	8009fd4 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	1dba      	adds	r2, r7, #6
 8009f1a:	2154      	movs	r1, #84	; 0x54
 8009f1c:	8812      	ldrh	r2, [r2, #0]
 8009f1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	1dba      	adds	r2, r7, #6
 8009f24:	2156      	movs	r1, #86	; 0x56
 8009f26:	8812      	ldrh	r2, [r2, #0]
 8009f28:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2290      	movs	r2, #144	; 0x90
 8009f2e:	2100      	movs	r1, #0
 8009f30:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2288      	movs	r2, #136	; 0x88
 8009f36:	2121      	movs	r1, #33	; 0x21
 8009f38:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d028      	beq.n	8009f94 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f46:	4a25      	ldr	r2, [pc, #148]	; (8009fdc <HAL_UART_Transmit_DMA+0x118>)
 8009f48:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f4e:	4a24      	ldr	r2, [pc, #144]	; (8009fe0 <HAL_UART_Transmit_DMA+0x11c>)
 8009f50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f56:	4a23      	ldr	r2, [pc, #140]	; (8009fe4 <HAL_UART_Transmit_DMA+0x120>)
 8009f58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f5e:	2200      	movs	r2, #0
 8009f60:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6a:	0019      	movs	r1, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3328      	adds	r3, #40	; 0x28
 8009f72:	001a      	movs	r2, r3
 8009f74:	1dbb      	adds	r3, r7, #6
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	f7fc ff7c 	bl	8006e74 <HAL_DMA_Start_IT>
 8009f7c:	1e03      	subs	r3, r0, #0
 8009f7e:	d009      	beq.n	8009f94 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2290      	movs	r2, #144	; 0x90
 8009f84:	2110      	movs	r1, #16
 8009f86:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2288      	movs	r2, #136	; 0x88
 8009f8c:	2120      	movs	r1, #32
 8009f8e:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e01f      	b.n	8009fd4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2240      	movs	r2, #64	; 0x40
 8009f9a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8009fa0:	613b      	str	r3, [r7, #16]
  return(result);
 8009fa2:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fa4:	61fb      	str	r3, [r7, #28]
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f383 8810 	msr	PRIMASK, r3
}
 8009fb0:	46c0      	nop			; (mov r8, r8)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689a      	ldr	r2, [r3, #8]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2180      	movs	r1, #128	; 0x80
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	609a      	str	r2, [r3, #8]
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	f383 8810 	msr	PRIMASK, r3
}
 8009fcc:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e000      	b.n	8009fd4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8009fd2:	2302      	movs	r3, #2
  }
}
 8009fd4:	0018      	movs	r0, r3
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	b008      	add	sp, #32
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	0800b321 	.word	0x0800b321
 8009fe0:	0800b3b9 	.word	0x0800b3b9
 8009fe4:	0800b3d7 	.word	0x0800b3d7

08009fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fe8:	b5b0      	push	{r4, r5, r7, lr}
 8009fea:	b0aa      	sub	sp, #168	; 0xa8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	22a4      	movs	r2, #164	; 0xa4
 8009ff8:	18b9      	adds	r1, r7, r2
 8009ffa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	20a0      	movs	r0, #160	; 0xa0
 800a004:	1839      	adds	r1, r7, r0
 800a006:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	249c      	movs	r4, #156	; 0x9c
 800a010:	1939      	adds	r1, r7, r4
 800a012:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a014:	0011      	movs	r1, r2
 800a016:	18bb      	adds	r3, r7, r2
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4aa2      	ldr	r2, [pc, #648]	; (800a2a4 <HAL_UART_IRQHandler+0x2bc>)
 800a01c:	4013      	ands	r3, r2
 800a01e:	2298      	movs	r2, #152	; 0x98
 800a020:	18bd      	adds	r5, r7, r2
 800a022:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a024:	18bb      	adds	r3, r7, r2
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d11a      	bne.n	800a062 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a02c:	187b      	adds	r3, r7, r1
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2220      	movs	r2, #32
 800a032:	4013      	ands	r3, r2
 800a034:	d015      	beq.n	800a062 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a036:	183b      	adds	r3, r7, r0
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2220      	movs	r2, #32
 800a03c:	4013      	ands	r3, r2
 800a03e:	d105      	bne.n	800a04c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a040:	193b      	adds	r3, r7, r4
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	2380      	movs	r3, #128	; 0x80
 800a046:	055b      	lsls	r3, r3, #21
 800a048:	4013      	ands	r3, r2
 800a04a:	d00a      	beq.n	800a062 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a050:	2b00      	cmp	r3, #0
 800a052:	d100      	bne.n	800a056 <HAL_UART_IRQHandler+0x6e>
 800a054:	e2dc      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	0010      	movs	r0, r2
 800a05e:	4798      	blx	r3
      }
      return;
 800a060:	e2d6      	b.n	800a610 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a062:	2398      	movs	r3, #152	; 0x98
 800a064:	18fb      	adds	r3, r7, r3
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d100      	bne.n	800a06e <HAL_UART_IRQHandler+0x86>
 800a06c:	e122      	b.n	800a2b4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a06e:	239c      	movs	r3, #156	; 0x9c
 800a070:	18fb      	adds	r3, r7, r3
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a8c      	ldr	r2, [pc, #560]	; (800a2a8 <HAL_UART_IRQHandler+0x2c0>)
 800a076:	4013      	ands	r3, r2
 800a078:	d106      	bne.n	800a088 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a07a:	23a0      	movs	r3, #160	; 0xa0
 800a07c:	18fb      	adds	r3, r7, r3
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a8a      	ldr	r2, [pc, #552]	; (800a2ac <HAL_UART_IRQHandler+0x2c4>)
 800a082:	4013      	ands	r3, r2
 800a084:	d100      	bne.n	800a088 <HAL_UART_IRQHandler+0xa0>
 800a086:	e115      	b.n	800a2b4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a088:	23a4      	movs	r3, #164	; 0xa4
 800a08a:	18fb      	adds	r3, r7, r3
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2201      	movs	r2, #1
 800a090:	4013      	ands	r3, r2
 800a092:	d012      	beq.n	800a0ba <HAL_UART_IRQHandler+0xd2>
 800a094:	23a0      	movs	r3, #160	; 0xa0
 800a096:	18fb      	adds	r3, r7, r3
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	2380      	movs	r3, #128	; 0x80
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	4013      	ands	r3, r2
 800a0a0:	d00b      	beq.n	800a0ba <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2290      	movs	r2, #144	; 0x90
 800a0ae:	589b      	ldr	r3, [r3, r2]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2190      	movs	r1, #144	; 0x90
 800a0b8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0ba:	23a4      	movs	r3, #164	; 0xa4
 800a0bc:	18fb      	adds	r3, r7, r3
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	d011      	beq.n	800a0ea <HAL_UART_IRQHandler+0x102>
 800a0c6:	239c      	movs	r3, #156	; 0x9c
 800a0c8:	18fb      	adds	r3, r7, r3
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	d00b      	beq.n	800a0ea <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2290      	movs	r2, #144	; 0x90
 800a0de:	589b      	ldr	r3, [r3, r2]
 800a0e0:	2204      	movs	r2, #4
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2190      	movs	r1, #144	; 0x90
 800a0e8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0ea:	23a4      	movs	r3, #164	; 0xa4
 800a0ec:	18fb      	adds	r3, r7, r3
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2204      	movs	r2, #4
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	d011      	beq.n	800a11a <HAL_UART_IRQHandler+0x132>
 800a0f6:	239c      	movs	r3, #156	; 0x9c
 800a0f8:	18fb      	adds	r3, r7, r3
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	4013      	ands	r3, r2
 800a100:	d00b      	beq.n	800a11a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2204      	movs	r2, #4
 800a108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2290      	movs	r2, #144	; 0x90
 800a10e:	589b      	ldr	r3, [r3, r2]
 800a110:	2202      	movs	r2, #2
 800a112:	431a      	orrs	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2190      	movs	r1, #144	; 0x90
 800a118:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a11a:	23a4      	movs	r3, #164	; 0xa4
 800a11c:	18fb      	adds	r3, r7, r3
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2208      	movs	r2, #8
 800a122:	4013      	ands	r3, r2
 800a124:	d017      	beq.n	800a156 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a126:	23a0      	movs	r3, #160	; 0xa0
 800a128:	18fb      	adds	r3, r7, r3
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2220      	movs	r2, #32
 800a12e:	4013      	ands	r3, r2
 800a130:	d105      	bne.n	800a13e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a132:	239c      	movs	r3, #156	; 0x9c
 800a134:	18fb      	adds	r3, r7, r3
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a5b      	ldr	r2, [pc, #364]	; (800a2a8 <HAL_UART_IRQHandler+0x2c0>)
 800a13a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a13c:	d00b      	beq.n	800a156 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2208      	movs	r2, #8
 800a144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2290      	movs	r2, #144	; 0x90
 800a14a:	589b      	ldr	r3, [r3, r2]
 800a14c:	2208      	movs	r2, #8
 800a14e:	431a      	orrs	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2190      	movs	r1, #144	; 0x90
 800a154:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a156:	23a4      	movs	r3, #164	; 0xa4
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	2380      	movs	r3, #128	; 0x80
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	4013      	ands	r3, r2
 800a162:	d013      	beq.n	800a18c <HAL_UART_IRQHandler+0x1a4>
 800a164:	23a0      	movs	r3, #160	; 0xa0
 800a166:	18fb      	adds	r3, r7, r3
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	2380      	movs	r3, #128	; 0x80
 800a16c:	04db      	lsls	r3, r3, #19
 800a16e:	4013      	ands	r3, r2
 800a170:	d00c      	beq.n	800a18c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2280      	movs	r2, #128	; 0x80
 800a178:	0112      	lsls	r2, r2, #4
 800a17a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2290      	movs	r2, #144	; 0x90
 800a180:	589b      	ldr	r3, [r3, r2]
 800a182:	2220      	movs	r2, #32
 800a184:	431a      	orrs	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2190      	movs	r1, #144	; 0x90
 800a18a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2290      	movs	r2, #144	; 0x90
 800a190:	589b      	ldr	r3, [r3, r2]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d100      	bne.n	800a198 <HAL_UART_IRQHandler+0x1b0>
 800a196:	e23d      	b.n	800a614 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a198:	23a4      	movs	r3, #164	; 0xa4
 800a19a:	18fb      	adds	r3, r7, r3
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	d015      	beq.n	800a1d0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1a4:	23a0      	movs	r3, #160	; 0xa0
 800a1a6:	18fb      	adds	r3, r7, r3
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	d106      	bne.n	800a1be <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a1b0:	239c      	movs	r3, #156	; 0x9c
 800a1b2:	18fb      	adds	r3, r7, r3
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	2380      	movs	r3, #128	; 0x80
 800a1b8:	055b      	lsls	r3, r3, #21
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	d008      	beq.n	800a1d0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d004      	beq.n	800a1d0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	0010      	movs	r0, r2
 800a1ce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2290      	movs	r2, #144	; 0x90
 800a1d4:	589b      	ldr	r3, [r3, r2]
 800a1d6:	2194      	movs	r1, #148	; 0x94
 800a1d8:	187a      	adds	r2, r7, r1
 800a1da:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	2240      	movs	r2, #64	; 0x40
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	2b40      	cmp	r3, #64	; 0x40
 800a1e8:	d004      	beq.n	800a1f4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1ea:	187b      	adds	r3, r7, r1
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2228      	movs	r2, #40	; 0x28
 800a1f0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1f2:	d04c      	beq.n	800a28e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	f001 f82c 	bl	800b254 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	2240      	movs	r2, #64	; 0x40
 800a204:	4013      	ands	r3, r2
 800a206:	2b40      	cmp	r3, #64	; 0x40
 800a208:	d13c      	bne.n	800a284 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a20a:	f3ef 8310 	mrs	r3, PRIMASK
 800a20e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800a210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a212:	2090      	movs	r0, #144	; 0x90
 800a214:	183a      	adds	r2, r7, r0
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	2301      	movs	r3, #1
 800a21a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a21c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a21e:	f383 8810 	msr	PRIMASK, r3
}
 800a222:	46c0      	nop			; (mov r8, r8)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2140      	movs	r1, #64	; 0x40
 800a230:	438a      	bics	r2, r1
 800a232:	609a      	str	r2, [r3, #8]
 800a234:	183b      	adds	r3, r7, r0
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a23a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a23c:	f383 8810 	msr	PRIMASK, r3
}
 800a240:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2280      	movs	r2, #128	; 0x80
 800a246:	589b      	ldr	r3, [r3, r2]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d016      	beq.n	800a27a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2280      	movs	r2, #128	; 0x80
 800a250:	589b      	ldr	r3, [r3, r2]
 800a252:	4a17      	ldr	r2, [pc, #92]	; (800a2b0 <HAL_UART_IRQHandler+0x2c8>)
 800a254:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2280      	movs	r2, #128	; 0x80
 800a25a:	589b      	ldr	r3, [r3, r2]
 800a25c:	0018      	movs	r0, r3
 800a25e:	f7fc fef1 	bl	8007044 <HAL_DMA_Abort_IT>
 800a262:	1e03      	subs	r3, r0, #0
 800a264:	d01c      	beq.n	800a2a0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2280      	movs	r2, #128	; 0x80
 800a26a:	589b      	ldr	r3, [r3, r2]
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	2180      	movs	r1, #128	; 0x80
 800a272:	5852      	ldr	r2, [r2, r1]
 800a274:	0010      	movs	r0, r2
 800a276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a278:	e012      	b.n	800a2a0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	0018      	movs	r0, r3
 800a27e:	f000 f9e9 	bl	800a654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a282:	e00d      	b.n	800a2a0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	0018      	movs	r0, r3
 800a288:	f000 f9e4 	bl	800a654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28c:	e008      	b.n	800a2a0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	0018      	movs	r0, r3
 800a292:	f000 f9df 	bl	800a654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2290      	movs	r2, #144	; 0x90
 800a29a:	2100      	movs	r1, #0
 800a29c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a29e:	e1b9      	b.n	800a614 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a0:	46c0      	nop			; (mov r8, r8)
    return;
 800a2a2:	e1b7      	b.n	800a614 <HAL_UART_IRQHandler+0x62c>
 800a2a4:	0000080f 	.word	0x0000080f
 800a2a8:	10000001 	.word	0x10000001
 800a2ac:	04000120 	.word	0x04000120
 800a2b0:	0800b45d 	.word	0x0800b45d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d000      	beq.n	800a2be <HAL_UART_IRQHandler+0x2d6>
 800a2bc:	e13e      	b.n	800a53c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a2be:	23a4      	movs	r3, #164	; 0xa4
 800a2c0:	18fb      	adds	r3, r7, r3
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2210      	movs	r2, #16
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	d100      	bne.n	800a2cc <HAL_UART_IRQHandler+0x2e4>
 800a2ca:	e137      	b.n	800a53c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a2cc:	23a0      	movs	r3, #160	; 0xa0
 800a2ce:	18fb      	adds	r3, r7, r3
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2210      	movs	r2, #16
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	d100      	bne.n	800a2da <HAL_UART_IRQHandler+0x2f2>
 800a2d8:	e130      	b.n	800a53c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2210      	movs	r2, #16
 800a2e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	2240      	movs	r2, #64	; 0x40
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	2b40      	cmp	r3, #64	; 0x40
 800a2ee:	d000      	beq.n	800a2f2 <HAL_UART_IRQHandler+0x30a>
 800a2f0:	e0a4      	b.n	800a43c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2280      	movs	r2, #128	; 0x80
 800a2f6:	589b      	ldr	r3, [r3, r2]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	217e      	movs	r1, #126	; 0x7e
 800a2fe:	187b      	adds	r3, r7, r1
 800a300:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a302:	187b      	adds	r3, r7, r1
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d100      	bne.n	800a30c <HAL_UART_IRQHandler+0x324>
 800a30a:	e185      	b.n	800a618 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	225c      	movs	r2, #92	; 0x5c
 800a310:	5a9b      	ldrh	r3, [r3, r2]
 800a312:	187a      	adds	r2, r7, r1
 800a314:	8812      	ldrh	r2, [r2, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d300      	bcc.n	800a31c <HAL_UART_IRQHandler+0x334>
 800a31a:	e17d      	b.n	800a618 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	187a      	adds	r2, r7, r1
 800a320:	215e      	movs	r1, #94	; 0x5e
 800a322:	8812      	ldrh	r2, [r2, #0]
 800a324:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2280      	movs	r2, #128	; 0x80
 800a32a:	589b      	ldr	r3, [r3, r2]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2220      	movs	r2, #32
 800a332:	4013      	ands	r3, r2
 800a334:	d170      	bne.n	800a418 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a336:	f3ef 8310 	mrs	r3, PRIMASK
 800a33a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a33e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a340:	2301      	movs	r3, #1
 800a342:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a346:	f383 8810 	msr	PRIMASK, r3
}
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	49b4      	ldr	r1, [pc, #720]	; (800a628 <HAL_UART_IRQHandler+0x640>)
 800a358:	400a      	ands	r2, r1
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a35e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	f383 8810 	msr	PRIMASK, r3
}
 800a366:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a368:	f3ef 8310 	mrs	r3, PRIMASK
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a36e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a370:	677b      	str	r3, [r7, #116]	; 0x74
 800a372:	2301      	movs	r3, #1
 800a374:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a378:	f383 8810 	msr	PRIMASK, r3
}
 800a37c:	46c0      	nop			; (mov r8, r8)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689a      	ldr	r2, [r3, #8]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2101      	movs	r1, #1
 800a38a:	438a      	bics	r2, r1
 800a38c:	609a      	str	r2, [r3, #8]
 800a38e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a390:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a394:	f383 8810 	msr	PRIMASK, r3
}
 800a398:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a39a:	f3ef 8310 	mrs	r3, PRIMASK
 800a39e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3a2:	673b      	str	r3, [r7, #112]	; 0x70
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3aa:	f383 8810 	msr	PRIMASK, r3
}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2140      	movs	r1, #64	; 0x40
 800a3bc:	438a      	bics	r2, r1
 800a3be:	609a      	str	r2, [r3, #8]
 800a3c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3c6:	f383 8810 	msr	PRIMASK, r3
}
 800a3ca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	228c      	movs	r2, #140	; 0x8c
 800a3d0:	2120      	movs	r1, #32
 800a3d2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3da:	f3ef 8310 	mrs	r3, PRIMASK
 800a3de:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800a3e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3ea:	f383 8810 	msr	PRIMASK, r3
}
 800a3ee:	46c0      	nop			; (mov r8, r8)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2110      	movs	r1, #16
 800a3fc:	438a      	bics	r2, r1
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a402:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a406:	f383 8810 	msr	PRIMASK, r3
}
 800a40a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2280      	movs	r2, #128	; 0x80
 800a410:	589b      	ldr	r3, [r3, r2]
 800a412:	0018      	movs	r0, r3
 800a414:	f7fc fdb4 	bl	8006f80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	225c      	movs	r2, #92	; 0x5c
 800a422:	5a9a      	ldrh	r2, [r3, r2]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	215e      	movs	r1, #94	; 0x5e
 800a428:	5a5b      	ldrh	r3, [r3, r1]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	b29a      	uxth	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	0011      	movs	r1, r2
 800a434:	0018      	movs	r0, r3
 800a436:	f000 f915 	bl	800a664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a43a:	e0ed      	b.n	800a618 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	225c      	movs	r2, #92	; 0x5c
 800a440:	5a99      	ldrh	r1, [r3, r2]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	225e      	movs	r2, #94	; 0x5e
 800a446:	5a9b      	ldrh	r3, [r3, r2]
 800a448:	b29a      	uxth	r2, r3
 800a44a:	208e      	movs	r0, #142	; 0x8e
 800a44c:	183b      	adds	r3, r7, r0
 800a44e:	1a8a      	subs	r2, r1, r2
 800a450:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	225e      	movs	r2, #94	; 0x5e
 800a456:	5a9b      	ldrh	r3, [r3, r2]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d100      	bne.n	800a460 <HAL_UART_IRQHandler+0x478>
 800a45e:	e0dd      	b.n	800a61c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800a460:	183b      	adds	r3, r7, r0
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d100      	bne.n	800a46a <HAL_UART_IRQHandler+0x482>
 800a468:	e0d8      	b.n	800a61c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a46a:	f3ef 8310 	mrs	r3, PRIMASK
 800a46e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a470:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a472:	2488      	movs	r4, #136	; 0x88
 800a474:	193a      	adds	r2, r7, r4
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	2301      	movs	r3, #1
 800a47a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f383 8810 	msr	PRIMASK, r3
}
 800a482:	46c0      	nop			; (mov r8, r8)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4967      	ldr	r1, [pc, #412]	; (800a62c <HAL_UART_IRQHandler+0x644>)
 800a490:	400a      	ands	r2, r1
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	193b      	adds	r3, r7, r4
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f383 8810 	msr	PRIMASK, r3
}
 800a4a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a4a6:	61bb      	str	r3, [r7, #24]
  return(result);
 800a4a8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4aa:	2484      	movs	r4, #132	; 0x84
 800a4ac:	193a      	adds	r2, r7, r4
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	f383 8810 	msr	PRIMASK, r3
}
 800a4ba:	46c0      	nop			; (mov r8, r8)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	495a      	ldr	r1, [pc, #360]	; (800a630 <HAL_UART_IRQHandler+0x648>)
 800a4c8:	400a      	ands	r2, r1
 800a4ca:	609a      	str	r2, [r3, #8]
 800a4cc:	193b      	adds	r3, r7, r4
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	f383 8810 	msr	PRIMASK, r3
}
 800a4d8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	228c      	movs	r2, #140	; 0x8c
 800a4de:	2120      	movs	r1, #32
 800a4e0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4ee:	f3ef 8310 	mrs	r3, PRIMASK
 800a4f2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4f6:	2480      	movs	r4, #128	; 0x80
 800a4f8:	193a      	adds	r2, r7, r4
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	f383 8810 	msr	PRIMASK, r3
}
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2110      	movs	r1, #16
 800a514:	438a      	bics	r2, r1
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	193b      	adds	r3, r7, r4
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	f383 8810 	msr	PRIMASK, r3
}
 800a524:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2202      	movs	r2, #2
 800a52a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a52c:	183b      	adds	r3, r7, r0
 800a52e:	881a      	ldrh	r2, [r3, #0]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	0011      	movs	r1, r2
 800a534:	0018      	movs	r0, r3
 800a536:	f000 f895 	bl	800a664 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a53a:	e06f      	b.n	800a61c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a53c:	23a4      	movs	r3, #164	; 0xa4
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	2380      	movs	r3, #128	; 0x80
 800a544:	035b      	lsls	r3, r3, #13
 800a546:	4013      	ands	r3, r2
 800a548:	d010      	beq.n	800a56c <HAL_UART_IRQHandler+0x584>
 800a54a:	239c      	movs	r3, #156	; 0x9c
 800a54c:	18fb      	adds	r3, r7, r3
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	2380      	movs	r3, #128	; 0x80
 800a552:	03db      	lsls	r3, r3, #15
 800a554:	4013      	ands	r3, r2
 800a556:	d009      	beq.n	800a56c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2280      	movs	r2, #128	; 0x80
 800a55e:	0352      	lsls	r2, r2, #13
 800a560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	0018      	movs	r0, r3
 800a566:	f001 fc1d 	bl	800bda4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a56a:	e05a      	b.n	800a622 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a56c:	23a4      	movs	r3, #164	; 0xa4
 800a56e:	18fb      	adds	r3, r7, r3
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2280      	movs	r2, #128	; 0x80
 800a574:	4013      	ands	r3, r2
 800a576:	d016      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a578:	23a0      	movs	r3, #160	; 0xa0
 800a57a:	18fb      	adds	r3, r7, r3
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2280      	movs	r2, #128	; 0x80
 800a580:	4013      	ands	r3, r2
 800a582:	d106      	bne.n	800a592 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a584:	239c      	movs	r3, #156	; 0x9c
 800a586:	18fb      	adds	r3, r7, r3
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	2380      	movs	r3, #128	; 0x80
 800a58c:	041b      	lsls	r3, r3, #16
 800a58e:	4013      	ands	r3, r2
 800a590:	d009      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a596:	2b00      	cmp	r3, #0
 800a598:	d042      	beq.n	800a620 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	0010      	movs	r0, r2
 800a5a2:	4798      	blx	r3
    }
    return;
 800a5a4:	e03c      	b.n	800a620 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5a6:	23a4      	movs	r3, #164	; 0xa4
 800a5a8:	18fb      	adds	r3, r7, r3
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2240      	movs	r2, #64	; 0x40
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	d00a      	beq.n	800a5c8 <HAL_UART_IRQHandler+0x5e0>
 800a5b2:	23a0      	movs	r3, #160	; 0xa0
 800a5b4:	18fb      	adds	r3, r7, r3
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2240      	movs	r2, #64	; 0x40
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	d004      	beq.n	800a5c8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f000 ff62 	bl	800b48a <UART_EndTransmit_IT>
    return;
 800a5c6:	e02c      	b.n	800a622 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5c8:	23a4      	movs	r3, #164	; 0xa4
 800a5ca:	18fb      	adds	r3, r7, r3
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	2380      	movs	r3, #128	; 0x80
 800a5d0:	041b      	lsls	r3, r3, #16
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	d00b      	beq.n	800a5ee <HAL_UART_IRQHandler+0x606>
 800a5d6:	23a0      	movs	r3, #160	; 0xa0
 800a5d8:	18fb      	adds	r3, r7, r3
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	2380      	movs	r3, #128	; 0x80
 800a5de:	05db      	lsls	r3, r3, #23
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	d004      	beq.n	800a5ee <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f001 fbec 	bl	800bdc4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5ec:	e019      	b.n	800a622 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a5ee:	23a4      	movs	r3, #164	; 0xa4
 800a5f0:	18fb      	adds	r3, r7, r3
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	2380      	movs	r3, #128	; 0x80
 800a5f6:	045b      	lsls	r3, r3, #17
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	d012      	beq.n	800a622 <HAL_UART_IRQHandler+0x63a>
 800a5fc:	23a0      	movs	r3, #160	; 0xa0
 800a5fe:	18fb      	adds	r3, r7, r3
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	da0d      	bge.n	800a622 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	0018      	movs	r0, r3
 800a60a:	f001 fbd3 	bl	800bdb4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a60e:	e008      	b.n	800a622 <HAL_UART_IRQHandler+0x63a>
      return;
 800a610:	46c0      	nop			; (mov r8, r8)
 800a612:	e006      	b.n	800a622 <HAL_UART_IRQHandler+0x63a>
    return;
 800a614:	46c0      	nop			; (mov r8, r8)
 800a616:	e004      	b.n	800a622 <HAL_UART_IRQHandler+0x63a>
      return;
 800a618:	46c0      	nop			; (mov r8, r8)
 800a61a:	e002      	b.n	800a622 <HAL_UART_IRQHandler+0x63a>
      return;
 800a61c:	46c0      	nop			; (mov r8, r8)
 800a61e:	e000      	b.n	800a622 <HAL_UART_IRQHandler+0x63a>
    return;
 800a620:	46c0      	nop			; (mov r8, r8)
  }
}
 800a622:	46bd      	mov	sp, r7
 800a624:	b02a      	add	sp, #168	; 0xa8
 800a626:	bdb0      	pop	{r4, r5, r7, pc}
 800a628:	fffffeff 	.word	0xfffffeff
 800a62c:	fffffedf 	.word	0xfffffedf
 800a630:	effffffe 	.word	0xeffffffe

0800a634 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a63c:	46c0      	nop			; (mov r8, r8)
 800a63e:	46bd      	mov	sp, r7
 800a640:	b002      	add	sp, #8
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a64c:	46c0      	nop			; (mov r8, r8)
 800a64e:	46bd      	mov	sp, r7
 800a650:	b002      	add	sp, #8
 800a652:	bd80      	pop	{r7, pc}

0800a654 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a65c:	46c0      	nop			; (mov r8, r8)
 800a65e:	46bd      	mov	sp, r7
 800a660:	b002      	add	sp, #8
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	000a      	movs	r2, r1
 800a66e:	1cbb      	adds	r3, r7, #2
 800a670:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a672:	46c0      	nop			; (mov r8, r8)
 800a674:	46bd      	mov	sp, r7
 800a676:	b002      	add	sp, #8
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a67c:	b5b0      	push	{r4, r5, r7, lr}
 800a67e:	b090      	sub	sp, #64	; 0x40
 800a680:	af00      	add	r7, sp, #0
 800a682:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a684:	231a      	movs	r3, #26
 800a686:	2220      	movs	r2, #32
 800a688:	189b      	adds	r3, r3, r2
 800a68a:	19db      	adds	r3, r3, r7
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	689a      	ldr	r2, [r3, #8]
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	431a      	orrs	r2, r3
 800a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4aaf      	ldr	r2, [pc, #700]	; (800a96c <UART_SetConfig+0x2f0>)
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	0019      	movs	r1, r3
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ba:	430b      	orrs	r3, r1
 800a6bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	4aaa      	ldr	r2, [pc, #680]	; (800a970 <UART_SetConfig+0x2f4>)
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	68d9      	ldr	r1, [r3, #12]
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	0003      	movs	r3, r0
 800a6d4:	430b      	orrs	r3, r1
 800a6d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4aa4      	ldr	r2, [pc, #656]	; (800a974 <UART_SetConfig+0x2f8>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d004      	beq.n	800a6f2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	4a9f      	ldr	r2, [pc, #636]	; (800a978 <UART_SetConfig+0x2fc>)
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	0019      	movs	r1, r3
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a704:	430b      	orrs	r3, r1
 800a706:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70e:	220f      	movs	r2, #15
 800a710:	4393      	bics	r3, r2
 800a712:	0018      	movs	r0, r3
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	0003      	movs	r3, r0
 800a71e:	430b      	orrs	r3, r1
 800a720:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a95      	ldr	r2, [pc, #596]	; (800a97c <UART_SetConfig+0x300>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d131      	bne.n	800a790 <UART_SetConfig+0x114>
 800a72c:	4b94      	ldr	r3, [pc, #592]	; (800a980 <UART_SetConfig+0x304>)
 800a72e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a730:	2203      	movs	r2, #3
 800a732:	4013      	ands	r3, r2
 800a734:	2b03      	cmp	r3, #3
 800a736:	d01d      	beq.n	800a774 <UART_SetConfig+0xf8>
 800a738:	d823      	bhi.n	800a782 <UART_SetConfig+0x106>
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d00c      	beq.n	800a758 <UART_SetConfig+0xdc>
 800a73e:	d820      	bhi.n	800a782 <UART_SetConfig+0x106>
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <UART_SetConfig+0xce>
 800a744:	2b01      	cmp	r3, #1
 800a746:	d00e      	beq.n	800a766 <UART_SetConfig+0xea>
 800a748:	e01b      	b.n	800a782 <UART_SetConfig+0x106>
 800a74a:	231b      	movs	r3, #27
 800a74c:	2220      	movs	r2, #32
 800a74e:	189b      	adds	r3, r3, r2
 800a750:	19db      	adds	r3, r3, r7
 800a752:	2200      	movs	r2, #0
 800a754:	701a      	strb	r2, [r3, #0]
 800a756:	e0b4      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a758:	231b      	movs	r3, #27
 800a75a:	2220      	movs	r2, #32
 800a75c:	189b      	adds	r3, r3, r2
 800a75e:	19db      	adds	r3, r3, r7
 800a760:	2202      	movs	r2, #2
 800a762:	701a      	strb	r2, [r3, #0]
 800a764:	e0ad      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a766:	231b      	movs	r3, #27
 800a768:	2220      	movs	r2, #32
 800a76a:	189b      	adds	r3, r3, r2
 800a76c:	19db      	adds	r3, r3, r7
 800a76e:	2204      	movs	r2, #4
 800a770:	701a      	strb	r2, [r3, #0]
 800a772:	e0a6      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a774:	231b      	movs	r3, #27
 800a776:	2220      	movs	r2, #32
 800a778:	189b      	adds	r3, r3, r2
 800a77a:	19db      	adds	r3, r3, r7
 800a77c:	2208      	movs	r2, #8
 800a77e:	701a      	strb	r2, [r3, #0]
 800a780:	e09f      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a782:	231b      	movs	r3, #27
 800a784:	2220      	movs	r2, #32
 800a786:	189b      	adds	r3, r3, r2
 800a788:	19db      	adds	r3, r3, r7
 800a78a:	2210      	movs	r2, #16
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	e098      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a7b      	ldr	r2, [pc, #492]	; (800a984 <UART_SetConfig+0x308>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d131      	bne.n	800a7fe <UART_SetConfig+0x182>
 800a79a:	4b79      	ldr	r3, [pc, #484]	; (800a980 <UART_SetConfig+0x304>)
 800a79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a79e:	220c      	movs	r2, #12
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	2b0c      	cmp	r3, #12
 800a7a4:	d01d      	beq.n	800a7e2 <UART_SetConfig+0x166>
 800a7a6:	d823      	bhi.n	800a7f0 <UART_SetConfig+0x174>
 800a7a8:	2b08      	cmp	r3, #8
 800a7aa:	d00c      	beq.n	800a7c6 <UART_SetConfig+0x14a>
 800a7ac:	d820      	bhi.n	800a7f0 <UART_SetConfig+0x174>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <UART_SetConfig+0x13c>
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	d00e      	beq.n	800a7d4 <UART_SetConfig+0x158>
 800a7b6:	e01b      	b.n	800a7f0 <UART_SetConfig+0x174>
 800a7b8:	231b      	movs	r3, #27
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	189b      	adds	r3, r3, r2
 800a7be:	19db      	adds	r3, r3, r7
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	701a      	strb	r2, [r3, #0]
 800a7c4:	e07d      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a7c6:	231b      	movs	r3, #27
 800a7c8:	2220      	movs	r2, #32
 800a7ca:	189b      	adds	r3, r3, r2
 800a7cc:	19db      	adds	r3, r3, r7
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	e076      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a7d4:	231b      	movs	r3, #27
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	189b      	adds	r3, r3, r2
 800a7da:	19db      	adds	r3, r3, r7
 800a7dc:	2204      	movs	r2, #4
 800a7de:	701a      	strb	r2, [r3, #0]
 800a7e0:	e06f      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a7e2:	231b      	movs	r3, #27
 800a7e4:	2220      	movs	r2, #32
 800a7e6:	189b      	adds	r3, r3, r2
 800a7e8:	19db      	adds	r3, r3, r7
 800a7ea:	2208      	movs	r2, #8
 800a7ec:	701a      	strb	r2, [r3, #0]
 800a7ee:	e068      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a7f0:	231b      	movs	r3, #27
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	189b      	adds	r3, r3, r2
 800a7f6:	19db      	adds	r3, r3, r7
 800a7f8:	2210      	movs	r2, #16
 800a7fa:	701a      	strb	r2, [r3, #0]
 800a7fc:	e061      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a61      	ldr	r2, [pc, #388]	; (800a988 <UART_SetConfig+0x30c>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d106      	bne.n	800a816 <UART_SetConfig+0x19a>
 800a808:	231b      	movs	r3, #27
 800a80a:	2220      	movs	r2, #32
 800a80c:	189b      	adds	r3, r3, r2
 800a80e:	19db      	adds	r3, r3, r7
 800a810:	2200      	movs	r2, #0
 800a812:	701a      	strb	r2, [r3, #0]
 800a814:	e055      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a5c      	ldr	r2, [pc, #368]	; (800a98c <UART_SetConfig+0x310>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d106      	bne.n	800a82e <UART_SetConfig+0x1b2>
 800a820:	231b      	movs	r3, #27
 800a822:	2220      	movs	r2, #32
 800a824:	189b      	adds	r3, r3, r2
 800a826:	19db      	adds	r3, r3, r7
 800a828:	2200      	movs	r2, #0
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	e049      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a50      	ldr	r2, [pc, #320]	; (800a974 <UART_SetConfig+0x2f8>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d13e      	bne.n	800a8b6 <UART_SetConfig+0x23a>
 800a838:	4b51      	ldr	r3, [pc, #324]	; (800a980 <UART_SetConfig+0x304>)
 800a83a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a83c:	23c0      	movs	r3, #192	; 0xc0
 800a83e:	011b      	lsls	r3, r3, #4
 800a840:	4013      	ands	r3, r2
 800a842:	22c0      	movs	r2, #192	; 0xc0
 800a844:	0112      	lsls	r2, r2, #4
 800a846:	4293      	cmp	r3, r2
 800a848:	d027      	beq.n	800a89a <UART_SetConfig+0x21e>
 800a84a:	22c0      	movs	r2, #192	; 0xc0
 800a84c:	0112      	lsls	r2, r2, #4
 800a84e:	4293      	cmp	r3, r2
 800a850:	d82a      	bhi.n	800a8a8 <UART_SetConfig+0x22c>
 800a852:	2280      	movs	r2, #128	; 0x80
 800a854:	0112      	lsls	r2, r2, #4
 800a856:	4293      	cmp	r3, r2
 800a858:	d011      	beq.n	800a87e <UART_SetConfig+0x202>
 800a85a:	2280      	movs	r2, #128	; 0x80
 800a85c:	0112      	lsls	r2, r2, #4
 800a85e:	4293      	cmp	r3, r2
 800a860:	d822      	bhi.n	800a8a8 <UART_SetConfig+0x22c>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d004      	beq.n	800a870 <UART_SetConfig+0x1f4>
 800a866:	2280      	movs	r2, #128	; 0x80
 800a868:	00d2      	lsls	r2, r2, #3
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d00e      	beq.n	800a88c <UART_SetConfig+0x210>
 800a86e:	e01b      	b.n	800a8a8 <UART_SetConfig+0x22c>
 800a870:	231b      	movs	r3, #27
 800a872:	2220      	movs	r2, #32
 800a874:	189b      	adds	r3, r3, r2
 800a876:	19db      	adds	r3, r3, r7
 800a878:	2200      	movs	r2, #0
 800a87a:	701a      	strb	r2, [r3, #0]
 800a87c:	e021      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a87e:	231b      	movs	r3, #27
 800a880:	2220      	movs	r2, #32
 800a882:	189b      	adds	r3, r3, r2
 800a884:	19db      	adds	r3, r3, r7
 800a886:	2202      	movs	r2, #2
 800a888:	701a      	strb	r2, [r3, #0]
 800a88a:	e01a      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a88c:	231b      	movs	r3, #27
 800a88e:	2220      	movs	r2, #32
 800a890:	189b      	adds	r3, r3, r2
 800a892:	19db      	adds	r3, r3, r7
 800a894:	2204      	movs	r2, #4
 800a896:	701a      	strb	r2, [r3, #0]
 800a898:	e013      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a89a:	231b      	movs	r3, #27
 800a89c:	2220      	movs	r2, #32
 800a89e:	189b      	adds	r3, r3, r2
 800a8a0:	19db      	adds	r3, r3, r7
 800a8a2:	2208      	movs	r2, #8
 800a8a4:	701a      	strb	r2, [r3, #0]
 800a8a6:	e00c      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a8a8:	231b      	movs	r3, #27
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	189b      	adds	r3, r3, r2
 800a8ae:	19db      	adds	r3, r3, r7
 800a8b0:	2210      	movs	r2, #16
 800a8b2:	701a      	strb	r2, [r3, #0]
 800a8b4:	e005      	b.n	800a8c2 <UART_SetConfig+0x246>
 800a8b6:	231b      	movs	r3, #27
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	189b      	adds	r3, r3, r2
 800a8bc:	19db      	adds	r3, r3, r7
 800a8be:	2210      	movs	r2, #16
 800a8c0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a2b      	ldr	r2, [pc, #172]	; (800a974 <UART_SetConfig+0x2f8>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d000      	beq.n	800a8ce <UART_SetConfig+0x252>
 800a8cc:	e0a9      	b.n	800aa22 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8ce:	231b      	movs	r3, #27
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	189b      	adds	r3, r3, r2
 800a8d4:	19db      	adds	r3, r3, r7
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2b08      	cmp	r3, #8
 800a8da:	d015      	beq.n	800a908 <UART_SetConfig+0x28c>
 800a8dc:	dc18      	bgt.n	800a910 <UART_SetConfig+0x294>
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d00d      	beq.n	800a8fe <UART_SetConfig+0x282>
 800a8e2:	dc15      	bgt.n	800a910 <UART_SetConfig+0x294>
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <UART_SetConfig+0x272>
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d005      	beq.n	800a8f8 <UART_SetConfig+0x27c>
 800a8ec:	e010      	b.n	800a910 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ee:	f7fe f99f 	bl	8008c30 <HAL_RCC_GetPCLK1Freq>
 800a8f2:	0003      	movs	r3, r0
 800a8f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a8f6:	e014      	b.n	800a922 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8f8:	4b25      	ldr	r3, [pc, #148]	; (800a990 <UART_SetConfig+0x314>)
 800a8fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a8fc:	e011      	b.n	800a922 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8fe:	f7fe f90b 	bl	8008b18 <HAL_RCC_GetSysClockFreq>
 800a902:	0003      	movs	r3, r0
 800a904:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a906:	e00c      	b.n	800a922 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a908:	2380      	movs	r3, #128	; 0x80
 800a90a:	021b      	lsls	r3, r3, #8
 800a90c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a90e:	e008      	b.n	800a922 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800a914:	231a      	movs	r3, #26
 800a916:	2220      	movs	r2, #32
 800a918:	189b      	adds	r3, r3, r2
 800a91a:	19db      	adds	r3, r3, r7
 800a91c:	2201      	movs	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
        break;
 800a920:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	2b00      	cmp	r3, #0
 800a926:	d100      	bne.n	800a92a <UART_SetConfig+0x2ae>
 800a928:	e14b      	b.n	800abc2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a92e:	4b19      	ldr	r3, [pc, #100]	; (800a994 <UART_SetConfig+0x318>)
 800a930:	0052      	lsls	r2, r2, #1
 800a932:	5ad3      	ldrh	r3, [r2, r3]
 800a934:	0019      	movs	r1, r3
 800a936:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a938:	f7f5 fbf0 	bl	800011c <__udivsi3>
 800a93c:	0003      	movs	r3, r0
 800a93e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	685a      	ldr	r2, [r3, #4]
 800a944:	0013      	movs	r3, r2
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	189b      	adds	r3, r3, r2
 800a94a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d305      	bcc.n	800a95c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a958:	429a      	cmp	r2, r3
 800a95a:	d91d      	bls.n	800a998 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800a95c:	231a      	movs	r3, #26
 800a95e:	2220      	movs	r2, #32
 800a960:	189b      	adds	r3, r3, r2
 800a962:	19db      	adds	r3, r3, r7
 800a964:	2201      	movs	r2, #1
 800a966:	701a      	strb	r2, [r3, #0]
 800a968:	e12b      	b.n	800abc2 <UART_SetConfig+0x546>
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	cfff69f3 	.word	0xcfff69f3
 800a970:	ffffcfff 	.word	0xffffcfff
 800a974:	40008000 	.word	0x40008000
 800a978:	11fff4ff 	.word	0x11fff4ff
 800a97c:	40013800 	.word	0x40013800
 800a980:	40021000 	.word	0x40021000
 800a984:	40004400 	.word	0x40004400
 800a988:	40004800 	.word	0x40004800
 800a98c:	40004c00 	.word	0x40004c00
 800a990:	00f42400 	.word	0x00f42400
 800a994:	0800cf74 	.word	0x0800cf74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99a:	61bb      	str	r3, [r7, #24]
 800a99c:	2300      	movs	r3, #0
 800a99e:	61fb      	str	r3, [r7, #28]
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9a4:	4b92      	ldr	r3, [pc, #584]	; (800abf0 <UART_SetConfig+0x574>)
 800a9a6:	0052      	lsls	r2, r2, #1
 800a9a8:	5ad3      	ldrh	r3, [r2, r3]
 800a9aa:	613b      	str	r3, [r7, #16]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	617b      	str	r3, [r7, #20]
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	69b8      	ldr	r0, [r7, #24]
 800a9b6:	69f9      	ldr	r1, [r7, #28]
 800a9b8:	f7f5 fcb4 	bl	8000324 <__aeabi_uldivmod>
 800a9bc:	0002      	movs	r2, r0
 800a9be:	000b      	movs	r3, r1
 800a9c0:	0e11      	lsrs	r1, r2, #24
 800a9c2:	021d      	lsls	r5, r3, #8
 800a9c4:	430d      	orrs	r5, r1
 800a9c6:	0214      	lsls	r4, r2, #8
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	085b      	lsrs	r3, r3, #1
 800a9ce:	60bb      	str	r3, [r7, #8]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	68b8      	ldr	r0, [r7, #8]
 800a9d6:	68f9      	ldr	r1, [r7, #12]
 800a9d8:	1900      	adds	r0, r0, r4
 800a9da:	4169      	adcs	r1, r5
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	603b      	str	r3, [r7, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	607b      	str	r3, [r7, #4]
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f7f5 fc9b 	bl	8000324 <__aeabi_uldivmod>
 800a9ee:	0002      	movs	r2, r0
 800a9f0:	000b      	movs	r3, r1
 800a9f2:	0013      	movs	r3, r2
 800a9f4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9f8:	23c0      	movs	r3, #192	; 0xc0
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d309      	bcc.n	800aa14 <UART_SetConfig+0x398>
 800aa00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa02:	2380      	movs	r3, #128	; 0x80
 800aa04:	035b      	lsls	r3, r3, #13
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d204      	bcs.n	800aa14 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa10:	60da      	str	r2, [r3, #12]
 800aa12:	e0d6      	b.n	800abc2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800aa14:	231a      	movs	r3, #26
 800aa16:	2220      	movs	r2, #32
 800aa18:	189b      	adds	r3, r3, r2
 800aa1a:	19db      	adds	r3, r3, r7
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	701a      	strb	r2, [r3, #0]
 800aa20:	e0cf      	b.n	800abc2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	69da      	ldr	r2, [r3, #28]
 800aa26:	2380      	movs	r3, #128	; 0x80
 800aa28:	021b      	lsls	r3, r3, #8
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d000      	beq.n	800aa30 <UART_SetConfig+0x3b4>
 800aa2e:	e070      	b.n	800ab12 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800aa30:	231b      	movs	r3, #27
 800aa32:	2220      	movs	r2, #32
 800aa34:	189b      	adds	r3, r3, r2
 800aa36:	19db      	adds	r3, r3, r7
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b08      	cmp	r3, #8
 800aa3c:	d015      	beq.n	800aa6a <UART_SetConfig+0x3ee>
 800aa3e:	dc18      	bgt.n	800aa72 <UART_SetConfig+0x3f6>
 800aa40:	2b04      	cmp	r3, #4
 800aa42:	d00d      	beq.n	800aa60 <UART_SetConfig+0x3e4>
 800aa44:	dc15      	bgt.n	800aa72 <UART_SetConfig+0x3f6>
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <UART_SetConfig+0x3d4>
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d005      	beq.n	800aa5a <UART_SetConfig+0x3de>
 800aa4e:	e010      	b.n	800aa72 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa50:	f7fe f8ee 	bl	8008c30 <HAL_RCC_GetPCLK1Freq>
 800aa54:	0003      	movs	r3, r0
 800aa56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa58:	e014      	b.n	800aa84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa5a:	4b66      	ldr	r3, [pc, #408]	; (800abf4 <UART_SetConfig+0x578>)
 800aa5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa5e:	e011      	b.n	800aa84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa60:	f7fe f85a 	bl	8008b18 <HAL_RCC_GetSysClockFreq>
 800aa64:	0003      	movs	r3, r0
 800aa66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa68:	e00c      	b.n	800aa84 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa6a:	2380      	movs	r3, #128	; 0x80
 800aa6c:	021b      	lsls	r3, r3, #8
 800aa6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa70:	e008      	b.n	800aa84 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800aa76:	231a      	movs	r3, #26
 800aa78:	2220      	movs	r2, #32
 800aa7a:	189b      	adds	r3, r3, r2
 800aa7c:	19db      	adds	r3, r3, r7
 800aa7e:	2201      	movs	r2, #1
 800aa80:	701a      	strb	r2, [r3, #0]
        break;
 800aa82:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d100      	bne.n	800aa8c <UART_SetConfig+0x410>
 800aa8a:	e09a      	b.n	800abc2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa90:	4b57      	ldr	r3, [pc, #348]	; (800abf0 <UART_SetConfig+0x574>)
 800aa92:	0052      	lsls	r2, r2, #1
 800aa94:	5ad3      	ldrh	r3, [r2, r3]
 800aa96:	0019      	movs	r1, r3
 800aa98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aa9a:	f7f5 fb3f 	bl	800011c <__udivsi3>
 800aa9e:	0003      	movs	r3, r0
 800aaa0:	005a      	lsls	r2, r3, #1
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	085b      	lsrs	r3, r3, #1
 800aaa8:	18d2      	adds	r2, r2, r3
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	0019      	movs	r1, r3
 800aab0:	0010      	movs	r0, r2
 800aab2:	f7f5 fb33 	bl	800011c <__udivsi3>
 800aab6:	0003      	movs	r3, r0
 800aab8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	2b0f      	cmp	r3, #15
 800aabe:	d921      	bls.n	800ab04 <UART_SetConfig+0x488>
 800aac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac2:	2380      	movs	r3, #128	; 0x80
 800aac4:	025b      	lsls	r3, r3, #9
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d21c      	bcs.n	800ab04 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	b29a      	uxth	r2, r3
 800aace:	200e      	movs	r0, #14
 800aad0:	2420      	movs	r4, #32
 800aad2:	1903      	adds	r3, r0, r4
 800aad4:	19db      	adds	r3, r3, r7
 800aad6:	210f      	movs	r1, #15
 800aad8:	438a      	bics	r2, r1
 800aada:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	085b      	lsrs	r3, r3, #1
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	2207      	movs	r2, #7
 800aae4:	4013      	ands	r3, r2
 800aae6:	b299      	uxth	r1, r3
 800aae8:	1903      	adds	r3, r0, r4
 800aaea:	19db      	adds	r3, r3, r7
 800aaec:	1902      	adds	r2, r0, r4
 800aaee:	19d2      	adds	r2, r2, r7
 800aaf0:	8812      	ldrh	r2, [r2, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	1902      	adds	r2, r0, r4
 800aafc:	19d2      	adds	r2, r2, r7
 800aafe:	8812      	ldrh	r2, [r2, #0]
 800ab00:	60da      	str	r2, [r3, #12]
 800ab02:	e05e      	b.n	800abc2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800ab04:	231a      	movs	r3, #26
 800ab06:	2220      	movs	r2, #32
 800ab08:	189b      	adds	r3, r3, r2
 800ab0a:	19db      	adds	r3, r3, r7
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	701a      	strb	r2, [r3, #0]
 800ab10:	e057      	b.n	800abc2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab12:	231b      	movs	r3, #27
 800ab14:	2220      	movs	r2, #32
 800ab16:	189b      	adds	r3, r3, r2
 800ab18:	19db      	adds	r3, r3, r7
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b08      	cmp	r3, #8
 800ab1e:	d015      	beq.n	800ab4c <UART_SetConfig+0x4d0>
 800ab20:	dc18      	bgt.n	800ab54 <UART_SetConfig+0x4d8>
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	d00d      	beq.n	800ab42 <UART_SetConfig+0x4c6>
 800ab26:	dc15      	bgt.n	800ab54 <UART_SetConfig+0x4d8>
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <UART_SetConfig+0x4b6>
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d005      	beq.n	800ab3c <UART_SetConfig+0x4c0>
 800ab30:	e010      	b.n	800ab54 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab32:	f7fe f87d 	bl	8008c30 <HAL_RCC_GetPCLK1Freq>
 800ab36:	0003      	movs	r3, r0
 800ab38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab3a:	e014      	b.n	800ab66 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab3c:	4b2d      	ldr	r3, [pc, #180]	; (800abf4 <UART_SetConfig+0x578>)
 800ab3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab40:	e011      	b.n	800ab66 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab42:	f7fd ffe9 	bl	8008b18 <HAL_RCC_GetSysClockFreq>
 800ab46:	0003      	movs	r3, r0
 800ab48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab4a:	e00c      	b.n	800ab66 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab4c:	2380      	movs	r3, #128	; 0x80
 800ab4e:	021b      	lsls	r3, r3, #8
 800ab50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab52:	e008      	b.n	800ab66 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800ab54:	2300      	movs	r3, #0
 800ab56:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800ab58:	231a      	movs	r3, #26
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	189b      	adds	r3, r3, r2
 800ab5e:	19db      	adds	r3, r3, r7
 800ab60:	2201      	movs	r2, #1
 800ab62:	701a      	strb	r2, [r3, #0]
        break;
 800ab64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ab66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d02a      	beq.n	800abc2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab70:	4b1f      	ldr	r3, [pc, #124]	; (800abf0 <UART_SetConfig+0x574>)
 800ab72:	0052      	lsls	r2, r2, #1
 800ab74:	5ad3      	ldrh	r3, [r2, r3]
 800ab76:	0019      	movs	r1, r3
 800ab78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab7a:	f7f5 facf 	bl	800011c <__udivsi3>
 800ab7e:	0003      	movs	r3, r0
 800ab80:	001a      	movs	r2, r3
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	085b      	lsrs	r3, r3, #1
 800ab88:	18d2      	adds	r2, r2, r3
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	0019      	movs	r1, r3
 800ab90:	0010      	movs	r0, r2
 800ab92:	f7f5 fac3 	bl	800011c <__udivsi3>
 800ab96:	0003      	movs	r3, r0
 800ab98:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	2b0f      	cmp	r3, #15
 800ab9e:	d90a      	bls.n	800abb6 <UART_SetConfig+0x53a>
 800aba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aba2:	2380      	movs	r3, #128	; 0x80
 800aba4:	025b      	lsls	r3, r3, #9
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d205      	bcs.n	800abb6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abac:	b29a      	uxth	r2, r3
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	60da      	str	r2, [r3, #12]
 800abb4:	e005      	b.n	800abc2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800abb6:	231a      	movs	r3, #26
 800abb8:	2220      	movs	r2, #32
 800abba:	189b      	adds	r3, r3, r2
 800abbc:	19db      	adds	r3, r3, r7
 800abbe:	2201      	movs	r2, #1
 800abc0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	226a      	movs	r2, #106	; 0x6a
 800abc6:	2101      	movs	r1, #1
 800abc8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	2268      	movs	r2, #104	; 0x68
 800abce:	2101      	movs	r1, #1
 800abd0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	2200      	movs	r2, #0
 800abd6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	2200      	movs	r2, #0
 800abdc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800abde:	231a      	movs	r3, #26
 800abe0:	2220      	movs	r2, #32
 800abe2:	189b      	adds	r3, r3, r2
 800abe4:	19db      	adds	r3, r3, r7
 800abe6:	781b      	ldrb	r3, [r3, #0]
}
 800abe8:	0018      	movs	r0, r3
 800abea:	46bd      	mov	sp, r7
 800abec:	b010      	add	sp, #64	; 0x40
 800abee:	bdb0      	pop	{r4, r5, r7, pc}
 800abf0:	0800cf74 	.word	0x0800cf74
 800abf4:	00f42400 	.word	0x00f42400

0800abf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac04:	2201      	movs	r2, #1
 800ac06:	4013      	ands	r3, r2
 800ac08:	d00b      	beq.n	800ac22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	4a4a      	ldr	r2, [pc, #296]	; (800ad3c <UART_AdvFeatureConfig+0x144>)
 800ac12:	4013      	ands	r3, r2
 800ac14:	0019      	movs	r1, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac26:	2202      	movs	r2, #2
 800ac28:	4013      	ands	r3, r2
 800ac2a:	d00b      	beq.n	800ac44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	4a43      	ldr	r2, [pc, #268]	; (800ad40 <UART_AdvFeatureConfig+0x148>)
 800ac34:	4013      	ands	r3, r2
 800ac36:	0019      	movs	r1, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	430a      	orrs	r2, r1
 800ac42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac48:	2204      	movs	r2, #4
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	d00b      	beq.n	800ac66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	4a3b      	ldr	r2, [pc, #236]	; (800ad44 <UART_AdvFeatureConfig+0x14c>)
 800ac56:	4013      	ands	r3, r2
 800ac58:	0019      	movs	r1, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	430a      	orrs	r2, r1
 800ac64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6a:	2208      	movs	r2, #8
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	d00b      	beq.n	800ac88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	4a34      	ldr	r2, [pc, #208]	; (800ad48 <UART_AdvFeatureConfig+0x150>)
 800ac78:	4013      	ands	r3, r2
 800ac7a:	0019      	movs	r1, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	430a      	orrs	r2, r1
 800ac86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8c:	2210      	movs	r2, #16
 800ac8e:	4013      	ands	r3, r2
 800ac90:	d00b      	beq.n	800acaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	4a2c      	ldr	r2, [pc, #176]	; (800ad4c <UART_AdvFeatureConfig+0x154>)
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	0019      	movs	r1, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acae:	2220      	movs	r2, #32
 800acb0:	4013      	ands	r3, r2
 800acb2:	d00b      	beq.n	800accc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	4a25      	ldr	r2, [pc, #148]	; (800ad50 <UART_AdvFeatureConfig+0x158>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	0019      	movs	r1, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd0:	2240      	movs	r2, #64	; 0x40
 800acd2:	4013      	ands	r3, r2
 800acd4:	d01d      	beq.n	800ad12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	4a1d      	ldr	r2, [pc, #116]	; (800ad54 <UART_AdvFeatureConfig+0x15c>)
 800acde:	4013      	ands	r3, r2
 800ace0:	0019      	movs	r1, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acf2:	2380      	movs	r3, #128	; 0x80
 800acf4:	035b      	lsls	r3, r3, #13
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d10b      	bne.n	800ad12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4a15      	ldr	r2, [pc, #84]	; (800ad58 <UART_AdvFeatureConfig+0x160>)
 800ad02:	4013      	ands	r3, r2
 800ad04:	0019      	movs	r1, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad16:	2280      	movs	r2, #128	; 0x80
 800ad18:	4013      	ands	r3, r2
 800ad1a:	d00b      	beq.n	800ad34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	4a0e      	ldr	r2, [pc, #56]	; (800ad5c <UART_AdvFeatureConfig+0x164>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	0019      	movs	r1, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	605a      	str	r2, [r3, #4]
  }
}
 800ad34:	46c0      	nop			; (mov r8, r8)
 800ad36:	46bd      	mov	sp, r7
 800ad38:	b002      	add	sp, #8
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	fffdffff 	.word	0xfffdffff
 800ad40:	fffeffff 	.word	0xfffeffff
 800ad44:	fffbffff 	.word	0xfffbffff
 800ad48:	ffff7fff 	.word	0xffff7fff
 800ad4c:	ffffefff 	.word	0xffffefff
 800ad50:	ffffdfff 	.word	0xffffdfff
 800ad54:	ffefffff 	.word	0xffefffff
 800ad58:	ff9fffff 	.word	0xff9fffff
 800ad5c:	fff7ffff 	.word	0xfff7ffff

0800ad60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2290      	movs	r2, #144	; 0x90
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad70:	f7fa f986 	bl	8005080 <HAL_GetTick>
 800ad74:	0003      	movs	r3, r0
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2208      	movs	r2, #8
 800ad80:	4013      	ands	r3, r2
 800ad82:	2b08      	cmp	r3, #8
 800ad84:	d10c      	bne.n	800ada0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2280      	movs	r2, #128	; 0x80
 800ad8a:	0391      	lsls	r1, r2, #14
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	4a1a      	ldr	r2, [pc, #104]	; (800adf8 <UART_CheckIdleState+0x98>)
 800ad90:	9200      	str	r2, [sp, #0]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f000 f832 	bl	800adfc <UART_WaitOnFlagUntilTimeout>
 800ad98:	1e03      	subs	r3, r0, #0
 800ad9a:	d001      	beq.n	800ada0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	e026      	b.n	800adee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2204      	movs	r2, #4
 800ada8:	4013      	ands	r3, r2
 800adaa:	2b04      	cmp	r3, #4
 800adac:	d10c      	bne.n	800adc8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2280      	movs	r2, #128	; 0x80
 800adb2:	03d1      	lsls	r1, r2, #15
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	4a10      	ldr	r2, [pc, #64]	; (800adf8 <UART_CheckIdleState+0x98>)
 800adb8:	9200      	str	r2, [sp, #0]
 800adba:	2200      	movs	r2, #0
 800adbc:	f000 f81e 	bl	800adfc <UART_WaitOnFlagUntilTimeout>
 800adc0:	1e03      	subs	r3, r0, #0
 800adc2:	d001      	beq.n	800adc8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e012      	b.n	800adee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2288      	movs	r2, #136	; 0x88
 800adcc:	2120      	movs	r1, #32
 800adce:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	228c      	movs	r2, #140	; 0x8c
 800add4:	2120      	movs	r1, #32
 800add6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2284      	movs	r2, #132	; 0x84
 800ade8:	2100      	movs	r1, #0
 800adea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	0018      	movs	r0, r3
 800adf0:	46bd      	mov	sp, r7
 800adf2:	b004      	add	sp, #16
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	46c0      	nop			; (mov r8, r8)
 800adf8:	01ffffff 	.word	0x01ffffff

0800adfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b094      	sub	sp, #80	; 0x50
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	603b      	str	r3, [r7, #0]
 800ae08:	1dfb      	adds	r3, r7, #7
 800ae0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae0c:	e0a7      	b.n	800af5e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae10:	3301      	adds	r3, #1
 800ae12:	d100      	bne.n	800ae16 <UART_WaitOnFlagUntilTimeout+0x1a>
 800ae14:	e0a3      	b.n	800af5e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae16:	f7fa f933 	bl	8005080 <HAL_GetTick>
 800ae1a:	0002      	movs	r2, r0
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d302      	bcc.n	800ae2c <UART_WaitOnFlagUntilTimeout+0x30>
 800ae26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d13f      	bne.n	800aeac <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ae30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae34:	647b      	str	r3, [r7, #68]	; 0x44
 800ae36:	2301      	movs	r3, #1
 800ae38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	f383 8810 	msr	PRIMASK, r3
}
 800ae40:	46c0      	nop			; (mov r8, r8)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	494e      	ldr	r1, [pc, #312]	; (800af88 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800ae4e:	400a      	ands	r2, r1
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae54:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	f383 8810 	msr	PRIMASK, r3
}
 800ae5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae5e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae62:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800ae64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae66:	643b      	str	r3, [r7, #64]	; 0x40
 800ae68:	2301      	movs	r3, #1
 800ae6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6e:	f383 8810 	msr	PRIMASK, r3
}
 800ae72:	46c0      	nop			; (mov r8, r8)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689a      	ldr	r2, [r3, #8]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2101      	movs	r1, #1
 800ae80:	438a      	bics	r2, r1
 800ae82:	609a      	str	r2, [r3, #8]
 800ae84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8a:	f383 8810 	msr	PRIMASK, r3
}
 800ae8e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2288      	movs	r2, #136	; 0x88
 800ae94:	2120      	movs	r1, #32
 800ae96:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	228c      	movs	r2, #140	; 0x8c
 800ae9c:	2120      	movs	r1, #32
 800ae9e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2284      	movs	r2, #132	; 0x84
 800aea4:	2100      	movs	r1, #0
 800aea6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e069      	b.n	800af80 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2204      	movs	r2, #4
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	d052      	beq.n	800af5e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	69da      	ldr	r2, [r3, #28]
 800aebe:	2380      	movs	r3, #128	; 0x80
 800aec0:	011b      	lsls	r3, r3, #4
 800aec2:	401a      	ands	r2, r3
 800aec4:	2380      	movs	r3, #128	; 0x80
 800aec6:	011b      	lsls	r3, r3, #4
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d148      	bne.n	800af5e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2280      	movs	r2, #128	; 0x80
 800aed2:	0112      	lsls	r2, r2, #4
 800aed4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aed6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeda:	613b      	str	r3, [r7, #16]
  return(result);
 800aedc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aede:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aee0:	2301      	movs	r3, #1
 800aee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	f383 8810 	msr	PRIMASK, r3
}
 800aeea:	46c0      	nop			; (mov r8, r8)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4924      	ldr	r1, [pc, #144]	; (800af88 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800aef8:	400a      	ands	r2, r1
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aefe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	f383 8810 	msr	PRIMASK, r3
}
 800af06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af08:	f3ef 8310 	mrs	r3, PRIMASK
 800af0c:	61fb      	str	r3, [r7, #28]
  return(result);
 800af0e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af10:	64bb      	str	r3, [r7, #72]	; 0x48
 800af12:	2301      	movs	r3, #1
 800af14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	f383 8810 	msr	PRIMASK, r3
}
 800af1c:	46c0      	nop			; (mov r8, r8)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	689a      	ldr	r2, [r3, #8]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2101      	movs	r1, #1
 800af2a:	438a      	bics	r2, r1
 800af2c:	609a      	str	r2, [r3, #8]
 800af2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	f383 8810 	msr	PRIMASK, r3
}
 800af38:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2288      	movs	r2, #136	; 0x88
 800af3e:	2120      	movs	r1, #32
 800af40:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	228c      	movs	r2, #140	; 0x8c
 800af46:	2120      	movs	r1, #32
 800af48:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2290      	movs	r2, #144	; 0x90
 800af4e:	2120      	movs	r1, #32
 800af50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2284      	movs	r2, #132	; 0x84
 800af56:	2100      	movs	r1, #0
 800af58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e010      	b.n	800af80 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	69db      	ldr	r3, [r3, #28]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	4013      	ands	r3, r2
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	425a      	negs	r2, r3
 800af6e:	4153      	adcs	r3, r2
 800af70:	b2db      	uxtb	r3, r3
 800af72:	001a      	movs	r2, r3
 800af74:	1dfb      	adds	r3, r7, #7
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d100      	bne.n	800af7e <UART_WaitOnFlagUntilTimeout+0x182>
 800af7c:	e747      	b.n	800ae0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	0018      	movs	r0, r3
 800af82:	46bd      	mov	sp, r7
 800af84:	b014      	add	sp, #80	; 0x50
 800af86:	bd80      	pop	{r7, pc}
 800af88:	fffffe5f 	.word	0xfffffe5f

0800af8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b098      	sub	sp, #96	; 0x60
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	1dbb      	adds	r3, r7, #6
 800af98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	1dba      	adds	r2, r7, #6
 800afa4:	215c      	movs	r1, #92	; 0x5c
 800afa6:	8812      	ldrh	r2, [r2, #0]
 800afa8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	1dba      	adds	r2, r7, #6
 800afae:	215e      	movs	r1, #94	; 0x5e
 800afb0:	8812      	ldrh	r2, [r2, #0]
 800afb2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689a      	ldr	r2, [r3, #8]
 800afbe:	2380      	movs	r3, #128	; 0x80
 800afc0:	015b      	lsls	r3, r3, #5
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d10d      	bne.n	800afe2 <UART_Start_Receive_IT+0x56>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d104      	bne.n	800afd8 <UART_Start_Receive_IT+0x4c>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2260      	movs	r2, #96	; 0x60
 800afd2:	497b      	ldr	r1, [pc, #492]	; (800b1c0 <UART_Start_Receive_IT+0x234>)
 800afd4:	5299      	strh	r1, [r3, r2]
 800afd6:	e02e      	b.n	800b036 <UART_Start_Receive_IT+0xaa>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2260      	movs	r2, #96	; 0x60
 800afdc:	21ff      	movs	r1, #255	; 0xff
 800afde:	5299      	strh	r1, [r3, r2]
 800afe0:	e029      	b.n	800b036 <UART_Start_Receive_IT+0xaa>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10d      	bne.n	800b006 <UART_Start_Receive_IT+0x7a>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d104      	bne.n	800affc <UART_Start_Receive_IT+0x70>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2260      	movs	r2, #96	; 0x60
 800aff6:	21ff      	movs	r1, #255	; 0xff
 800aff8:	5299      	strh	r1, [r3, r2]
 800affa:	e01c      	b.n	800b036 <UART_Start_Receive_IT+0xaa>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2260      	movs	r2, #96	; 0x60
 800b000:	217f      	movs	r1, #127	; 0x7f
 800b002:	5299      	strh	r1, [r3, r2]
 800b004:	e017      	b.n	800b036 <UART_Start_Receive_IT+0xaa>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	2380      	movs	r3, #128	; 0x80
 800b00c:	055b      	lsls	r3, r3, #21
 800b00e:	429a      	cmp	r2, r3
 800b010:	d10d      	bne.n	800b02e <UART_Start_Receive_IT+0xa2>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d104      	bne.n	800b024 <UART_Start_Receive_IT+0x98>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2260      	movs	r2, #96	; 0x60
 800b01e:	217f      	movs	r1, #127	; 0x7f
 800b020:	5299      	strh	r1, [r3, r2]
 800b022:	e008      	b.n	800b036 <UART_Start_Receive_IT+0xaa>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2260      	movs	r2, #96	; 0x60
 800b028:	213f      	movs	r1, #63	; 0x3f
 800b02a:	5299      	strh	r1, [r3, r2]
 800b02c:	e003      	b.n	800b036 <UART_Start_Receive_IT+0xaa>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2260      	movs	r2, #96	; 0x60
 800b032:	2100      	movs	r1, #0
 800b034:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2290      	movs	r2, #144	; 0x90
 800b03a:	2100      	movs	r1, #0
 800b03c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	228c      	movs	r2, #140	; 0x8c
 800b042:	2122      	movs	r1, #34	; 0x22
 800b044:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b046:	f3ef 8310 	mrs	r3, PRIMASK
 800b04a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800b04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b04e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b050:	2301      	movs	r3, #1
 800b052:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b056:	f383 8810 	msr	PRIMASK, r3
}
 800b05a:	46c0      	nop			; (mov r8, r8)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	689a      	ldr	r2, [r3, #8]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2101      	movs	r1, #1
 800b068:	430a      	orrs	r2, r1
 800b06a:	609a      	str	r2, [r3, #8]
 800b06c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b06e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b072:	f383 8810 	msr	PRIMASK, r3
}
 800b076:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b07c:	2380      	movs	r3, #128	; 0x80
 800b07e:	059b      	lsls	r3, r3, #22
 800b080:	429a      	cmp	r2, r3
 800b082:	d150      	bne.n	800b126 <UART_Start_Receive_IT+0x19a>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2268      	movs	r2, #104	; 0x68
 800b088:	5a9b      	ldrh	r3, [r3, r2]
 800b08a:	1dba      	adds	r2, r7, #6
 800b08c:	8812      	ldrh	r2, [r2, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d349      	bcc.n	800b126 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	2380      	movs	r3, #128	; 0x80
 800b098:	015b      	lsls	r3, r3, #5
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d107      	bne.n	800b0ae <UART_Start_Receive_IT+0x122>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d103      	bne.n	800b0ae <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	4a46      	ldr	r2, [pc, #280]	; (800b1c4 <UART_Start_Receive_IT+0x238>)
 800b0aa:	675a      	str	r2, [r3, #116]	; 0x74
 800b0ac:	e002      	b.n	800b0b4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	4a45      	ldr	r2, [pc, #276]	; (800b1c8 <UART_Start_Receive_IT+0x23c>)
 800b0b2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d019      	beq.n	800b0f0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b0c0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800b0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	f383 8810 	msr	PRIMASK, r3
}
 800b0d0:	46c0      	nop			; (mov r8, r8)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2180      	movs	r1, #128	; 0x80
 800b0de:	0049      	lsls	r1, r1, #1
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ea:	f383 8810 	msr	PRIMASK, r3
}
 800b0ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800b0f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0f8:	657b      	str	r3, [r7, #84]	; 0x54
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b100:	f383 8810 	msr	PRIMASK, r3
}
 800b104:	46c0      	nop			; (mov r8, r8)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	689a      	ldr	r2, [r3, #8]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2180      	movs	r1, #128	; 0x80
 800b112:	0549      	lsls	r1, r1, #21
 800b114:	430a      	orrs	r2, r1
 800b116:	609a      	str	r2, [r3, #8]
 800b118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b11a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	f383 8810 	msr	PRIMASK, r3
}
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	e047      	b.n	800b1b6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	689a      	ldr	r2, [r3, #8]
 800b12a:	2380      	movs	r3, #128	; 0x80
 800b12c:	015b      	lsls	r3, r3, #5
 800b12e:	429a      	cmp	r2, r3
 800b130:	d107      	bne.n	800b142 <UART_Start_Receive_IT+0x1b6>
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d103      	bne.n	800b142 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	4a23      	ldr	r2, [pc, #140]	; (800b1cc <UART_Start_Receive_IT+0x240>)
 800b13e:	675a      	str	r2, [r3, #116]	; 0x74
 800b140:	e002      	b.n	800b148 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	4a22      	ldr	r2, [pc, #136]	; (800b1d0 <UART_Start_Receive_IT+0x244>)
 800b146:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d019      	beq.n	800b184 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b150:	f3ef 8310 	mrs	r3, PRIMASK
 800b154:	61fb      	str	r3, [r7, #28]
  return(result);
 800b156:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b15a:	2301      	movs	r3, #1
 800b15c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	f383 8810 	msr	PRIMASK, r3
}
 800b164:	46c0      	nop			; (mov r8, r8)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2190      	movs	r1, #144	; 0x90
 800b172:	0049      	lsls	r1, r1, #1
 800b174:	430a      	orrs	r2, r1
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	f383 8810 	msr	PRIMASK, r3
}
 800b182:	e018      	b.n	800b1b6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b184:	f3ef 8310 	mrs	r3, PRIMASK
 800b188:	613b      	str	r3, [r7, #16]
  return(result);
 800b18a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b18c:	653b      	str	r3, [r7, #80]	; 0x50
 800b18e:	2301      	movs	r3, #1
 800b190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f383 8810 	msr	PRIMASK, r3
}
 800b198:	46c0      	nop			; (mov r8, r8)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2120      	movs	r1, #32
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	f383 8810 	msr	PRIMASK, r3
}
 800b1b4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	b018      	add	sp, #96	; 0x60
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	000001ff 	.word	0x000001ff
 800b1c4:	0800bab9 	.word	0x0800bab9
 800b1c8:	0800b7cd 	.word	0x0800b7cd
 800b1cc:	0800b659 	.word	0x0800b659
 800b1d0:	0800b4e5 	.word	0x0800b4e5

0800b1d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08a      	sub	sp, #40	; 0x28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b1e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b1e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f383 8810 	msr	PRIMASK, r3
}
 800b1f0:	46c0      	nop			; (mov r8, r8)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	21c0      	movs	r1, #192	; 0xc0
 800b1fe:	438a      	bics	r2, r1
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	f383 8810 	msr	PRIMASK, r3
}
 800b20c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b20e:	f3ef 8310 	mrs	r3, PRIMASK
 800b212:	617b      	str	r3, [r7, #20]
  return(result);
 800b214:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b216:	623b      	str	r3, [r7, #32]
 800b218:	2301      	movs	r3, #1
 800b21a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	f383 8810 	msr	PRIMASK, r3
}
 800b222:	46c0      	nop			; (mov r8, r8)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	689a      	ldr	r2, [r3, #8]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4908      	ldr	r1, [pc, #32]	; (800b250 <UART_EndTxTransfer+0x7c>)
 800b230:	400a      	ands	r2, r1
 800b232:	609a      	str	r2, [r3, #8]
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	f383 8810 	msr	PRIMASK, r3
}
 800b23e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2288      	movs	r2, #136	; 0x88
 800b244:	2120      	movs	r1, #32
 800b246:	5099      	str	r1, [r3, r2]
}
 800b248:	46c0      	nop			; (mov r8, r8)
 800b24a:	46bd      	mov	sp, r7
 800b24c:	b00a      	add	sp, #40	; 0x28
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	ff7fffff 	.word	0xff7fffff

0800b254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b08e      	sub	sp, #56	; 0x38
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b25c:	f3ef 8310 	mrs	r3, PRIMASK
 800b260:	617b      	str	r3, [r7, #20]
  return(result);
 800b262:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b264:	637b      	str	r3, [r7, #52]	; 0x34
 800b266:	2301      	movs	r3, #1
 800b268:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	f383 8810 	msr	PRIMASK, r3
}
 800b270:	46c0      	nop			; (mov r8, r8)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4926      	ldr	r1, [pc, #152]	; (800b318 <UART_EndRxTransfer+0xc4>)
 800b27e:	400a      	ands	r2, r1
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b284:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	f383 8810 	msr	PRIMASK, r3
}
 800b28c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b28e:	f3ef 8310 	mrs	r3, PRIMASK
 800b292:	623b      	str	r3, [r7, #32]
  return(result);
 800b294:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b296:	633b      	str	r3, [r7, #48]	; 0x30
 800b298:	2301      	movs	r3, #1
 800b29a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	f383 8810 	msr	PRIMASK, r3
}
 800b2a2:	46c0      	nop			; (mov r8, r8)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	491b      	ldr	r1, [pc, #108]	; (800b31c <UART_EndRxTransfer+0xc8>)
 800b2b0:	400a      	ands	r2, r1
 800b2b2:	609a      	str	r2, [r3, #8]
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	f383 8810 	msr	PRIMASK, r3
}
 800b2be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d118      	bne.n	800b2fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f383 8810 	msr	PRIMASK, r3
}
 800b2dc:	46c0      	nop			; (mov r8, r8)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2110      	movs	r1, #16
 800b2ea:	438a      	bics	r2, r1
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f383 8810 	msr	PRIMASK, r3
}
 800b2f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	228c      	movs	r2, #140	; 0x8c
 800b2fe:	2120      	movs	r1, #32
 800b300:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b30e:	46c0      	nop			; (mov r8, r8)
 800b310:	46bd      	mov	sp, r7
 800b312:	b00e      	add	sp, #56	; 0x38
 800b314:	bd80      	pop	{r7, pc}
 800b316:	46c0      	nop			; (mov r8, r8)
 800b318:	fffffedf 	.word	0xfffffedf
 800b31c:	effffffe 	.word	0xeffffffe

0800b320 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b08c      	sub	sp, #48	; 0x30
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2220      	movs	r2, #32
 800b336:	4013      	ands	r3, r2
 800b338:	d135      	bne.n	800b3a6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	2256      	movs	r2, #86	; 0x56
 800b33e:	2100      	movs	r1, #0
 800b340:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b342:	f3ef 8310 	mrs	r3, PRIMASK
 800b346:	60fb      	str	r3, [r7, #12]
  return(result);
 800b348:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b34a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b34c:	2301      	movs	r3, #1
 800b34e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	f383 8810 	msr	PRIMASK, r3
}
 800b356:	46c0      	nop			; (mov r8, r8)
 800b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2180      	movs	r1, #128	; 0x80
 800b364:	438a      	bics	r2, r1
 800b366:	609a      	str	r2, [r3, #8]
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f383 8810 	msr	PRIMASK, r3
}
 800b372:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b374:	f3ef 8310 	mrs	r3, PRIMASK
 800b378:	61bb      	str	r3, [r7, #24]
  return(result);
 800b37a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
 800b37e:	2301      	movs	r3, #1
 800b380:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	f383 8810 	msr	PRIMASK, r3
}
 800b388:	46c0      	nop			; (mov r8, r8)
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2140      	movs	r1, #64	; 0x40
 800b396:	430a      	orrs	r2, r1
 800b398:	601a      	str	r2, [r3, #0]
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	f383 8810 	msr	PRIMASK, r3
}
 800b3a4:	e004      	b.n	800b3b0 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a8:	0018      	movs	r0, r3
 800b3aa:	f7ff f943 	bl	800a634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3ae:	46c0      	nop			; (mov r8, r8)
 800b3b0:	46c0      	nop			; (mov r8, r8)
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	b00c      	add	sp, #48	; 0x30
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	0018      	movs	r0, r3
 800b3ca:	f7ff f93b 	bl	800a644 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3ce:	46c0      	nop			; (mov r8, r8)
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	b004      	add	sp, #16
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b086      	sub	sp, #24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	2288      	movs	r2, #136	; 0x88
 800b3e8:	589b      	ldr	r3, [r3, r2]
 800b3ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	228c      	movs	r2, #140	; 0x8c
 800b3f0:	589b      	ldr	r3, [r3, r2]
 800b3f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	2280      	movs	r2, #128	; 0x80
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	2b80      	cmp	r3, #128	; 0x80
 800b400:	d10a      	bne.n	800b418 <UART_DMAError+0x42>
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	2b21      	cmp	r3, #33	; 0x21
 800b406:	d107      	bne.n	800b418 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2256      	movs	r2, #86	; 0x56
 800b40c:	2100      	movs	r1, #0
 800b40e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	0018      	movs	r0, r3
 800b414:	f7ff fede 	bl	800b1d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	2240      	movs	r2, #64	; 0x40
 800b420:	4013      	ands	r3, r2
 800b422:	2b40      	cmp	r3, #64	; 0x40
 800b424:	d10a      	bne.n	800b43c <UART_DMAError+0x66>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b22      	cmp	r3, #34	; 0x22
 800b42a:	d107      	bne.n	800b43c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	225e      	movs	r2, #94	; 0x5e
 800b430:	2100      	movs	r1, #0
 800b432:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	0018      	movs	r0, r3
 800b438:	f7ff ff0c 	bl	800b254 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2290      	movs	r2, #144	; 0x90
 800b440:	589b      	ldr	r3, [r3, r2]
 800b442:	2210      	movs	r2, #16
 800b444:	431a      	orrs	r2, r3
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2190      	movs	r1, #144	; 0x90
 800b44a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	0018      	movs	r0, r3
 800b450:	f7ff f900 	bl	800a654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b454:	46c0      	nop			; (mov r8, r8)
 800b456:	46bd      	mov	sp, r7
 800b458:	b006      	add	sp, #24
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	225e      	movs	r2, #94	; 0x5e
 800b46e:	2100      	movs	r1, #0
 800b470:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2256      	movs	r2, #86	; 0x56
 800b476:	2100      	movs	r1, #0
 800b478:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	0018      	movs	r0, r3
 800b47e:	f7ff f8e9 	bl	800a654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b482:	46c0      	nop			; (mov r8, r8)
 800b484:	46bd      	mov	sp, r7
 800b486:	b004      	add	sp, #16
 800b488:	bd80      	pop	{r7, pc}

0800b48a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b086      	sub	sp, #24
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b492:	f3ef 8310 	mrs	r3, PRIMASK
 800b496:	60bb      	str	r3, [r7, #8]
  return(result);
 800b498:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b49a:	617b      	str	r3, [r7, #20]
 800b49c:	2301      	movs	r3, #1
 800b49e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f383 8810 	msr	PRIMASK, r3
}
 800b4a6:	46c0      	nop			; (mov r8, r8)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2140      	movs	r1, #64	; 0x40
 800b4b4:	438a      	bics	r2, r1
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	f383 8810 	msr	PRIMASK, r3
}
 800b4c2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2288      	movs	r2, #136	; 0x88
 800b4c8:	2120      	movs	r1, #32
 800b4ca:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f7ff f8ad 	bl	800a634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4da:	46c0      	nop			; (mov r8, r8)
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	b006      	add	sp, #24
 800b4e0:	bd80      	pop	{r7, pc}
	...

0800b4e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b090      	sub	sp, #64	; 0x40
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b4ec:	203e      	movs	r0, #62	; 0x3e
 800b4ee:	183b      	adds	r3, r7, r0
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	2160      	movs	r1, #96	; 0x60
 800b4f4:	5a52      	ldrh	r2, [r2, r1]
 800b4f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	228c      	movs	r2, #140	; 0x8c
 800b4fc:	589b      	ldr	r3, [r3, r2]
 800b4fe:	2b22      	cmp	r3, #34	; 0x22
 800b500:	d000      	beq.n	800b504 <UART_RxISR_8BIT+0x20>
 800b502:	e09a      	b.n	800b63a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b50a:	213c      	movs	r1, #60	; 0x3c
 800b50c:	187b      	adds	r3, r7, r1
 800b50e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b510:	187b      	adds	r3, r7, r1
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b2da      	uxtb	r2, r3
 800b516:	183b      	adds	r3, r7, r0
 800b518:	881b      	ldrh	r3, [r3, #0]
 800b51a:	b2d9      	uxtb	r1, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b520:	400a      	ands	r2, r1
 800b522:	b2d2      	uxtb	r2, r2
 800b524:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52a:	1c5a      	adds	r2, r3, #1
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	225e      	movs	r2, #94	; 0x5e
 800b534:	5a9b      	ldrh	r3, [r3, r2]
 800b536:	b29b      	uxth	r3, r3
 800b538:	3b01      	subs	r3, #1
 800b53a:	b299      	uxth	r1, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	225e      	movs	r2, #94	; 0x5e
 800b540:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	225e      	movs	r2, #94	; 0x5e
 800b546:	5a9b      	ldrh	r3, [r3, r2]
 800b548:	b29b      	uxth	r3, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d000      	beq.n	800b550 <UART_RxISR_8BIT+0x6c>
 800b54e:	e07c      	b.n	800b64a <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b550:	f3ef 8310 	mrs	r3, PRIMASK
 800b554:	61bb      	str	r3, [r7, #24]
  return(result);
 800b556:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b558:	63bb      	str	r3, [r7, #56]	; 0x38
 800b55a:	2301      	movs	r3, #1
 800b55c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	f383 8810 	msr	PRIMASK, r3
}
 800b564:	46c0      	nop			; (mov r8, r8)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4938      	ldr	r1, [pc, #224]	; (800b654 <UART_RxISR_8BIT+0x170>)
 800b572:	400a      	ands	r2, r1
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b578:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	f383 8810 	msr	PRIMASK, r3
}
 800b580:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b582:	f3ef 8310 	mrs	r3, PRIMASK
 800b586:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b58a:	637b      	str	r3, [r7, #52]	; 0x34
 800b58c:	2301      	movs	r3, #1
 800b58e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	f383 8810 	msr	PRIMASK, r3
}
 800b596:	46c0      	nop			; (mov r8, r8)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	689a      	ldr	r2, [r3, #8]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	438a      	bics	r2, r1
 800b5a6:	609a      	str	r2, [r3, #8]
 800b5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ae:	f383 8810 	msr	PRIMASK, r3
}
 800b5b2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	228c      	movs	r2, #140	; 0x8c
 800b5b8:	2120      	movs	r1, #32
 800b5ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d12f      	bne.n	800b630 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5da:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5dc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5de:	633b      	str	r3, [r7, #48]	; 0x30
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f383 8810 	msr	PRIMASK, r3
}
 800b5ea:	46c0      	nop			; (mov r8, r8)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2110      	movs	r1, #16
 800b5f8:	438a      	bics	r2, r1
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	f383 8810 	msr	PRIMASK, r3
}
 800b606:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	2210      	movs	r2, #16
 800b610:	4013      	ands	r3, r2
 800b612:	2b10      	cmp	r3, #16
 800b614:	d103      	bne.n	800b61e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2210      	movs	r2, #16
 800b61c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	225c      	movs	r2, #92	; 0x5c
 800b622:	5a9a      	ldrh	r2, [r3, r2]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	0011      	movs	r1, r2
 800b628:	0018      	movs	r0, r3
 800b62a:	f7ff f81b 	bl	800a664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b62e:	e00c      	b.n	800b64a <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	0018      	movs	r0, r3
 800b634:	f7f9 f81e 	bl	8004674 <HAL_UART_RxCpltCallback>
}
 800b638:	e007      	b.n	800b64a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	699a      	ldr	r2, [r3, #24]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2108      	movs	r1, #8
 800b646:	430a      	orrs	r2, r1
 800b648:	619a      	str	r2, [r3, #24]
}
 800b64a:	46c0      	nop			; (mov r8, r8)
 800b64c:	46bd      	mov	sp, r7
 800b64e:	b010      	add	sp, #64	; 0x40
 800b650:	bd80      	pop	{r7, pc}
 800b652:	46c0      	nop			; (mov r8, r8)
 800b654:	fffffedf 	.word	0xfffffedf

0800b658 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b090      	sub	sp, #64	; 0x40
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b660:	203e      	movs	r0, #62	; 0x3e
 800b662:	183b      	adds	r3, r7, r0
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	2160      	movs	r1, #96	; 0x60
 800b668:	5a52      	ldrh	r2, [r2, r1]
 800b66a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	228c      	movs	r2, #140	; 0x8c
 800b670:	589b      	ldr	r3, [r3, r2]
 800b672:	2b22      	cmp	r3, #34	; 0x22
 800b674:	d000      	beq.n	800b678 <UART_RxISR_16BIT+0x20>
 800b676:	e09a      	b.n	800b7ae <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b67e:	213c      	movs	r1, #60	; 0x3c
 800b680:	187b      	adds	r3, r7, r1
 800b682:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b688:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800b68a:	187b      	adds	r3, r7, r1
 800b68c:	183a      	adds	r2, r7, r0
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	8812      	ldrh	r2, [r2, #0]
 800b692:	4013      	ands	r3, r2
 800b694:	b29a      	uxth	r2, r3
 800b696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b698:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b69e:	1c9a      	adds	r2, r3, #2
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	225e      	movs	r2, #94	; 0x5e
 800b6a8:	5a9b      	ldrh	r3, [r3, r2]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	b299      	uxth	r1, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	225e      	movs	r2, #94	; 0x5e
 800b6b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	225e      	movs	r2, #94	; 0x5e
 800b6ba:	5a9b      	ldrh	r3, [r3, r2]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d000      	beq.n	800b6c4 <UART_RxISR_16BIT+0x6c>
 800b6c2:	e07c      	b.n	800b7be <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b6c8:	617b      	str	r3, [r7, #20]
  return(result);
 800b6ca:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	f383 8810 	msr	PRIMASK, r3
}
 800b6d8:	46c0      	nop			; (mov r8, r8)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4938      	ldr	r1, [pc, #224]	; (800b7c8 <UART_RxISR_16BIT+0x170>)
 800b6e6:	400a      	ands	r2, r1
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	f383 8810 	msr	PRIMASK, r3
}
 800b6f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b6fa:	623b      	str	r3, [r7, #32]
  return(result);
 800b6fc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6fe:	633b      	str	r3, [r7, #48]	; 0x30
 800b700:	2301      	movs	r3, #1
 800b702:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	f383 8810 	msr	PRIMASK, r3
}
 800b70a:	46c0      	nop			; (mov r8, r8)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	689a      	ldr	r2, [r3, #8]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2101      	movs	r1, #1
 800b718:	438a      	bics	r2, r1
 800b71a:	609a      	str	r2, [r3, #8]
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b722:	f383 8810 	msr	PRIMASK, r3
}
 800b726:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	228c      	movs	r2, #140	; 0x8c
 800b72c:	2120      	movs	r1, #32
 800b72e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b740:	2b01      	cmp	r3, #1
 800b742:	d12f      	bne.n	800b7a4 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b74a:	f3ef 8310 	mrs	r3, PRIMASK
 800b74e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b750:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b752:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b754:	2301      	movs	r3, #1
 800b756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f383 8810 	msr	PRIMASK, r3
}
 800b75e:	46c0      	nop			; (mov r8, r8)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2110      	movs	r1, #16
 800b76c:	438a      	bics	r2, r1
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f383 8810 	msr	PRIMASK, r3
}
 800b77a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	69db      	ldr	r3, [r3, #28]
 800b782:	2210      	movs	r2, #16
 800b784:	4013      	ands	r3, r2
 800b786:	2b10      	cmp	r3, #16
 800b788:	d103      	bne.n	800b792 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2210      	movs	r2, #16
 800b790:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	225c      	movs	r2, #92	; 0x5c
 800b796:	5a9a      	ldrh	r2, [r3, r2]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	0011      	movs	r1, r2
 800b79c:	0018      	movs	r0, r3
 800b79e:	f7fe ff61 	bl	800a664 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7a2:	e00c      	b.n	800b7be <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	0018      	movs	r0, r3
 800b7a8:	f7f8 ff64 	bl	8004674 <HAL_UART_RxCpltCallback>
}
 800b7ac:	e007      	b.n	800b7be <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	699a      	ldr	r2, [r3, #24]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2108      	movs	r1, #8
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	619a      	str	r2, [r3, #24]
}
 800b7be:	46c0      	nop			; (mov r8, r8)
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	b010      	add	sp, #64	; 0x40
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	46c0      	nop			; (mov r8, r8)
 800b7c8:	fffffedf 	.word	0xfffffedf

0800b7cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b09c      	sub	sp, #112	; 0x70
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b7d4:	236a      	movs	r3, #106	; 0x6a
 800b7d6:	18fb      	adds	r3, r7, r3
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	2160      	movs	r1, #96	; 0x60
 800b7dc:	5a52      	ldrh	r2, [r2, r1]
 800b7de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	228c      	movs	r2, #140	; 0x8c
 800b7fc:	589b      	ldr	r3, [r3, r2]
 800b7fe:	2b22      	cmp	r3, #34	; 0x22
 800b800:	d000      	beq.n	800b804 <UART_RxISR_8BIT_FIFOEN+0x38>
 800b802:	e144      	b.n	800ba8e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b804:	235e      	movs	r3, #94	; 0x5e
 800b806:	18fb      	adds	r3, r7, r3
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	2168      	movs	r1, #104	; 0x68
 800b80c:	5a52      	ldrh	r2, [r2, r1]
 800b80e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b810:	e0eb      	b.n	800b9ea <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b818:	215c      	movs	r1, #92	; 0x5c
 800b81a:	187b      	adds	r3, r7, r1
 800b81c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b81e:	187b      	adds	r3, r7, r1
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	b2da      	uxtb	r2, r3
 800b824:	236a      	movs	r3, #106	; 0x6a
 800b826:	18fb      	adds	r3, r7, r3
 800b828:	881b      	ldrh	r3, [r3, #0]
 800b82a:	b2d9      	uxtb	r1, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b830:	400a      	ands	r2, r1
 800b832:	b2d2      	uxtb	r2, r2
 800b834:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	225e      	movs	r2, #94	; 0x5e
 800b844:	5a9b      	ldrh	r3, [r3, r2]
 800b846:	b29b      	uxth	r3, r3
 800b848:	3b01      	subs	r3, #1
 800b84a:	b299      	uxth	r1, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	225e      	movs	r2, #94	; 0x5e
 800b850:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b85a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b85c:	2207      	movs	r2, #7
 800b85e:	4013      	ands	r3, r2
 800b860:	d049      	beq.n	800b8f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b864:	2201      	movs	r2, #1
 800b866:	4013      	ands	r3, r2
 800b868:	d010      	beq.n	800b88c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800b86a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b86c:	2380      	movs	r3, #128	; 0x80
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	4013      	ands	r3, r2
 800b872:	d00b      	beq.n	800b88c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2201      	movs	r2, #1
 800b87a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2290      	movs	r2, #144	; 0x90
 800b880:	589b      	ldr	r3, [r3, r2]
 800b882:	2201      	movs	r2, #1
 800b884:	431a      	orrs	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2190      	movs	r1, #144	; 0x90
 800b88a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b88c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b88e:	2202      	movs	r2, #2
 800b890:	4013      	ands	r3, r2
 800b892:	d00f      	beq.n	800b8b4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800b894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b896:	2201      	movs	r2, #1
 800b898:	4013      	ands	r3, r2
 800b89a:	d00b      	beq.n	800b8b4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2290      	movs	r2, #144	; 0x90
 800b8a8:	589b      	ldr	r3, [r3, r2]
 800b8aa:	2204      	movs	r2, #4
 800b8ac:	431a      	orrs	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2190      	movs	r1, #144	; 0x90
 800b8b2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8b6:	2204      	movs	r2, #4
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	d00f      	beq.n	800b8dc <UART_RxISR_8BIT_FIFOEN+0x110>
 800b8bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8be:	2201      	movs	r2, #1
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	d00b      	beq.n	800b8dc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2204      	movs	r2, #4
 800b8ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2290      	movs	r2, #144	; 0x90
 800b8d0:	589b      	ldr	r3, [r3, r2]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	431a      	orrs	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2190      	movs	r1, #144	; 0x90
 800b8da:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2290      	movs	r2, #144	; 0x90
 800b8e0:	589b      	ldr	r3, [r3, r2]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d007      	beq.n	800b8f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	f7fe feb3 	bl	800a654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2290      	movs	r2, #144	; 0x90
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	225e      	movs	r2, #94	; 0x5e
 800b8fa:	5a9b      	ldrh	r3, [r3, r2]
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d173      	bne.n	800b9ea <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b902:	f3ef 8310 	mrs	r3, PRIMASK
 800b906:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b90a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b90c:	2301      	movs	r3, #1
 800b90e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b912:	f383 8810 	msr	PRIMASK, r3
}
 800b916:	46c0      	nop			; (mov r8, r8)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4961      	ldr	r1, [pc, #388]	; (800baa8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800b924:	400a      	ands	r2, r1
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b92a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92e:	f383 8810 	msr	PRIMASK, r3
}
 800b932:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b934:	f3ef 8310 	mrs	r3, PRIMASK
 800b938:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b93c:	657b      	str	r3, [r7, #84]	; 0x54
 800b93e:	2301      	movs	r3, #1
 800b940:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b944:	f383 8810 	msr	PRIMASK, r3
}
 800b948:	46c0      	nop			; (mov r8, r8)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4955      	ldr	r1, [pc, #340]	; (800baac <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800b956:	400a      	ands	r2, r1
 800b958:	609a      	str	r2, [r3, #8]
 800b95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b95c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b960:	f383 8810 	msr	PRIMASK, r3
}
 800b964:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	228c      	movs	r2, #140	; 0x8c
 800b96a:	2120      	movs	r1, #32
 800b96c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d12f      	bne.n	800b9e2 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b988:	f3ef 8310 	mrs	r3, PRIMASK
 800b98c:	623b      	str	r3, [r7, #32]
  return(result);
 800b98e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b990:	653b      	str	r3, [r7, #80]	; 0x50
 800b992:	2301      	movs	r3, #1
 800b994:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	f383 8810 	msr	PRIMASK, r3
}
 800b99c:	46c0      	nop			; (mov r8, r8)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2110      	movs	r1, #16
 800b9aa:	438a      	bics	r2, r1
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b4:	f383 8810 	msr	PRIMASK, r3
}
 800b9b8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	69db      	ldr	r3, [r3, #28]
 800b9c0:	2210      	movs	r2, #16
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	2b10      	cmp	r3, #16
 800b9c6:	d103      	bne.n	800b9d0 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2210      	movs	r2, #16
 800b9ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	225c      	movs	r2, #92	; 0x5c
 800b9d4:	5a9a      	ldrh	r2, [r3, r2]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	0011      	movs	r1, r2
 800b9da:	0018      	movs	r0, r3
 800b9dc:	f7fe fe42 	bl	800a664 <HAL_UARTEx_RxEventCallback>
 800b9e0:	e003      	b.n	800b9ea <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	0018      	movs	r0, r3
 800b9e6:	f7f8 fe45 	bl	8004674 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b9ea:	235e      	movs	r3, #94	; 0x5e
 800b9ec:	18fb      	adds	r3, r7, r3
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d004      	beq.n	800b9fe <UART_RxISR_8BIT_FIFOEN+0x232>
 800b9f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9f6:	2220      	movs	r2, #32
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	d000      	beq.n	800b9fe <UART_RxISR_8BIT_FIFOEN+0x232>
 800b9fc:	e709      	b.n	800b812 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b9fe:	204e      	movs	r0, #78	; 0x4e
 800ba00:	183b      	adds	r3, r7, r0
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	215e      	movs	r1, #94	; 0x5e
 800ba06:	5a52      	ldrh	r2, [r2, r1]
 800ba08:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ba0a:	0001      	movs	r1, r0
 800ba0c:	187b      	adds	r3, r7, r1
 800ba0e:	881b      	ldrh	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d044      	beq.n	800ba9e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2268      	movs	r2, #104	; 0x68
 800ba18:	5a9b      	ldrh	r3, [r3, r2]
 800ba1a:	187a      	adds	r2, r7, r1
 800ba1c:	8812      	ldrh	r2, [r2, #0]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d23d      	bcs.n	800ba9e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba22:	f3ef 8310 	mrs	r3, PRIMASK
 800ba26:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba28:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ba2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f383 8810 	msr	PRIMASK, r3
}
 800ba36:	46c0      	nop			; (mov r8, r8)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689a      	ldr	r2, [r3, #8]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	491b      	ldr	r1, [pc, #108]	; (800bab0 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800ba44:	400a      	ands	r2, r1
 800ba46:	609a      	str	r2, [r3, #8]
 800ba48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	f383 8810 	msr	PRIMASK, r3
}
 800ba52:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4a17      	ldr	r2, [pc, #92]	; (800bab4 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800ba58:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba5e:	617b      	str	r3, [r7, #20]
  return(result);
 800ba60:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba62:	647b      	str	r3, [r7, #68]	; 0x44
 800ba64:	2301      	movs	r3, #1
 800ba66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	f383 8810 	msr	PRIMASK, r3
}
 800ba6e:	46c0      	nop			; (mov r8, r8)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2120      	movs	r1, #32
 800ba7c:	430a      	orrs	r2, r1
 800ba7e:	601a      	str	r2, [r3, #0]
 800ba80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	f383 8810 	msr	PRIMASK, r3
}
 800ba8a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba8c:	e007      	b.n	800ba9e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	699a      	ldr	r2, [r3, #24]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2108      	movs	r1, #8
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	619a      	str	r2, [r3, #24]
}
 800ba9e:	46c0      	nop			; (mov r8, r8)
 800baa0:	46bd      	mov	sp, r7
 800baa2:	b01c      	add	sp, #112	; 0x70
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	fffffeff 	.word	0xfffffeff
 800baac:	effffffe 	.word	0xeffffffe
 800bab0:	efffffff 	.word	0xefffffff
 800bab4:	0800b4e5 	.word	0x0800b4e5

0800bab8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b09e      	sub	sp, #120	; 0x78
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bac0:	2372      	movs	r3, #114	; 0x72
 800bac2:	18fb      	adds	r3, r7, r3
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	2160      	movs	r1, #96	; 0x60
 800bac8:	5a52      	ldrh	r2, [r2, r1]
 800baca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	69db      	ldr	r3, [r3, #28]
 800bad2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	228c      	movs	r2, #140	; 0x8c
 800bae8:	589b      	ldr	r3, [r3, r2]
 800baea:	2b22      	cmp	r3, #34	; 0x22
 800baec:	d000      	beq.n	800baf0 <UART_RxISR_16BIT_FIFOEN+0x38>
 800baee:	e144      	b.n	800bd7a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800baf0:	2366      	movs	r3, #102	; 0x66
 800baf2:	18fb      	adds	r3, r7, r3
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	2168      	movs	r1, #104	; 0x68
 800baf8:	5a52      	ldrh	r2, [r2, r1]
 800bafa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bafc:	e0eb      	b.n	800bcd6 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb04:	2164      	movs	r1, #100	; 0x64
 800bb06:	187b      	adds	r3, r7, r1
 800bb08:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800bb10:	187b      	adds	r3, r7, r1
 800bb12:	2272      	movs	r2, #114	; 0x72
 800bb14:	18ba      	adds	r2, r7, r2
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	8812      	ldrh	r2, [r2, #0]
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb26:	1c9a      	adds	r2, r3, #2
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	225e      	movs	r2, #94	; 0x5e
 800bb30:	5a9b      	ldrh	r3, [r3, r2]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	3b01      	subs	r3, #1
 800bb36:	b299      	uxth	r1, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	225e      	movs	r2, #94	; 0x5e
 800bb3c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	69db      	ldr	r3, [r3, #28]
 800bb44:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bb46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb48:	2207      	movs	r2, #7
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	d049      	beq.n	800bbe2 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb50:	2201      	movs	r2, #1
 800bb52:	4013      	ands	r3, r2
 800bb54:	d010      	beq.n	800bb78 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800bb56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb58:	2380      	movs	r3, #128	; 0x80
 800bb5a:	005b      	lsls	r3, r3, #1
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	d00b      	beq.n	800bb78 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2201      	movs	r2, #1
 800bb66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2290      	movs	r2, #144	; 0x90
 800bb6c:	589b      	ldr	r3, [r3, r2]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	431a      	orrs	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2190      	movs	r1, #144	; 0x90
 800bb76:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	d00f      	beq.n	800bba0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800bb80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb82:	2201      	movs	r2, #1
 800bb84:	4013      	ands	r3, r2
 800bb86:	d00b      	beq.n	800bba0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2202      	movs	r2, #2
 800bb8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2290      	movs	r2, #144	; 0x90
 800bb94:	589b      	ldr	r3, [r3, r2]
 800bb96:	2204      	movs	r2, #4
 800bb98:	431a      	orrs	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2190      	movs	r1, #144	; 0x90
 800bb9e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bba2:	2204      	movs	r2, #4
 800bba4:	4013      	ands	r3, r2
 800bba6:	d00f      	beq.n	800bbc8 <UART_RxISR_16BIT_FIFOEN+0x110>
 800bba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4013      	ands	r3, r2
 800bbae:	d00b      	beq.n	800bbc8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2204      	movs	r2, #4
 800bbb6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2290      	movs	r2, #144	; 0x90
 800bbbc:	589b      	ldr	r3, [r3, r2]
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2190      	movs	r1, #144	; 0x90
 800bbc6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2290      	movs	r2, #144	; 0x90
 800bbcc:	589b      	ldr	r3, [r3, r2]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d007      	beq.n	800bbe2 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	f7fe fd3d 	bl	800a654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2290      	movs	r2, #144	; 0x90
 800bbde:	2100      	movs	r1, #0
 800bbe0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	225e      	movs	r2, #94	; 0x5e
 800bbe6:	5a9b      	ldrh	r3, [r3, r2]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d173      	bne.n	800bcd6 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbee:	f3ef 8310 	mrs	r3, PRIMASK
 800bbf2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfe:	f383 8810 	msr	PRIMASK, r3
}
 800bc02:	46c0      	nop			; (mov r8, r8)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4961      	ldr	r1, [pc, #388]	; (800bd94 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800bc10:	400a      	ands	r2, r1
 800bc12:	601a      	str	r2, [r3, #0]
 800bc14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	f383 8810 	msr	PRIMASK, r3
}
 800bc1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc20:	f3ef 8310 	mrs	r3, PRIMASK
 800bc24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800bc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc28:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc30:	f383 8810 	msr	PRIMASK, r3
}
 800bc34:	46c0      	nop			; (mov r8, r8)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4955      	ldr	r1, [pc, #340]	; (800bd98 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800bc42:	400a      	ands	r2, r1
 800bc44:	609a      	str	r2, [r3, #8]
 800bc46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc48:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc4c:	f383 8810 	msr	PRIMASK, r3
}
 800bc50:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	228c      	movs	r2, #140	; 0x8c
 800bc56:	2120      	movs	r1, #32
 800bc58:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d12f      	bne.n	800bcce <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc74:	f3ef 8310 	mrs	r3, PRIMASK
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc7c:	657b      	str	r3, [r7, #84]	; 0x54
 800bc7e:	2301      	movs	r3, #1
 800bc80:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc84:	f383 8810 	msr	PRIMASK, r3
}
 800bc88:	46c0      	nop			; (mov r8, r8)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2110      	movs	r1, #16
 800bc96:	438a      	bics	r2, r1
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca0:	f383 8810 	msr	PRIMASK, r3
}
 800bca4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	69db      	ldr	r3, [r3, #28]
 800bcac:	2210      	movs	r2, #16
 800bcae:	4013      	ands	r3, r2
 800bcb0:	2b10      	cmp	r3, #16
 800bcb2:	d103      	bne.n	800bcbc <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2210      	movs	r2, #16
 800bcba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	225c      	movs	r2, #92	; 0x5c
 800bcc0:	5a9a      	ldrh	r2, [r3, r2]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	0011      	movs	r1, r2
 800bcc6:	0018      	movs	r0, r3
 800bcc8:	f7fe fccc 	bl	800a664 <HAL_UARTEx_RxEventCallback>
 800bccc:	e003      	b.n	800bcd6 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	f7f8 fccf 	bl	8004674 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bcd6:	2366      	movs	r3, #102	; 0x66
 800bcd8:	18fb      	adds	r3, r7, r3
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d004      	beq.n	800bcea <UART_RxISR_16BIT_FIFOEN+0x232>
 800bce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bce2:	2220      	movs	r2, #32
 800bce4:	4013      	ands	r3, r2
 800bce6:	d000      	beq.n	800bcea <UART_RxISR_16BIT_FIFOEN+0x232>
 800bce8:	e709      	b.n	800bafe <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bcea:	2052      	movs	r0, #82	; 0x52
 800bcec:	183b      	adds	r3, r7, r0
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	215e      	movs	r1, #94	; 0x5e
 800bcf2:	5a52      	ldrh	r2, [r2, r1]
 800bcf4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bcf6:	0001      	movs	r1, r0
 800bcf8:	187b      	adds	r3, r7, r1
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d044      	beq.n	800bd8a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2268      	movs	r2, #104	; 0x68
 800bd04:	5a9b      	ldrh	r3, [r3, r2]
 800bd06:	187a      	adds	r2, r7, r1
 800bd08:	8812      	ldrh	r2, [r2, #0]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d23d      	bcs.n	800bd8a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd0e:	f3ef 8310 	mrs	r3, PRIMASK
 800bd12:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd14:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd18:	2301      	movs	r3, #1
 800bd1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	f383 8810 	msr	PRIMASK, r3
}
 800bd22:	46c0      	nop			; (mov r8, r8)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	689a      	ldr	r2, [r3, #8]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	491b      	ldr	r1, [pc, #108]	; (800bd9c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800bd30:	400a      	ands	r2, r1
 800bd32:	609a      	str	r2, [r3, #8]
 800bd34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f383 8810 	msr	PRIMASK, r3
}
 800bd3e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a17      	ldr	r2, [pc, #92]	; (800bda0 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800bd44:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd46:	f3ef 8310 	mrs	r3, PRIMASK
 800bd4a:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd4c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd50:	2301      	movs	r3, #1
 800bd52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	f383 8810 	msr	PRIMASK, r3
}
 800bd5a:	46c0      	nop			; (mov r8, r8)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2120      	movs	r1, #32
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	f383 8810 	msr	PRIMASK, r3
}
 800bd76:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd78:	e007      	b.n	800bd8a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	699a      	ldr	r2, [r3, #24]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2108      	movs	r1, #8
 800bd86:	430a      	orrs	r2, r1
 800bd88:	619a      	str	r2, [r3, #24]
}
 800bd8a:	46c0      	nop			; (mov r8, r8)
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	b01e      	add	sp, #120	; 0x78
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	46c0      	nop			; (mov r8, r8)
 800bd94:	fffffeff 	.word	0xfffffeff
 800bd98:	effffffe 	.word	0xeffffffe
 800bd9c:	efffffff 	.word	0xefffffff
 800bda0:	0800b659 	.word	0x0800b659

0800bda4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bdac:	46c0      	nop			; (mov r8, r8)
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	b002      	add	sp, #8
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bdbc:	46c0      	nop			; (mov r8, r8)
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	b002      	add	sp, #8
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bdcc:	46c0      	nop			; (mov r8, r8)
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	b002      	add	sp, #8
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <atoi>:
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	220a      	movs	r2, #10
 800bdd8:	2100      	movs	r1, #0
 800bdda:	f000 f8f7 	bl	800bfcc <strtol>
 800bdde:	bd10      	pop	{r4, pc}

0800bde0 <__errno>:
 800bde0:	4b01      	ldr	r3, [pc, #4]	; (800bde8 <__errno+0x8>)
 800bde2:	6818      	ldr	r0, [r3, #0]
 800bde4:	4770      	bx	lr
 800bde6:	46c0      	nop			; (mov r8, r8)
 800bde8:	200000f4 	.word	0x200000f4

0800bdec <__libc_init_array>:
 800bdec:	b570      	push	{r4, r5, r6, lr}
 800bdee:	2600      	movs	r6, #0
 800bdf0:	4d0c      	ldr	r5, [pc, #48]	; (800be24 <__libc_init_array+0x38>)
 800bdf2:	4c0d      	ldr	r4, [pc, #52]	; (800be28 <__libc_init_array+0x3c>)
 800bdf4:	1b64      	subs	r4, r4, r5
 800bdf6:	10a4      	asrs	r4, r4, #2
 800bdf8:	42a6      	cmp	r6, r4
 800bdfa:	d109      	bne.n	800be10 <__libc_init_array+0x24>
 800bdfc:	2600      	movs	r6, #0
 800bdfe:	f000 ff27 	bl	800cc50 <_init>
 800be02:	4d0a      	ldr	r5, [pc, #40]	; (800be2c <__libc_init_array+0x40>)
 800be04:	4c0a      	ldr	r4, [pc, #40]	; (800be30 <__libc_init_array+0x44>)
 800be06:	1b64      	subs	r4, r4, r5
 800be08:	10a4      	asrs	r4, r4, #2
 800be0a:	42a6      	cmp	r6, r4
 800be0c:	d105      	bne.n	800be1a <__libc_init_array+0x2e>
 800be0e:	bd70      	pop	{r4, r5, r6, pc}
 800be10:	00b3      	lsls	r3, r6, #2
 800be12:	58eb      	ldr	r3, [r5, r3]
 800be14:	4798      	blx	r3
 800be16:	3601      	adds	r6, #1
 800be18:	e7ee      	b.n	800bdf8 <__libc_init_array+0xc>
 800be1a:	00b3      	lsls	r3, r6, #2
 800be1c:	58eb      	ldr	r3, [r5, r3]
 800be1e:	4798      	blx	r3
 800be20:	3601      	adds	r6, #1
 800be22:	e7f2      	b.n	800be0a <__libc_init_array+0x1e>
 800be24:	0800d0c8 	.word	0x0800d0c8
 800be28:	0800d0c8 	.word	0x0800d0c8
 800be2c:	0800d0c8 	.word	0x0800d0c8
 800be30:	0800d0cc 	.word	0x0800d0cc

0800be34 <memset>:
 800be34:	0003      	movs	r3, r0
 800be36:	1882      	adds	r2, r0, r2
 800be38:	4293      	cmp	r3, r2
 800be3a:	d100      	bne.n	800be3e <memset+0xa>
 800be3c:	4770      	bx	lr
 800be3e:	7019      	strb	r1, [r3, #0]
 800be40:	3301      	adds	r3, #1
 800be42:	e7f9      	b.n	800be38 <memset+0x4>

0800be44 <siprintf>:
 800be44:	b40e      	push	{r1, r2, r3}
 800be46:	b500      	push	{lr}
 800be48:	490b      	ldr	r1, [pc, #44]	; (800be78 <siprintf+0x34>)
 800be4a:	b09c      	sub	sp, #112	; 0x70
 800be4c:	ab1d      	add	r3, sp, #116	; 0x74
 800be4e:	9002      	str	r0, [sp, #8]
 800be50:	9006      	str	r0, [sp, #24]
 800be52:	9107      	str	r1, [sp, #28]
 800be54:	9104      	str	r1, [sp, #16]
 800be56:	4809      	ldr	r0, [pc, #36]	; (800be7c <siprintf+0x38>)
 800be58:	4909      	ldr	r1, [pc, #36]	; (800be80 <siprintf+0x3c>)
 800be5a:	cb04      	ldmia	r3!, {r2}
 800be5c:	9105      	str	r1, [sp, #20]
 800be5e:	6800      	ldr	r0, [r0, #0]
 800be60:	a902      	add	r1, sp, #8
 800be62:	9301      	str	r3, [sp, #4]
 800be64:	f000 f920 	bl	800c0a8 <_svfiprintf_r>
 800be68:	2300      	movs	r3, #0
 800be6a:	9a02      	ldr	r2, [sp, #8]
 800be6c:	7013      	strb	r3, [r2, #0]
 800be6e:	b01c      	add	sp, #112	; 0x70
 800be70:	bc08      	pop	{r3}
 800be72:	b003      	add	sp, #12
 800be74:	4718      	bx	r3
 800be76:	46c0      	nop			; (mov r8, r8)
 800be78:	7fffffff 	.word	0x7fffffff
 800be7c:	200000f4 	.word	0x200000f4
 800be80:	ffff0208 	.word	0xffff0208

0800be84 <strstr>:
 800be84:	780a      	ldrb	r2, [r1, #0]
 800be86:	b530      	push	{r4, r5, lr}
 800be88:	2a00      	cmp	r2, #0
 800be8a:	d10c      	bne.n	800bea6 <strstr+0x22>
 800be8c:	bd30      	pop	{r4, r5, pc}
 800be8e:	429a      	cmp	r2, r3
 800be90:	d108      	bne.n	800bea4 <strstr+0x20>
 800be92:	2301      	movs	r3, #1
 800be94:	5ccc      	ldrb	r4, [r1, r3]
 800be96:	2c00      	cmp	r4, #0
 800be98:	d0f8      	beq.n	800be8c <strstr+0x8>
 800be9a:	5cc5      	ldrb	r5, [r0, r3]
 800be9c:	42a5      	cmp	r5, r4
 800be9e:	d101      	bne.n	800bea4 <strstr+0x20>
 800bea0:	3301      	adds	r3, #1
 800bea2:	e7f7      	b.n	800be94 <strstr+0x10>
 800bea4:	3001      	adds	r0, #1
 800bea6:	7803      	ldrb	r3, [r0, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1f0      	bne.n	800be8e <strstr+0xa>
 800beac:	0018      	movs	r0, r3
 800beae:	e7ed      	b.n	800be8c <strstr+0x8>

0800beb0 <_strtol_l.constprop.0>:
 800beb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb2:	b087      	sub	sp, #28
 800beb4:	001e      	movs	r6, r3
 800beb6:	9005      	str	r0, [sp, #20]
 800beb8:	9101      	str	r1, [sp, #4]
 800beba:	9202      	str	r2, [sp, #8]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d045      	beq.n	800bf4c <_strtol_l.constprop.0+0x9c>
 800bec0:	000b      	movs	r3, r1
 800bec2:	2e24      	cmp	r6, #36	; 0x24
 800bec4:	d842      	bhi.n	800bf4c <_strtol_l.constprop.0+0x9c>
 800bec6:	4a3f      	ldr	r2, [pc, #252]	; (800bfc4 <_strtol_l.constprop.0+0x114>)
 800bec8:	2108      	movs	r1, #8
 800beca:	4694      	mov	ip, r2
 800becc:	001a      	movs	r2, r3
 800bece:	4660      	mov	r0, ip
 800bed0:	7814      	ldrb	r4, [r2, #0]
 800bed2:	3301      	adds	r3, #1
 800bed4:	5d00      	ldrb	r0, [r0, r4]
 800bed6:	001d      	movs	r5, r3
 800bed8:	0007      	movs	r7, r0
 800beda:	400f      	ands	r7, r1
 800bedc:	4208      	tst	r0, r1
 800bede:	d1f5      	bne.n	800becc <_strtol_l.constprop.0+0x1c>
 800bee0:	2c2d      	cmp	r4, #45	; 0x2d
 800bee2:	d13a      	bne.n	800bf5a <_strtol_l.constprop.0+0xaa>
 800bee4:	2701      	movs	r7, #1
 800bee6:	781c      	ldrb	r4, [r3, #0]
 800bee8:	1c95      	adds	r5, r2, #2
 800beea:	2e00      	cmp	r6, #0
 800beec:	d065      	beq.n	800bfba <_strtol_l.constprop.0+0x10a>
 800beee:	2e10      	cmp	r6, #16
 800bef0:	d109      	bne.n	800bf06 <_strtol_l.constprop.0+0x56>
 800bef2:	2c30      	cmp	r4, #48	; 0x30
 800bef4:	d107      	bne.n	800bf06 <_strtol_l.constprop.0+0x56>
 800bef6:	2220      	movs	r2, #32
 800bef8:	782b      	ldrb	r3, [r5, #0]
 800befa:	4393      	bics	r3, r2
 800befc:	2b58      	cmp	r3, #88	; 0x58
 800befe:	d157      	bne.n	800bfb0 <_strtol_l.constprop.0+0x100>
 800bf00:	2610      	movs	r6, #16
 800bf02:	786c      	ldrb	r4, [r5, #1]
 800bf04:	3502      	adds	r5, #2
 800bf06:	4b30      	ldr	r3, [pc, #192]	; (800bfc8 <_strtol_l.constprop.0+0x118>)
 800bf08:	0031      	movs	r1, r6
 800bf0a:	18fb      	adds	r3, r7, r3
 800bf0c:	0018      	movs	r0, r3
 800bf0e:	9303      	str	r3, [sp, #12]
 800bf10:	f7f4 f98a 	bl	8000228 <__aeabi_uidivmod>
 800bf14:	2300      	movs	r3, #0
 800bf16:	2201      	movs	r2, #1
 800bf18:	4684      	mov	ip, r0
 800bf1a:	0018      	movs	r0, r3
 800bf1c:	9104      	str	r1, [sp, #16]
 800bf1e:	4252      	negs	r2, r2
 800bf20:	0021      	movs	r1, r4
 800bf22:	3930      	subs	r1, #48	; 0x30
 800bf24:	2909      	cmp	r1, #9
 800bf26:	d81d      	bhi.n	800bf64 <_strtol_l.constprop.0+0xb4>
 800bf28:	000c      	movs	r4, r1
 800bf2a:	42a6      	cmp	r6, r4
 800bf2c:	dd28      	ble.n	800bf80 <_strtol_l.constprop.0+0xd0>
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	db24      	blt.n	800bf7c <_strtol_l.constprop.0+0xcc>
 800bf32:	0013      	movs	r3, r2
 800bf34:	4584      	cmp	ip, r0
 800bf36:	d306      	bcc.n	800bf46 <_strtol_l.constprop.0+0x96>
 800bf38:	d102      	bne.n	800bf40 <_strtol_l.constprop.0+0x90>
 800bf3a:	9904      	ldr	r1, [sp, #16]
 800bf3c:	42a1      	cmp	r1, r4
 800bf3e:	db02      	blt.n	800bf46 <_strtol_l.constprop.0+0x96>
 800bf40:	2301      	movs	r3, #1
 800bf42:	4370      	muls	r0, r6
 800bf44:	1820      	adds	r0, r4, r0
 800bf46:	782c      	ldrb	r4, [r5, #0]
 800bf48:	3501      	adds	r5, #1
 800bf4a:	e7e9      	b.n	800bf20 <_strtol_l.constprop.0+0x70>
 800bf4c:	f7ff ff48 	bl	800bde0 <__errno>
 800bf50:	2316      	movs	r3, #22
 800bf52:	6003      	str	r3, [r0, #0]
 800bf54:	2000      	movs	r0, #0
 800bf56:	b007      	add	sp, #28
 800bf58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf5a:	2c2b      	cmp	r4, #43	; 0x2b
 800bf5c:	d1c5      	bne.n	800beea <_strtol_l.constprop.0+0x3a>
 800bf5e:	781c      	ldrb	r4, [r3, #0]
 800bf60:	1c95      	adds	r5, r2, #2
 800bf62:	e7c2      	b.n	800beea <_strtol_l.constprop.0+0x3a>
 800bf64:	0021      	movs	r1, r4
 800bf66:	3941      	subs	r1, #65	; 0x41
 800bf68:	2919      	cmp	r1, #25
 800bf6a:	d801      	bhi.n	800bf70 <_strtol_l.constprop.0+0xc0>
 800bf6c:	3c37      	subs	r4, #55	; 0x37
 800bf6e:	e7dc      	b.n	800bf2a <_strtol_l.constprop.0+0x7a>
 800bf70:	0021      	movs	r1, r4
 800bf72:	3961      	subs	r1, #97	; 0x61
 800bf74:	2919      	cmp	r1, #25
 800bf76:	d803      	bhi.n	800bf80 <_strtol_l.constprop.0+0xd0>
 800bf78:	3c57      	subs	r4, #87	; 0x57
 800bf7a:	e7d6      	b.n	800bf2a <_strtol_l.constprop.0+0x7a>
 800bf7c:	0013      	movs	r3, r2
 800bf7e:	e7e2      	b.n	800bf46 <_strtol_l.constprop.0+0x96>
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	da09      	bge.n	800bf98 <_strtol_l.constprop.0+0xe8>
 800bf84:	2322      	movs	r3, #34	; 0x22
 800bf86:	9a05      	ldr	r2, [sp, #20]
 800bf88:	9803      	ldr	r0, [sp, #12]
 800bf8a:	6013      	str	r3, [r2, #0]
 800bf8c:	9b02      	ldr	r3, [sp, #8]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0e1      	beq.n	800bf56 <_strtol_l.constprop.0+0xa6>
 800bf92:	1e6b      	subs	r3, r5, #1
 800bf94:	9301      	str	r3, [sp, #4]
 800bf96:	e007      	b.n	800bfa8 <_strtol_l.constprop.0+0xf8>
 800bf98:	2f00      	cmp	r7, #0
 800bf9a:	d000      	beq.n	800bf9e <_strtol_l.constprop.0+0xee>
 800bf9c:	4240      	negs	r0, r0
 800bf9e:	9a02      	ldr	r2, [sp, #8]
 800bfa0:	2a00      	cmp	r2, #0
 800bfa2:	d0d8      	beq.n	800bf56 <_strtol_l.constprop.0+0xa6>
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1f4      	bne.n	800bf92 <_strtol_l.constprop.0+0xe2>
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	9a01      	ldr	r2, [sp, #4]
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	e7d2      	b.n	800bf56 <_strtol_l.constprop.0+0xa6>
 800bfb0:	2430      	movs	r4, #48	; 0x30
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	d1a7      	bne.n	800bf06 <_strtol_l.constprop.0+0x56>
 800bfb6:	3608      	adds	r6, #8
 800bfb8:	e7a5      	b.n	800bf06 <_strtol_l.constprop.0+0x56>
 800bfba:	2c30      	cmp	r4, #48	; 0x30
 800bfbc:	d09b      	beq.n	800bef6 <_strtol_l.constprop.0+0x46>
 800bfbe:	260a      	movs	r6, #10
 800bfc0:	e7a1      	b.n	800bf06 <_strtol_l.constprop.0+0x56>
 800bfc2:	46c0      	nop			; (mov r8, r8)
 800bfc4:	0800cf8d 	.word	0x0800cf8d
 800bfc8:	7fffffff 	.word	0x7fffffff

0800bfcc <strtol>:
 800bfcc:	b510      	push	{r4, lr}
 800bfce:	0013      	movs	r3, r2
 800bfd0:	000a      	movs	r2, r1
 800bfd2:	0001      	movs	r1, r0
 800bfd4:	4802      	ldr	r0, [pc, #8]	; (800bfe0 <strtol+0x14>)
 800bfd6:	6800      	ldr	r0, [r0, #0]
 800bfd8:	f7ff ff6a 	bl	800beb0 <_strtol_l.constprop.0>
 800bfdc:	bd10      	pop	{r4, pc}
 800bfde:	46c0      	nop			; (mov r8, r8)
 800bfe0:	200000f4 	.word	0x200000f4

0800bfe4 <__ssputs_r>:
 800bfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfe6:	688e      	ldr	r6, [r1, #8]
 800bfe8:	b085      	sub	sp, #20
 800bfea:	0007      	movs	r7, r0
 800bfec:	000c      	movs	r4, r1
 800bfee:	9203      	str	r2, [sp, #12]
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	429e      	cmp	r6, r3
 800bff4:	d83c      	bhi.n	800c070 <__ssputs_r+0x8c>
 800bff6:	2390      	movs	r3, #144	; 0x90
 800bff8:	898a      	ldrh	r2, [r1, #12]
 800bffa:	00db      	lsls	r3, r3, #3
 800bffc:	421a      	tst	r2, r3
 800bffe:	d034      	beq.n	800c06a <__ssputs_r+0x86>
 800c000:	6909      	ldr	r1, [r1, #16]
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	6960      	ldr	r0, [r4, #20]
 800c006:	1a5b      	subs	r3, r3, r1
 800c008:	9302      	str	r3, [sp, #8]
 800c00a:	2303      	movs	r3, #3
 800c00c:	4343      	muls	r3, r0
 800c00e:	0fdd      	lsrs	r5, r3, #31
 800c010:	18ed      	adds	r5, r5, r3
 800c012:	9b01      	ldr	r3, [sp, #4]
 800c014:	9802      	ldr	r0, [sp, #8]
 800c016:	3301      	adds	r3, #1
 800c018:	181b      	adds	r3, r3, r0
 800c01a:	106d      	asrs	r5, r5, #1
 800c01c:	42ab      	cmp	r3, r5
 800c01e:	d900      	bls.n	800c022 <__ssputs_r+0x3e>
 800c020:	001d      	movs	r5, r3
 800c022:	0553      	lsls	r3, r2, #21
 800c024:	d532      	bpl.n	800c08c <__ssputs_r+0xa8>
 800c026:	0029      	movs	r1, r5
 800c028:	0038      	movs	r0, r7
 800c02a:	f000 fb53 	bl	800c6d4 <_malloc_r>
 800c02e:	1e06      	subs	r6, r0, #0
 800c030:	d109      	bne.n	800c046 <__ssputs_r+0x62>
 800c032:	230c      	movs	r3, #12
 800c034:	603b      	str	r3, [r7, #0]
 800c036:	2340      	movs	r3, #64	; 0x40
 800c038:	2001      	movs	r0, #1
 800c03a:	89a2      	ldrh	r2, [r4, #12]
 800c03c:	4240      	negs	r0, r0
 800c03e:	4313      	orrs	r3, r2
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	b005      	add	sp, #20
 800c044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c046:	9a02      	ldr	r2, [sp, #8]
 800c048:	6921      	ldr	r1, [r4, #16]
 800c04a:	f000 faba 	bl	800c5c2 <memcpy>
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	4a14      	ldr	r2, [pc, #80]	; (800c0a4 <__ssputs_r+0xc0>)
 800c052:	401a      	ands	r2, r3
 800c054:	2380      	movs	r3, #128	; 0x80
 800c056:	4313      	orrs	r3, r2
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	9b02      	ldr	r3, [sp, #8]
 800c05c:	6126      	str	r6, [r4, #16]
 800c05e:	18f6      	adds	r6, r6, r3
 800c060:	6026      	str	r6, [r4, #0]
 800c062:	6165      	str	r5, [r4, #20]
 800c064:	9e01      	ldr	r6, [sp, #4]
 800c066:	1aed      	subs	r5, r5, r3
 800c068:	60a5      	str	r5, [r4, #8]
 800c06a:	9b01      	ldr	r3, [sp, #4]
 800c06c:	429e      	cmp	r6, r3
 800c06e:	d900      	bls.n	800c072 <__ssputs_r+0x8e>
 800c070:	9e01      	ldr	r6, [sp, #4]
 800c072:	0032      	movs	r2, r6
 800c074:	9903      	ldr	r1, [sp, #12]
 800c076:	6820      	ldr	r0, [r4, #0]
 800c078:	f000 faac 	bl	800c5d4 <memmove>
 800c07c:	68a3      	ldr	r3, [r4, #8]
 800c07e:	2000      	movs	r0, #0
 800c080:	1b9b      	subs	r3, r3, r6
 800c082:	60a3      	str	r3, [r4, #8]
 800c084:	6823      	ldr	r3, [r4, #0]
 800c086:	199e      	adds	r6, r3, r6
 800c088:	6026      	str	r6, [r4, #0]
 800c08a:	e7da      	b.n	800c042 <__ssputs_r+0x5e>
 800c08c:	002a      	movs	r2, r5
 800c08e:	0038      	movs	r0, r7
 800c090:	f000 fb96 	bl	800c7c0 <_realloc_r>
 800c094:	1e06      	subs	r6, r0, #0
 800c096:	d1e0      	bne.n	800c05a <__ssputs_r+0x76>
 800c098:	0038      	movs	r0, r7
 800c09a:	6921      	ldr	r1, [r4, #16]
 800c09c:	f000 faae 	bl	800c5fc <_free_r>
 800c0a0:	e7c7      	b.n	800c032 <__ssputs_r+0x4e>
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	fffffb7f 	.word	0xfffffb7f

0800c0a8 <_svfiprintf_r>:
 800c0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0aa:	b0a1      	sub	sp, #132	; 0x84
 800c0ac:	9003      	str	r0, [sp, #12]
 800c0ae:	001d      	movs	r5, r3
 800c0b0:	898b      	ldrh	r3, [r1, #12]
 800c0b2:	000f      	movs	r7, r1
 800c0b4:	0016      	movs	r6, r2
 800c0b6:	061b      	lsls	r3, r3, #24
 800c0b8:	d511      	bpl.n	800c0de <_svfiprintf_r+0x36>
 800c0ba:	690b      	ldr	r3, [r1, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10e      	bne.n	800c0de <_svfiprintf_r+0x36>
 800c0c0:	2140      	movs	r1, #64	; 0x40
 800c0c2:	f000 fb07 	bl	800c6d4 <_malloc_r>
 800c0c6:	6038      	str	r0, [r7, #0]
 800c0c8:	6138      	str	r0, [r7, #16]
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	d105      	bne.n	800c0da <_svfiprintf_r+0x32>
 800c0ce:	230c      	movs	r3, #12
 800c0d0:	9a03      	ldr	r2, [sp, #12]
 800c0d2:	3801      	subs	r0, #1
 800c0d4:	6013      	str	r3, [r2, #0]
 800c0d6:	b021      	add	sp, #132	; 0x84
 800c0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0da:	2340      	movs	r3, #64	; 0x40
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	2300      	movs	r3, #0
 800c0e0:	ac08      	add	r4, sp, #32
 800c0e2:	6163      	str	r3, [r4, #20]
 800c0e4:	3320      	adds	r3, #32
 800c0e6:	7663      	strb	r3, [r4, #25]
 800c0e8:	3310      	adds	r3, #16
 800c0ea:	76a3      	strb	r3, [r4, #26]
 800c0ec:	9507      	str	r5, [sp, #28]
 800c0ee:	0035      	movs	r5, r6
 800c0f0:	782b      	ldrb	r3, [r5, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <_svfiprintf_r+0x52>
 800c0f6:	2b25      	cmp	r3, #37	; 0x25
 800c0f8:	d147      	bne.n	800c18a <_svfiprintf_r+0xe2>
 800c0fa:	1bab      	subs	r3, r5, r6
 800c0fc:	9305      	str	r3, [sp, #20]
 800c0fe:	42b5      	cmp	r5, r6
 800c100:	d00c      	beq.n	800c11c <_svfiprintf_r+0x74>
 800c102:	0032      	movs	r2, r6
 800c104:	0039      	movs	r1, r7
 800c106:	9803      	ldr	r0, [sp, #12]
 800c108:	f7ff ff6c 	bl	800bfe4 <__ssputs_r>
 800c10c:	1c43      	adds	r3, r0, #1
 800c10e:	d100      	bne.n	800c112 <_svfiprintf_r+0x6a>
 800c110:	e0ae      	b.n	800c270 <_svfiprintf_r+0x1c8>
 800c112:	6962      	ldr	r2, [r4, #20]
 800c114:	9b05      	ldr	r3, [sp, #20]
 800c116:	4694      	mov	ip, r2
 800c118:	4463      	add	r3, ip
 800c11a:	6163      	str	r3, [r4, #20]
 800c11c:	782b      	ldrb	r3, [r5, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d100      	bne.n	800c124 <_svfiprintf_r+0x7c>
 800c122:	e0a5      	b.n	800c270 <_svfiprintf_r+0x1c8>
 800c124:	2201      	movs	r2, #1
 800c126:	2300      	movs	r3, #0
 800c128:	4252      	negs	r2, r2
 800c12a:	6062      	str	r2, [r4, #4]
 800c12c:	a904      	add	r1, sp, #16
 800c12e:	3254      	adds	r2, #84	; 0x54
 800c130:	1852      	adds	r2, r2, r1
 800c132:	1c6e      	adds	r6, r5, #1
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	60e3      	str	r3, [r4, #12]
 800c138:	60a3      	str	r3, [r4, #8]
 800c13a:	7013      	strb	r3, [r2, #0]
 800c13c:	65a3      	str	r3, [r4, #88]	; 0x58
 800c13e:	2205      	movs	r2, #5
 800c140:	7831      	ldrb	r1, [r6, #0]
 800c142:	4854      	ldr	r0, [pc, #336]	; (800c294 <_svfiprintf_r+0x1ec>)
 800c144:	f000 fa32 	bl	800c5ac <memchr>
 800c148:	1c75      	adds	r5, r6, #1
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d11f      	bne.n	800c18e <_svfiprintf_r+0xe6>
 800c14e:	6822      	ldr	r2, [r4, #0]
 800c150:	06d3      	lsls	r3, r2, #27
 800c152:	d504      	bpl.n	800c15e <_svfiprintf_r+0xb6>
 800c154:	2353      	movs	r3, #83	; 0x53
 800c156:	a904      	add	r1, sp, #16
 800c158:	185b      	adds	r3, r3, r1
 800c15a:	2120      	movs	r1, #32
 800c15c:	7019      	strb	r1, [r3, #0]
 800c15e:	0713      	lsls	r3, r2, #28
 800c160:	d504      	bpl.n	800c16c <_svfiprintf_r+0xc4>
 800c162:	2353      	movs	r3, #83	; 0x53
 800c164:	a904      	add	r1, sp, #16
 800c166:	185b      	adds	r3, r3, r1
 800c168:	212b      	movs	r1, #43	; 0x2b
 800c16a:	7019      	strb	r1, [r3, #0]
 800c16c:	7833      	ldrb	r3, [r6, #0]
 800c16e:	2b2a      	cmp	r3, #42	; 0x2a
 800c170:	d016      	beq.n	800c1a0 <_svfiprintf_r+0xf8>
 800c172:	0035      	movs	r5, r6
 800c174:	2100      	movs	r1, #0
 800c176:	200a      	movs	r0, #10
 800c178:	68e3      	ldr	r3, [r4, #12]
 800c17a:	782a      	ldrb	r2, [r5, #0]
 800c17c:	1c6e      	adds	r6, r5, #1
 800c17e:	3a30      	subs	r2, #48	; 0x30
 800c180:	2a09      	cmp	r2, #9
 800c182:	d94e      	bls.n	800c222 <_svfiprintf_r+0x17a>
 800c184:	2900      	cmp	r1, #0
 800c186:	d111      	bne.n	800c1ac <_svfiprintf_r+0x104>
 800c188:	e017      	b.n	800c1ba <_svfiprintf_r+0x112>
 800c18a:	3501      	adds	r5, #1
 800c18c:	e7b0      	b.n	800c0f0 <_svfiprintf_r+0x48>
 800c18e:	4b41      	ldr	r3, [pc, #260]	; (800c294 <_svfiprintf_r+0x1ec>)
 800c190:	6822      	ldr	r2, [r4, #0]
 800c192:	1ac0      	subs	r0, r0, r3
 800c194:	2301      	movs	r3, #1
 800c196:	4083      	lsls	r3, r0
 800c198:	4313      	orrs	r3, r2
 800c19a:	002e      	movs	r6, r5
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	e7ce      	b.n	800c13e <_svfiprintf_r+0x96>
 800c1a0:	9b07      	ldr	r3, [sp, #28]
 800c1a2:	1d19      	adds	r1, r3, #4
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	9107      	str	r1, [sp, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	db01      	blt.n	800c1b0 <_svfiprintf_r+0x108>
 800c1ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1ae:	e004      	b.n	800c1ba <_svfiprintf_r+0x112>
 800c1b0:	425b      	negs	r3, r3
 800c1b2:	60e3      	str	r3, [r4, #12]
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	782b      	ldrb	r3, [r5, #0]
 800c1bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c1be:	d10a      	bne.n	800c1d6 <_svfiprintf_r+0x12e>
 800c1c0:	786b      	ldrb	r3, [r5, #1]
 800c1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1c4:	d135      	bne.n	800c232 <_svfiprintf_r+0x18a>
 800c1c6:	9b07      	ldr	r3, [sp, #28]
 800c1c8:	3502      	adds	r5, #2
 800c1ca:	1d1a      	adds	r2, r3, #4
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	9207      	str	r2, [sp, #28]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	db2b      	blt.n	800c22c <_svfiprintf_r+0x184>
 800c1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1d6:	4e30      	ldr	r6, [pc, #192]	; (800c298 <_svfiprintf_r+0x1f0>)
 800c1d8:	2203      	movs	r2, #3
 800c1da:	0030      	movs	r0, r6
 800c1dc:	7829      	ldrb	r1, [r5, #0]
 800c1de:	f000 f9e5 	bl	800c5ac <memchr>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d006      	beq.n	800c1f4 <_svfiprintf_r+0x14c>
 800c1e6:	2340      	movs	r3, #64	; 0x40
 800c1e8:	1b80      	subs	r0, r0, r6
 800c1ea:	4083      	lsls	r3, r0
 800c1ec:	6822      	ldr	r2, [r4, #0]
 800c1ee:	3501      	adds	r5, #1
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	6023      	str	r3, [r4, #0]
 800c1f4:	7829      	ldrb	r1, [r5, #0]
 800c1f6:	2206      	movs	r2, #6
 800c1f8:	4828      	ldr	r0, [pc, #160]	; (800c29c <_svfiprintf_r+0x1f4>)
 800c1fa:	1c6e      	adds	r6, r5, #1
 800c1fc:	7621      	strb	r1, [r4, #24]
 800c1fe:	f000 f9d5 	bl	800c5ac <memchr>
 800c202:	2800      	cmp	r0, #0
 800c204:	d03c      	beq.n	800c280 <_svfiprintf_r+0x1d8>
 800c206:	4b26      	ldr	r3, [pc, #152]	; (800c2a0 <_svfiprintf_r+0x1f8>)
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d125      	bne.n	800c258 <_svfiprintf_r+0x1b0>
 800c20c:	2207      	movs	r2, #7
 800c20e:	9b07      	ldr	r3, [sp, #28]
 800c210:	3307      	adds	r3, #7
 800c212:	4393      	bics	r3, r2
 800c214:	3308      	adds	r3, #8
 800c216:	9307      	str	r3, [sp, #28]
 800c218:	6963      	ldr	r3, [r4, #20]
 800c21a:	9a04      	ldr	r2, [sp, #16]
 800c21c:	189b      	adds	r3, r3, r2
 800c21e:	6163      	str	r3, [r4, #20]
 800c220:	e765      	b.n	800c0ee <_svfiprintf_r+0x46>
 800c222:	4343      	muls	r3, r0
 800c224:	0035      	movs	r5, r6
 800c226:	2101      	movs	r1, #1
 800c228:	189b      	adds	r3, r3, r2
 800c22a:	e7a6      	b.n	800c17a <_svfiprintf_r+0xd2>
 800c22c:	2301      	movs	r3, #1
 800c22e:	425b      	negs	r3, r3
 800c230:	e7d0      	b.n	800c1d4 <_svfiprintf_r+0x12c>
 800c232:	2300      	movs	r3, #0
 800c234:	200a      	movs	r0, #10
 800c236:	001a      	movs	r2, r3
 800c238:	3501      	adds	r5, #1
 800c23a:	6063      	str	r3, [r4, #4]
 800c23c:	7829      	ldrb	r1, [r5, #0]
 800c23e:	1c6e      	adds	r6, r5, #1
 800c240:	3930      	subs	r1, #48	; 0x30
 800c242:	2909      	cmp	r1, #9
 800c244:	d903      	bls.n	800c24e <_svfiprintf_r+0x1a6>
 800c246:	2b00      	cmp	r3, #0
 800c248:	d0c5      	beq.n	800c1d6 <_svfiprintf_r+0x12e>
 800c24a:	9209      	str	r2, [sp, #36]	; 0x24
 800c24c:	e7c3      	b.n	800c1d6 <_svfiprintf_r+0x12e>
 800c24e:	4342      	muls	r2, r0
 800c250:	0035      	movs	r5, r6
 800c252:	2301      	movs	r3, #1
 800c254:	1852      	adds	r2, r2, r1
 800c256:	e7f1      	b.n	800c23c <_svfiprintf_r+0x194>
 800c258:	ab07      	add	r3, sp, #28
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	003a      	movs	r2, r7
 800c25e:	0021      	movs	r1, r4
 800c260:	4b10      	ldr	r3, [pc, #64]	; (800c2a4 <_svfiprintf_r+0x1fc>)
 800c262:	9803      	ldr	r0, [sp, #12]
 800c264:	e000      	b.n	800c268 <_svfiprintf_r+0x1c0>
 800c266:	bf00      	nop
 800c268:	9004      	str	r0, [sp, #16]
 800c26a:	9b04      	ldr	r3, [sp, #16]
 800c26c:	3301      	adds	r3, #1
 800c26e:	d1d3      	bne.n	800c218 <_svfiprintf_r+0x170>
 800c270:	89bb      	ldrh	r3, [r7, #12]
 800c272:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c274:	065b      	lsls	r3, r3, #25
 800c276:	d400      	bmi.n	800c27a <_svfiprintf_r+0x1d2>
 800c278:	e72d      	b.n	800c0d6 <_svfiprintf_r+0x2e>
 800c27a:	2001      	movs	r0, #1
 800c27c:	4240      	negs	r0, r0
 800c27e:	e72a      	b.n	800c0d6 <_svfiprintf_r+0x2e>
 800c280:	ab07      	add	r3, sp, #28
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	003a      	movs	r2, r7
 800c286:	0021      	movs	r1, r4
 800c288:	4b06      	ldr	r3, [pc, #24]	; (800c2a4 <_svfiprintf_r+0x1fc>)
 800c28a:	9803      	ldr	r0, [sp, #12]
 800c28c:	f000 f87c 	bl	800c388 <_printf_i>
 800c290:	e7ea      	b.n	800c268 <_svfiprintf_r+0x1c0>
 800c292:	46c0      	nop			; (mov r8, r8)
 800c294:	0800d08d 	.word	0x0800d08d
 800c298:	0800d093 	.word	0x0800d093
 800c29c:	0800d097 	.word	0x0800d097
 800c2a0:	00000000 	.word	0x00000000
 800c2a4:	0800bfe5 	.word	0x0800bfe5

0800c2a8 <_printf_common>:
 800c2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2aa:	0015      	movs	r5, r2
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	688a      	ldr	r2, [r1, #8]
 800c2b0:	690b      	ldr	r3, [r1, #16]
 800c2b2:	000c      	movs	r4, r1
 800c2b4:	9000      	str	r0, [sp, #0]
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	da00      	bge.n	800c2bc <_printf_common+0x14>
 800c2ba:	0013      	movs	r3, r2
 800c2bc:	0022      	movs	r2, r4
 800c2be:	602b      	str	r3, [r5, #0]
 800c2c0:	3243      	adds	r2, #67	; 0x43
 800c2c2:	7812      	ldrb	r2, [r2, #0]
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	d001      	beq.n	800c2cc <_printf_common+0x24>
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	602b      	str	r3, [r5, #0]
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	069b      	lsls	r3, r3, #26
 800c2d0:	d502      	bpl.n	800c2d8 <_printf_common+0x30>
 800c2d2:	682b      	ldr	r3, [r5, #0]
 800c2d4:	3302      	adds	r3, #2
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	6822      	ldr	r2, [r4, #0]
 800c2da:	2306      	movs	r3, #6
 800c2dc:	0017      	movs	r7, r2
 800c2de:	401f      	ands	r7, r3
 800c2e0:	421a      	tst	r2, r3
 800c2e2:	d027      	beq.n	800c334 <_printf_common+0x8c>
 800c2e4:	0023      	movs	r3, r4
 800c2e6:	3343      	adds	r3, #67	; 0x43
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	1e5a      	subs	r2, r3, #1
 800c2ec:	4193      	sbcs	r3, r2
 800c2ee:	6822      	ldr	r2, [r4, #0]
 800c2f0:	0692      	lsls	r2, r2, #26
 800c2f2:	d430      	bmi.n	800c356 <_printf_common+0xae>
 800c2f4:	0022      	movs	r2, r4
 800c2f6:	9901      	ldr	r1, [sp, #4]
 800c2f8:	9800      	ldr	r0, [sp, #0]
 800c2fa:	9e08      	ldr	r6, [sp, #32]
 800c2fc:	3243      	adds	r2, #67	; 0x43
 800c2fe:	47b0      	blx	r6
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d025      	beq.n	800c350 <_printf_common+0xa8>
 800c304:	2306      	movs	r3, #6
 800c306:	6820      	ldr	r0, [r4, #0]
 800c308:	682a      	ldr	r2, [r5, #0]
 800c30a:	68e1      	ldr	r1, [r4, #12]
 800c30c:	2500      	movs	r5, #0
 800c30e:	4003      	ands	r3, r0
 800c310:	2b04      	cmp	r3, #4
 800c312:	d103      	bne.n	800c31c <_printf_common+0x74>
 800c314:	1a8d      	subs	r5, r1, r2
 800c316:	43eb      	mvns	r3, r5
 800c318:	17db      	asrs	r3, r3, #31
 800c31a:	401d      	ands	r5, r3
 800c31c:	68a3      	ldr	r3, [r4, #8]
 800c31e:	6922      	ldr	r2, [r4, #16]
 800c320:	4293      	cmp	r3, r2
 800c322:	dd01      	ble.n	800c328 <_printf_common+0x80>
 800c324:	1a9b      	subs	r3, r3, r2
 800c326:	18ed      	adds	r5, r5, r3
 800c328:	2700      	movs	r7, #0
 800c32a:	42bd      	cmp	r5, r7
 800c32c:	d120      	bne.n	800c370 <_printf_common+0xc8>
 800c32e:	2000      	movs	r0, #0
 800c330:	e010      	b.n	800c354 <_printf_common+0xac>
 800c332:	3701      	adds	r7, #1
 800c334:	68e3      	ldr	r3, [r4, #12]
 800c336:	682a      	ldr	r2, [r5, #0]
 800c338:	1a9b      	subs	r3, r3, r2
 800c33a:	42bb      	cmp	r3, r7
 800c33c:	ddd2      	ble.n	800c2e4 <_printf_common+0x3c>
 800c33e:	0022      	movs	r2, r4
 800c340:	2301      	movs	r3, #1
 800c342:	9901      	ldr	r1, [sp, #4]
 800c344:	9800      	ldr	r0, [sp, #0]
 800c346:	9e08      	ldr	r6, [sp, #32]
 800c348:	3219      	adds	r2, #25
 800c34a:	47b0      	blx	r6
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d1f0      	bne.n	800c332 <_printf_common+0x8a>
 800c350:	2001      	movs	r0, #1
 800c352:	4240      	negs	r0, r0
 800c354:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c356:	2030      	movs	r0, #48	; 0x30
 800c358:	18e1      	adds	r1, r4, r3
 800c35a:	3143      	adds	r1, #67	; 0x43
 800c35c:	7008      	strb	r0, [r1, #0]
 800c35e:	0021      	movs	r1, r4
 800c360:	1c5a      	adds	r2, r3, #1
 800c362:	3145      	adds	r1, #69	; 0x45
 800c364:	7809      	ldrb	r1, [r1, #0]
 800c366:	18a2      	adds	r2, r4, r2
 800c368:	3243      	adds	r2, #67	; 0x43
 800c36a:	3302      	adds	r3, #2
 800c36c:	7011      	strb	r1, [r2, #0]
 800c36e:	e7c1      	b.n	800c2f4 <_printf_common+0x4c>
 800c370:	0022      	movs	r2, r4
 800c372:	2301      	movs	r3, #1
 800c374:	9901      	ldr	r1, [sp, #4]
 800c376:	9800      	ldr	r0, [sp, #0]
 800c378:	9e08      	ldr	r6, [sp, #32]
 800c37a:	321a      	adds	r2, #26
 800c37c:	47b0      	blx	r6
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	d0e6      	beq.n	800c350 <_printf_common+0xa8>
 800c382:	3701      	adds	r7, #1
 800c384:	e7d1      	b.n	800c32a <_printf_common+0x82>
	...

0800c388 <_printf_i>:
 800c388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38a:	b08b      	sub	sp, #44	; 0x2c
 800c38c:	9206      	str	r2, [sp, #24]
 800c38e:	000a      	movs	r2, r1
 800c390:	3243      	adds	r2, #67	; 0x43
 800c392:	9307      	str	r3, [sp, #28]
 800c394:	9005      	str	r0, [sp, #20]
 800c396:	9204      	str	r2, [sp, #16]
 800c398:	7e0a      	ldrb	r2, [r1, #24]
 800c39a:	000c      	movs	r4, r1
 800c39c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c39e:	2a78      	cmp	r2, #120	; 0x78
 800c3a0:	d807      	bhi.n	800c3b2 <_printf_i+0x2a>
 800c3a2:	2a62      	cmp	r2, #98	; 0x62
 800c3a4:	d809      	bhi.n	800c3ba <_printf_i+0x32>
 800c3a6:	2a00      	cmp	r2, #0
 800c3a8:	d100      	bne.n	800c3ac <_printf_i+0x24>
 800c3aa:	e0c1      	b.n	800c530 <_printf_i+0x1a8>
 800c3ac:	2a58      	cmp	r2, #88	; 0x58
 800c3ae:	d100      	bne.n	800c3b2 <_printf_i+0x2a>
 800c3b0:	e08c      	b.n	800c4cc <_printf_i+0x144>
 800c3b2:	0026      	movs	r6, r4
 800c3b4:	3642      	adds	r6, #66	; 0x42
 800c3b6:	7032      	strb	r2, [r6, #0]
 800c3b8:	e022      	b.n	800c400 <_printf_i+0x78>
 800c3ba:	0010      	movs	r0, r2
 800c3bc:	3863      	subs	r0, #99	; 0x63
 800c3be:	2815      	cmp	r0, #21
 800c3c0:	d8f7      	bhi.n	800c3b2 <_printf_i+0x2a>
 800c3c2:	f7f3 fea1 	bl	8000108 <__gnu_thumb1_case_shi>
 800c3c6:	0016      	.short	0x0016
 800c3c8:	fff6001f 	.word	0xfff6001f
 800c3cc:	fff6fff6 	.word	0xfff6fff6
 800c3d0:	001ffff6 	.word	0x001ffff6
 800c3d4:	fff6fff6 	.word	0xfff6fff6
 800c3d8:	fff6fff6 	.word	0xfff6fff6
 800c3dc:	003600a8 	.word	0x003600a8
 800c3e0:	fff6009a 	.word	0xfff6009a
 800c3e4:	00b9fff6 	.word	0x00b9fff6
 800c3e8:	0036fff6 	.word	0x0036fff6
 800c3ec:	fff6fff6 	.word	0xfff6fff6
 800c3f0:	009e      	.short	0x009e
 800c3f2:	0026      	movs	r6, r4
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	3642      	adds	r6, #66	; 0x42
 800c3f8:	1d11      	adds	r1, r2, #4
 800c3fa:	6019      	str	r1, [r3, #0]
 800c3fc:	6813      	ldr	r3, [r2, #0]
 800c3fe:	7033      	strb	r3, [r6, #0]
 800c400:	2301      	movs	r3, #1
 800c402:	e0a7      	b.n	800c554 <_printf_i+0x1cc>
 800c404:	6808      	ldr	r0, [r1, #0]
 800c406:	6819      	ldr	r1, [r3, #0]
 800c408:	1d0a      	adds	r2, r1, #4
 800c40a:	0605      	lsls	r5, r0, #24
 800c40c:	d50b      	bpl.n	800c426 <_printf_i+0x9e>
 800c40e:	680d      	ldr	r5, [r1, #0]
 800c410:	601a      	str	r2, [r3, #0]
 800c412:	2d00      	cmp	r5, #0
 800c414:	da03      	bge.n	800c41e <_printf_i+0x96>
 800c416:	232d      	movs	r3, #45	; 0x2d
 800c418:	9a04      	ldr	r2, [sp, #16]
 800c41a:	426d      	negs	r5, r5
 800c41c:	7013      	strb	r3, [r2, #0]
 800c41e:	4b61      	ldr	r3, [pc, #388]	; (800c5a4 <_printf_i+0x21c>)
 800c420:	270a      	movs	r7, #10
 800c422:	9303      	str	r3, [sp, #12]
 800c424:	e01b      	b.n	800c45e <_printf_i+0xd6>
 800c426:	680d      	ldr	r5, [r1, #0]
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	0641      	lsls	r1, r0, #25
 800c42c:	d5f1      	bpl.n	800c412 <_printf_i+0x8a>
 800c42e:	b22d      	sxth	r5, r5
 800c430:	e7ef      	b.n	800c412 <_printf_i+0x8a>
 800c432:	680d      	ldr	r5, [r1, #0]
 800c434:	6819      	ldr	r1, [r3, #0]
 800c436:	1d08      	adds	r0, r1, #4
 800c438:	6018      	str	r0, [r3, #0]
 800c43a:	062e      	lsls	r6, r5, #24
 800c43c:	d501      	bpl.n	800c442 <_printf_i+0xba>
 800c43e:	680d      	ldr	r5, [r1, #0]
 800c440:	e003      	b.n	800c44a <_printf_i+0xc2>
 800c442:	066d      	lsls	r5, r5, #25
 800c444:	d5fb      	bpl.n	800c43e <_printf_i+0xb6>
 800c446:	680d      	ldr	r5, [r1, #0]
 800c448:	b2ad      	uxth	r5, r5
 800c44a:	4b56      	ldr	r3, [pc, #344]	; (800c5a4 <_printf_i+0x21c>)
 800c44c:	2708      	movs	r7, #8
 800c44e:	9303      	str	r3, [sp, #12]
 800c450:	2a6f      	cmp	r2, #111	; 0x6f
 800c452:	d000      	beq.n	800c456 <_printf_i+0xce>
 800c454:	3702      	adds	r7, #2
 800c456:	0023      	movs	r3, r4
 800c458:	2200      	movs	r2, #0
 800c45a:	3343      	adds	r3, #67	; 0x43
 800c45c:	701a      	strb	r2, [r3, #0]
 800c45e:	6863      	ldr	r3, [r4, #4]
 800c460:	60a3      	str	r3, [r4, #8]
 800c462:	2b00      	cmp	r3, #0
 800c464:	db03      	blt.n	800c46e <_printf_i+0xe6>
 800c466:	2204      	movs	r2, #4
 800c468:	6821      	ldr	r1, [r4, #0]
 800c46a:	4391      	bics	r1, r2
 800c46c:	6021      	str	r1, [r4, #0]
 800c46e:	2d00      	cmp	r5, #0
 800c470:	d102      	bne.n	800c478 <_printf_i+0xf0>
 800c472:	9e04      	ldr	r6, [sp, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00c      	beq.n	800c492 <_printf_i+0x10a>
 800c478:	9e04      	ldr	r6, [sp, #16]
 800c47a:	0028      	movs	r0, r5
 800c47c:	0039      	movs	r1, r7
 800c47e:	f7f3 fed3 	bl	8000228 <__aeabi_uidivmod>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	3e01      	subs	r6, #1
 800c486:	5c5b      	ldrb	r3, [r3, r1]
 800c488:	7033      	strb	r3, [r6, #0]
 800c48a:	002b      	movs	r3, r5
 800c48c:	0005      	movs	r5, r0
 800c48e:	429f      	cmp	r7, r3
 800c490:	d9f3      	bls.n	800c47a <_printf_i+0xf2>
 800c492:	2f08      	cmp	r7, #8
 800c494:	d109      	bne.n	800c4aa <_printf_i+0x122>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	07db      	lsls	r3, r3, #31
 800c49a:	d506      	bpl.n	800c4aa <_printf_i+0x122>
 800c49c:	6863      	ldr	r3, [r4, #4]
 800c49e:	6922      	ldr	r2, [r4, #16]
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	dc02      	bgt.n	800c4aa <_printf_i+0x122>
 800c4a4:	2330      	movs	r3, #48	; 0x30
 800c4a6:	3e01      	subs	r6, #1
 800c4a8:	7033      	strb	r3, [r6, #0]
 800c4aa:	9b04      	ldr	r3, [sp, #16]
 800c4ac:	1b9b      	subs	r3, r3, r6
 800c4ae:	6123      	str	r3, [r4, #16]
 800c4b0:	9b07      	ldr	r3, [sp, #28]
 800c4b2:	0021      	movs	r1, r4
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	9805      	ldr	r0, [sp, #20]
 800c4b8:	9b06      	ldr	r3, [sp, #24]
 800c4ba:	aa09      	add	r2, sp, #36	; 0x24
 800c4bc:	f7ff fef4 	bl	800c2a8 <_printf_common>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d14c      	bne.n	800c55e <_printf_i+0x1d6>
 800c4c4:	2001      	movs	r0, #1
 800c4c6:	4240      	negs	r0, r0
 800c4c8:	b00b      	add	sp, #44	; 0x2c
 800c4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4cc:	3145      	adds	r1, #69	; 0x45
 800c4ce:	700a      	strb	r2, [r1, #0]
 800c4d0:	4a34      	ldr	r2, [pc, #208]	; (800c5a4 <_printf_i+0x21c>)
 800c4d2:	9203      	str	r2, [sp, #12]
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	6821      	ldr	r1, [r4, #0]
 800c4d8:	ca20      	ldmia	r2!, {r5}
 800c4da:	601a      	str	r2, [r3, #0]
 800c4dc:	0608      	lsls	r0, r1, #24
 800c4de:	d516      	bpl.n	800c50e <_printf_i+0x186>
 800c4e0:	07cb      	lsls	r3, r1, #31
 800c4e2:	d502      	bpl.n	800c4ea <_printf_i+0x162>
 800c4e4:	2320      	movs	r3, #32
 800c4e6:	4319      	orrs	r1, r3
 800c4e8:	6021      	str	r1, [r4, #0]
 800c4ea:	2710      	movs	r7, #16
 800c4ec:	2d00      	cmp	r5, #0
 800c4ee:	d1b2      	bne.n	800c456 <_printf_i+0xce>
 800c4f0:	2320      	movs	r3, #32
 800c4f2:	6822      	ldr	r2, [r4, #0]
 800c4f4:	439a      	bics	r2, r3
 800c4f6:	6022      	str	r2, [r4, #0]
 800c4f8:	e7ad      	b.n	800c456 <_printf_i+0xce>
 800c4fa:	2220      	movs	r2, #32
 800c4fc:	6809      	ldr	r1, [r1, #0]
 800c4fe:	430a      	orrs	r2, r1
 800c500:	6022      	str	r2, [r4, #0]
 800c502:	0022      	movs	r2, r4
 800c504:	2178      	movs	r1, #120	; 0x78
 800c506:	3245      	adds	r2, #69	; 0x45
 800c508:	7011      	strb	r1, [r2, #0]
 800c50a:	4a27      	ldr	r2, [pc, #156]	; (800c5a8 <_printf_i+0x220>)
 800c50c:	e7e1      	b.n	800c4d2 <_printf_i+0x14a>
 800c50e:	0648      	lsls	r0, r1, #25
 800c510:	d5e6      	bpl.n	800c4e0 <_printf_i+0x158>
 800c512:	b2ad      	uxth	r5, r5
 800c514:	e7e4      	b.n	800c4e0 <_printf_i+0x158>
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	680d      	ldr	r5, [r1, #0]
 800c51a:	1d10      	adds	r0, r2, #4
 800c51c:	6949      	ldr	r1, [r1, #20]
 800c51e:	6018      	str	r0, [r3, #0]
 800c520:	6813      	ldr	r3, [r2, #0]
 800c522:	062e      	lsls	r6, r5, #24
 800c524:	d501      	bpl.n	800c52a <_printf_i+0x1a2>
 800c526:	6019      	str	r1, [r3, #0]
 800c528:	e002      	b.n	800c530 <_printf_i+0x1a8>
 800c52a:	066d      	lsls	r5, r5, #25
 800c52c:	d5fb      	bpl.n	800c526 <_printf_i+0x19e>
 800c52e:	8019      	strh	r1, [r3, #0]
 800c530:	2300      	movs	r3, #0
 800c532:	9e04      	ldr	r6, [sp, #16]
 800c534:	6123      	str	r3, [r4, #16]
 800c536:	e7bb      	b.n	800c4b0 <_printf_i+0x128>
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	1d11      	adds	r1, r2, #4
 800c53c:	6019      	str	r1, [r3, #0]
 800c53e:	6816      	ldr	r6, [r2, #0]
 800c540:	2100      	movs	r1, #0
 800c542:	0030      	movs	r0, r6
 800c544:	6862      	ldr	r2, [r4, #4]
 800c546:	f000 f831 	bl	800c5ac <memchr>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d001      	beq.n	800c552 <_printf_i+0x1ca>
 800c54e:	1b80      	subs	r0, r0, r6
 800c550:	6060      	str	r0, [r4, #4]
 800c552:	6863      	ldr	r3, [r4, #4]
 800c554:	6123      	str	r3, [r4, #16]
 800c556:	2300      	movs	r3, #0
 800c558:	9a04      	ldr	r2, [sp, #16]
 800c55a:	7013      	strb	r3, [r2, #0]
 800c55c:	e7a8      	b.n	800c4b0 <_printf_i+0x128>
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	0032      	movs	r2, r6
 800c562:	9906      	ldr	r1, [sp, #24]
 800c564:	9805      	ldr	r0, [sp, #20]
 800c566:	9d07      	ldr	r5, [sp, #28]
 800c568:	47a8      	blx	r5
 800c56a:	1c43      	adds	r3, r0, #1
 800c56c:	d0aa      	beq.n	800c4c4 <_printf_i+0x13c>
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	079b      	lsls	r3, r3, #30
 800c572:	d415      	bmi.n	800c5a0 <_printf_i+0x218>
 800c574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c576:	68e0      	ldr	r0, [r4, #12]
 800c578:	4298      	cmp	r0, r3
 800c57a:	daa5      	bge.n	800c4c8 <_printf_i+0x140>
 800c57c:	0018      	movs	r0, r3
 800c57e:	e7a3      	b.n	800c4c8 <_printf_i+0x140>
 800c580:	0022      	movs	r2, r4
 800c582:	2301      	movs	r3, #1
 800c584:	9906      	ldr	r1, [sp, #24]
 800c586:	9805      	ldr	r0, [sp, #20]
 800c588:	9e07      	ldr	r6, [sp, #28]
 800c58a:	3219      	adds	r2, #25
 800c58c:	47b0      	blx	r6
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	d098      	beq.n	800c4c4 <_printf_i+0x13c>
 800c592:	3501      	adds	r5, #1
 800c594:	68e3      	ldr	r3, [r4, #12]
 800c596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c598:	1a9b      	subs	r3, r3, r2
 800c59a:	42ab      	cmp	r3, r5
 800c59c:	dcf0      	bgt.n	800c580 <_printf_i+0x1f8>
 800c59e:	e7e9      	b.n	800c574 <_printf_i+0x1ec>
 800c5a0:	2500      	movs	r5, #0
 800c5a2:	e7f7      	b.n	800c594 <_printf_i+0x20c>
 800c5a4:	0800d09e 	.word	0x0800d09e
 800c5a8:	0800d0af 	.word	0x0800d0af

0800c5ac <memchr>:
 800c5ac:	b2c9      	uxtb	r1, r1
 800c5ae:	1882      	adds	r2, r0, r2
 800c5b0:	4290      	cmp	r0, r2
 800c5b2:	d101      	bne.n	800c5b8 <memchr+0xc>
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	4770      	bx	lr
 800c5b8:	7803      	ldrb	r3, [r0, #0]
 800c5ba:	428b      	cmp	r3, r1
 800c5bc:	d0fb      	beq.n	800c5b6 <memchr+0xa>
 800c5be:	3001      	adds	r0, #1
 800c5c0:	e7f6      	b.n	800c5b0 <memchr+0x4>

0800c5c2 <memcpy>:
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d100      	bne.n	800c5cc <memcpy+0xa>
 800c5ca:	bd10      	pop	{r4, pc}
 800c5cc:	5ccc      	ldrb	r4, [r1, r3]
 800c5ce:	54c4      	strb	r4, [r0, r3]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	e7f8      	b.n	800c5c6 <memcpy+0x4>

0800c5d4 <memmove>:
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	4288      	cmp	r0, r1
 800c5d8:	d902      	bls.n	800c5e0 <memmove+0xc>
 800c5da:	188b      	adds	r3, r1, r2
 800c5dc:	4298      	cmp	r0, r3
 800c5de:	d303      	bcc.n	800c5e8 <memmove+0x14>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	e007      	b.n	800c5f4 <memmove+0x20>
 800c5e4:	5c8b      	ldrb	r3, [r1, r2]
 800c5e6:	5483      	strb	r3, [r0, r2]
 800c5e8:	3a01      	subs	r2, #1
 800c5ea:	d2fb      	bcs.n	800c5e4 <memmove+0x10>
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	5ccc      	ldrb	r4, [r1, r3]
 800c5f0:	54c4      	strb	r4, [r0, r3]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d1fa      	bne.n	800c5ee <memmove+0x1a>
 800c5f8:	e7f8      	b.n	800c5ec <memmove+0x18>
	...

0800c5fc <_free_r>:
 800c5fc:	b570      	push	{r4, r5, r6, lr}
 800c5fe:	0005      	movs	r5, r0
 800c600:	2900      	cmp	r1, #0
 800c602:	d010      	beq.n	800c626 <_free_r+0x2a>
 800c604:	1f0c      	subs	r4, r1, #4
 800c606:	6823      	ldr	r3, [r4, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	da00      	bge.n	800c60e <_free_r+0x12>
 800c60c:	18e4      	adds	r4, r4, r3
 800c60e:	0028      	movs	r0, r5
 800c610:	f000 f918 	bl	800c844 <__malloc_lock>
 800c614:	4a1d      	ldr	r2, [pc, #116]	; (800c68c <_free_r+0x90>)
 800c616:	6813      	ldr	r3, [r2, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d105      	bne.n	800c628 <_free_r+0x2c>
 800c61c:	6063      	str	r3, [r4, #4]
 800c61e:	6014      	str	r4, [r2, #0]
 800c620:	0028      	movs	r0, r5
 800c622:	f000 f917 	bl	800c854 <__malloc_unlock>
 800c626:	bd70      	pop	{r4, r5, r6, pc}
 800c628:	42a3      	cmp	r3, r4
 800c62a:	d908      	bls.n	800c63e <_free_r+0x42>
 800c62c:	6821      	ldr	r1, [r4, #0]
 800c62e:	1860      	adds	r0, r4, r1
 800c630:	4283      	cmp	r3, r0
 800c632:	d1f3      	bne.n	800c61c <_free_r+0x20>
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	1841      	adds	r1, r0, r1
 800c63a:	6021      	str	r1, [r4, #0]
 800c63c:	e7ee      	b.n	800c61c <_free_r+0x20>
 800c63e:	001a      	movs	r2, r3
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <_free_r+0x4e>
 800c646:	42a3      	cmp	r3, r4
 800c648:	d9f9      	bls.n	800c63e <_free_r+0x42>
 800c64a:	6811      	ldr	r1, [r2, #0]
 800c64c:	1850      	adds	r0, r2, r1
 800c64e:	42a0      	cmp	r0, r4
 800c650:	d10b      	bne.n	800c66a <_free_r+0x6e>
 800c652:	6820      	ldr	r0, [r4, #0]
 800c654:	1809      	adds	r1, r1, r0
 800c656:	1850      	adds	r0, r2, r1
 800c658:	6011      	str	r1, [r2, #0]
 800c65a:	4283      	cmp	r3, r0
 800c65c:	d1e0      	bne.n	800c620 <_free_r+0x24>
 800c65e:	6818      	ldr	r0, [r3, #0]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	1841      	adds	r1, r0, r1
 800c664:	6011      	str	r1, [r2, #0]
 800c666:	6053      	str	r3, [r2, #4]
 800c668:	e7da      	b.n	800c620 <_free_r+0x24>
 800c66a:	42a0      	cmp	r0, r4
 800c66c:	d902      	bls.n	800c674 <_free_r+0x78>
 800c66e:	230c      	movs	r3, #12
 800c670:	602b      	str	r3, [r5, #0]
 800c672:	e7d5      	b.n	800c620 <_free_r+0x24>
 800c674:	6821      	ldr	r1, [r4, #0]
 800c676:	1860      	adds	r0, r4, r1
 800c678:	4283      	cmp	r3, r0
 800c67a:	d103      	bne.n	800c684 <_free_r+0x88>
 800c67c:	6818      	ldr	r0, [r3, #0]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	1841      	adds	r1, r0, r1
 800c682:	6021      	str	r1, [r4, #0]
 800c684:	6063      	str	r3, [r4, #4]
 800c686:	6054      	str	r4, [r2, #4]
 800c688:	e7ca      	b.n	800c620 <_free_r+0x24>
 800c68a:	46c0      	nop			; (mov r8, r8)
 800c68c:	200018cc 	.word	0x200018cc

0800c690 <sbrk_aligned>:
 800c690:	b570      	push	{r4, r5, r6, lr}
 800c692:	4e0f      	ldr	r6, [pc, #60]	; (800c6d0 <sbrk_aligned+0x40>)
 800c694:	000d      	movs	r5, r1
 800c696:	6831      	ldr	r1, [r6, #0]
 800c698:	0004      	movs	r4, r0
 800c69a:	2900      	cmp	r1, #0
 800c69c:	d102      	bne.n	800c6a4 <sbrk_aligned+0x14>
 800c69e:	f000 f8bf 	bl	800c820 <_sbrk_r>
 800c6a2:	6030      	str	r0, [r6, #0]
 800c6a4:	0029      	movs	r1, r5
 800c6a6:	0020      	movs	r0, r4
 800c6a8:	f000 f8ba 	bl	800c820 <_sbrk_r>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	d00a      	beq.n	800c6c6 <sbrk_aligned+0x36>
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	1cc5      	adds	r5, r0, #3
 800c6b4:	439d      	bics	r5, r3
 800c6b6:	42a8      	cmp	r0, r5
 800c6b8:	d007      	beq.n	800c6ca <sbrk_aligned+0x3a>
 800c6ba:	1a29      	subs	r1, r5, r0
 800c6bc:	0020      	movs	r0, r4
 800c6be:	f000 f8af 	bl	800c820 <_sbrk_r>
 800c6c2:	1c43      	adds	r3, r0, #1
 800c6c4:	d101      	bne.n	800c6ca <sbrk_aligned+0x3a>
 800c6c6:	2501      	movs	r5, #1
 800c6c8:	426d      	negs	r5, r5
 800c6ca:	0028      	movs	r0, r5
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
 800c6ce:	46c0      	nop			; (mov r8, r8)
 800c6d0:	200018d0 	.word	0x200018d0

0800c6d4 <_malloc_r>:
 800c6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6d6:	2203      	movs	r2, #3
 800c6d8:	1ccb      	adds	r3, r1, #3
 800c6da:	4393      	bics	r3, r2
 800c6dc:	3308      	adds	r3, #8
 800c6de:	0006      	movs	r6, r0
 800c6e0:	001f      	movs	r7, r3
 800c6e2:	2b0c      	cmp	r3, #12
 800c6e4:	d232      	bcs.n	800c74c <_malloc_r+0x78>
 800c6e6:	270c      	movs	r7, #12
 800c6e8:	42b9      	cmp	r1, r7
 800c6ea:	d831      	bhi.n	800c750 <_malloc_r+0x7c>
 800c6ec:	0030      	movs	r0, r6
 800c6ee:	f000 f8a9 	bl	800c844 <__malloc_lock>
 800c6f2:	4d32      	ldr	r5, [pc, #200]	; (800c7bc <_malloc_r+0xe8>)
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	001c      	movs	r4, r3
 800c6f8:	2c00      	cmp	r4, #0
 800c6fa:	d12e      	bne.n	800c75a <_malloc_r+0x86>
 800c6fc:	0039      	movs	r1, r7
 800c6fe:	0030      	movs	r0, r6
 800c700:	f7ff ffc6 	bl	800c690 <sbrk_aligned>
 800c704:	0004      	movs	r4, r0
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	d11e      	bne.n	800c748 <_malloc_r+0x74>
 800c70a:	682c      	ldr	r4, [r5, #0]
 800c70c:	0025      	movs	r5, r4
 800c70e:	2d00      	cmp	r5, #0
 800c710:	d14a      	bne.n	800c7a8 <_malloc_r+0xd4>
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	0029      	movs	r1, r5
 800c716:	18e3      	adds	r3, r4, r3
 800c718:	0030      	movs	r0, r6
 800c71a:	9301      	str	r3, [sp, #4]
 800c71c:	f000 f880 	bl	800c820 <_sbrk_r>
 800c720:	9b01      	ldr	r3, [sp, #4]
 800c722:	4283      	cmp	r3, r0
 800c724:	d143      	bne.n	800c7ae <_malloc_r+0xda>
 800c726:	6823      	ldr	r3, [r4, #0]
 800c728:	3703      	adds	r7, #3
 800c72a:	1aff      	subs	r7, r7, r3
 800c72c:	2303      	movs	r3, #3
 800c72e:	439f      	bics	r7, r3
 800c730:	3708      	adds	r7, #8
 800c732:	2f0c      	cmp	r7, #12
 800c734:	d200      	bcs.n	800c738 <_malloc_r+0x64>
 800c736:	270c      	movs	r7, #12
 800c738:	0039      	movs	r1, r7
 800c73a:	0030      	movs	r0, r6
 800c73c:	f7ff ffa8 	bl	800c690 <sbrk_aligned>
 800c740:	1c43      	adds	r3, r0, #1
 800c742:	d034      	beq.n	800c7ae <_malloc_r+0xda>
 800c744:	6823      	ldr	r3, [r4, #0]
 800c746:	19df      	adds	r7, r3, r7
 800c748:	6027      	str	r7, [r4, #0]
 800c74a:	e013      	b.n	800c774 <_malloc_r+0xa0>
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	dacb      	bge.n	800c6e8 <_malloc_r+0x14>
 800c750:	230c      	movs	r3, #12
 800c752:	2500      	movs	r5, #0
 800c754:	6033      	str	r3, [r6, #0]
 800c756:	0028      	movs	r0, r5
 800c758:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c75a:	6822      	ldr	r2, [r4, #0]
 800c75c:	1bd1      	subs	r1, r2, r7
 800c75e:	d420      	bmi.n	800c7a2 <_malloc_r+0xce>
 800c760:	290b      	cmp	r1, #11
 800c762:	d917      	bls.n	800c794 <_malloc_r+0xc0>
 800c764:	19e2      	adds	r2, r4, r7
 800c766:	6027      	str	r7, [r4, #0]
 800c768:	42a3      	cmp	r3, r4
 800c76a:	d111      	bne.n	800c790 <_malloc_r+0xbc>
 800c76c:	602a      	str	r2, [r5, #0]
 800c76e:	6863      	ldr	r3, [r4, #4]
 800c770:	6011      	str	r1, [r2, #0]
 800c772:	6053      	str	r3, [r2, #4]
 800c774:	0030      	movs	r0, r6
 800c776:	0025      	movs	r5, r4
 800c778:	f000 f86c 	bl	800c854 <__malloc_unlock>
 800c77c:	2207      	movs	r2, #7
 800c77e:	350b      	adds	r5, #11
 800c780:	1d23      	adds	r3, r4, #4
 800c782:	4395      	bics	r5, r2
 800c784:	1aea      	subs	r2, r5, r3
 800c786:	429d      	cmp	r5, r3
 800c788:	d0e5      	beq.n	800c756 <_malloc_r+0x82>
 800c78a:	1b5b      	subs	r3, r3, r5
 800c78c:	50a3      	str	r3, [r4, r2]
 800c78e:	e7e2      	b.n	800c756 <_malloc_r+0x82>
 800c790:	605a      	str	r2, [r3, #4]
 800c792:	e7ec      	b.n	800c76e <_malloc_r+0x9a>
 800c794:	6862      	ldr	r2, [r4, #4]
 800c796:	42a3      	cmp	r3, r4
 800c798:	d101      	bne.n	800c79e <_malloc_r+0xca>
 800c79a:	602a      	str	r2, [r5, #0]
 800c79c:	e7ea      	b.n	800c774 <_malloc_r+0xa0>
 800c79e:	605a      	str	r2, [r3, #4]
 800c7a0:	e7e8      	b.n	800c774 <_malloc_r+0xa0>
 800c7a2:	0023      	movs	r3, r4
 800c7a4:	6864      	ldr	r4, [r4, #4]
 800c7a6:	e7a7      	b.n	800c6f8 <_malloc_r+0x24>
 800c7a8:	002c      	movs	r4, r5
 800c7aa:	686d      	ldr	r5, [r5, #4]
 800c7ac:	e7af      	b.n	800c70e <_malloc_r+0x3a>
 800c7ae:	230c      	movs	r3, #12
 800c7b0:	0030      	movs	r0, r6
 800c7b2:	6033      	str	r3, [r6, #0]
 800c7b4:	f000 f84e 	bl	800c854 <__malloc_unlock>
 800c7b8:	e7cd      	b.n	800c756 <_malloc_r+0x82>
 800c7ba:	46c0      	nop			; (mov r8, r8)
 800c7bc:	200018cc 	.word	0x200018cc

0800c7c0 <_realloc_r>:
 800c7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7c2:	0007      	movs	r7, r0
 800c7c4:	000e      	movs	r6, r1
 800c7c6:	0014      	movs	r4, r2
 800c7c8:	2900      	cmp	r1, #0
 800c7ca:	d105      	bne.n	800c7d8 <_realloc_r+0x18>
 800c7cc:	0011      	movs	r1, r2
 800c7ce:	f7ff ff81 	bl	800c6d4 <_malloc_r>
 800c7d2:	0005      	movs	r5, r0
 800c7d4:	0028      	movs	r0, r5
 800c7d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7d8:	2a00      	cmp	r2, #0
 800c7da:	d103      	bne.n	800c7e4 <_realloc_r+0x24>
 800c7dc:	f7ff ff0e 	bl	800c5fc <_free_r>
 800c7e0:	0025      	movs	r5, r4
 800c7e2:	e7f7      	b.n	800c7d4 <_realloc_r+0x14>
 800c7e4:	f000 f83e 	bl	800c864 <_malloc_usable_size_r>
 800c7e8:	9001      	str	r0, [sp, #4]
 800c7ea:	4284      	cmp	r4, r0
 800c7ec:	d803      	bhi.n	800c7f6 <_realloc_r+0x36>
 800c7ee:	0035      	movs	r5, r6
 800c7f0:	0843      	lsrs	r3, r0, #1
 800c7f2:	42a3      	cmp	r3, r4
 800c7f4:	d3ee      	bcc.n	800c7d4 <_realloc_r+0x14>
 800c7f6:	0021      	movs	r1, r4
 800c7f8:	0038      	movs	r0, r7
 800c7fa:	f7ff ff6b 	bl	800c6d4 <_malloc_r>
 800c7fe:	1e05      	subs	r5, r0, #0
 800c800:	d0e8      	beq.n	800c7d4 <_realloc_r+0x14>
 800c802:	9b01      	ldr	r3, [sp, #4]
 800c804:	0022      	movs	r2, r4
 800c806:	429c      	cmp	r4, r3
 800c808:	d900      	bls.n	800c80c <_realloc_r+0x4c>
 800c80a:	001a      	movs	r2, r3
 800c80c:	0031      	movs	r1, r6
 800c80e:	0028      	movs	r0, r5
 800c810:	f7ff fed7 	bl	800c5c2 <memcpy>
 800c814:	0031      	movs	r1, r6
 800c816:	0038      	movs	r0, r7
 800c818:	f7ff fef0 	bl	800c5fc <_free_r>
 800c81c:	e7da      	b.n	800c7d4 <_realloc_r+0x14>
	...

0800c820 <_sbrk_r>:
 800c820:	2300      	movs	r3, #0
 800c822:	b570      	push	{r4, r5, r6, lr}
 800c824:	4d06      	ldr	r5, [pc, #24]	; (800c840 <_sbrk_r+0x20>)
 800c826:	0004      	movs	r4, r0
 800c828:	0008      	movs	r0, r1
 800c82a:	602b      	str	r3, [r5, #0]
 800c82c:	f7f8 fb46 	bl	8004ebc <_sbrk>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d103      	bne.n	800c83c <_sbrk_r+0x1c>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d000      	beq.n	800c83c <_sbrk_r+0x1c>
 800c83a:	6023      	str	r3, [r4, #0]
 800c83c:	bd70      	pop	{r4, r5, r6, pc}
 800c83e:	46c0      	nop			; (mov r8, r8)
 800c840:	200018d4 	.word	0x200018d4

0800c844 <__malloc_lock>:
 800c844:	b510      	push	{r4, lr}
 800c846:	4802      	ldr	r0, [pc, #8]	; (800c850 <__malloc_lock+0xc>)
 800c848:	f000 f814 	bl	800c874 <__retarget_lock_acquire_recursive>
 800c84c:	bd10      	pop	{r4, pc}
 800c84e:	46c0      	nop			; (mov r8, r8)
 800c850:	200018d8 	.word	0x200018d8

0800c854 <__malloc_unlock>:
 800c854:	b510      	push	{r4, lr}
 800c856:	4802      	ldr	r0, [pc, #8]	; (800c860 <__malloc_unlock+0xc>)
 800c858:	f000 f80d 	bl	800c876 <__retarget_lock_release_recursive>
 800c85c:	bd10      	pop	{r4, pc}
 800c85e:	46c0      	nop			; (mov r8, r8)
 800c860:	200018d8 	.word	0x200018d8

0800c864 <_malloc_usable_size_r>:
 800c864:	1f0b      	subs	r3, r1, #4
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	1f18      	subs	r0, r3, #4
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	da01      	bge.n	800c872 <_malloc_usable_size_r+0xe>
 800c86e:	580b      	ldr	r3, [r1, r0]
 800c870:	18c0      	adds	r0, r0, r3
 800c872:	4770      	bx	lr

0800c874 <__retarget_lock_acquire_recursive>:
 800c874:	4770      	bx	lr

0800c876 <__retarget_lock_release_recursive>:
 800c876:	4770      	bx	lr

0800c878 <log>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	0004      	movs	r4, r0
 800c87c:	000d      	movs	r5, r1
 800c87e:	f000 f831 	bl	800c8e4 <__ieee754_log>
 800c882:	0022      	movs	r2, r4
 800c884:	0006      	movs	r6, r0
 800c886:	000f      	movs	r7, r1
 800c888:	002b      	movs	r3, r5
 800c88a:	0020      	movs	r0, r4
 800c88c:	0029      	movs	r1, r5
 800c88e:	f7f6 fa91 	bl	8002db4 <__aeabi_dcmpun>
 800c892:	2800      	cmp	r0, #0
 800c894:	d115      	bne.n	800c8c2 <log+0x4a>
 800c896:	2200      	movs	r2, #0
 800c898:	2300      	movs	r3, #0
 800c89a:	0020      	movs	r0, r4
 800c89c:	0029      	movs	r1, r5
 800c89e:	f7f3 fcf3 	bl	8000288 <__aeabi_dcmpgt>
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	d10d      	bne.n	800c8c2 <log+0x4a>
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	0020      	movs	r0, r4
 800c8ac:	0029      	movs	r1, r5
 800c8ae:	f7f3 fcd1 	bl	8000254 <__aeabi_dcmpeq>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d008      	beq.n	800c8c8 <log+0x50>
 800c8b6:	f7ff fa93 	bl	800bde0 <__errno>
 800c8ba:	2322      	movs	r3, #34	; 0x22
 800c8bc:	2600      	movs	r6, #0
 800c8be:	4f07      	ldr	r7, [pc, #28]	; (800c8dc <log+0x64>)
 800c8c0:	6003      	str	r3, [r0, #0]
 800c8c2:	0030      	movs	r0, r6
 800c8c4:	0039      	movs	r1, r7
 800c8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8c8:	f7ff fa8a 	bl	800bde0 <__errno>
 800c8cc:	2321      	movs	r3, #33	; 0x21
 800c8ce:	6003      	str	r3, [r0, #0]
 800c8d0:	4803      	ldr	r0, [pc, #12]	; (800c8e0 <log+0x68>)
 800c8d2:	f000 f9b7 	bl	800cc44 <nan>
 800c8d6:	0006      	movs	r6, r0
 800c8d8:	000f      	movs	r7, r1
 800c8da:	e7f2      	b.n	800c8c2 <log+0x4a>
 800c8dc:	fff00000 	.word	0xfff00000
 800c8e0:	0800d092 	.word	0x0800d092

0800c8e4 <__ieee754_log>:
 800c8e4:	2280      	movs	r2, #128	; 0x80
 800c8e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8e8:	000b      	movs	r3, r1
 800c8ea:	b08d      	sub	sp, #52	; 0x34
 800c8ec:	0352      	lsls	r2, r2, #13
 800c8ee:	4291      	cmp	r1, r2
 800c8f0:	da22      	bge.n	800c938 <__ieee754_log+0x54>
 800c8f2:	004a      	lsls	r2, r1, #1
 800c8f4:	0852      	lsrs	r2, r2, #1
 800c8f6:	4302      	orrs	r2, r0
 800c8f8:	d107      	bne.n	800c90a <__ieee754_log+0x26>
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	2000      	movs	r0, #0
 800c900:	49b3      	ldr	r1, [pc, #716]	; (800cbd0 <__ieee754_log+0x2ec>)
 800c902:	f7f5 f857 	bl	80019b4 <__aeabi_ddiv>
 800c906:	b00d      	add	sp, #52	; 0x34
 800c908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c90a:	2900      	cmp	r1, #0
 800c90c:	da05      	bge.n	800c91a <__ieee754_log+0x36>
 800c90e:	0002      	movs	r2, r0
 800c910:	f7f5 febe 	bl	8002690 <__aeabi_dsub>
 800c914:	2200      	movs	r2, #0
 800c916:	2300      	movs	r3, #0
 800c918:	e7f3      	b.n	800c902 <__ieee754_log+0x1e>
 800c91a:	4bae      	ldr	r3, [pc, #696]	; (800cbd4 <__ieee754_log+0x2f0>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	f7f5 fc4b 	bl	80021b8 <__aeabi_dmul>
 800c922:	2436      	movs	r4, #54	; 0x36
 800c924:	000b      	movs	r3, r1
 800c926:	4264      	negs	r4, r4
 800c928:	4aab      	ldr	r2, [pc, #684]	; (800cbd8 <__ieee754_log+0x2f4>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	dd06      	ble.n	800c93c <__ieee754_log+0x58>
 800c92e:	0002      	movs	r2, r0
 800c930:	000b      	movs	r3, r1
 800c932:	f7f4 fd03 	bl	800133c <__aeabi_dadd>
 800c936:	e7e6      	b.n	800c906 <__ieee754_log+0x22>
 800c938:	2400      	movs	r4, #0
 800c93a:	e7f5      	b.n	800c928 <__ieee754_log+0x44>
 800c93c:	4da7      	ldr	r5, [pc, #668]	; (800cbdc <__ieee754_log+0x2f8>)
 800c93e:	151a      	asrs	r2, r3, #20
 800c940:	1952      	adds	r2, r2, r5
 800c942:	1912      	adds	r2, r2, r4
 800c944:	031b      	lsls	r3, r3, #12
 800c946:	4ca6      	ldr	r4, [pc, #664]	; (800cbe0 <__ieee754_log+0x2fc>)
 800c948:	0b1b      	lsrs	r3, r3, #12
 800c94a:	9302      	str	r3, [sp, #8]
 800c94c:	191c      	adds	r4, r3, r4
 800c94e:	2380      	movs	r3, #128	; 0x80
 800c950:	035b      	lsls	r3, r3, #13
 800c952:	4023      	ands	r3, r4
 800c954:	4ca3      	ldr	r4, [pc, #652]	; (800cbe4 <__ieee754_log+0x300>)
 800c956:	9d02      	ldr	r5, [sp, #8]
 800c958:	405c      	eors	r4, r3
 800c95a:	151b      	asrs	r3, r3, #20
 800c95c:	189b      	adds	r3, r3, r2
 800c95e:	4325      	orrs	r5, r4
 800c960:	2200      	movs	r2, #0
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	0029      	movs	r1, r5
 800c966:	4b9f      	ldr	r3, [pc, #636]	; (800cbe4 <__ieee754_log+0x300>)
 800c968:	f7f5 fe92 	bl	8002690 <__aeabi_dsub>
 800c96c:	9b02      	ldr	r3, [sp, #8]
 800c96e:	0006      	movs	r6, r0
 800c970:	3302      	adds	r3, #2
 800c972:	031b      	lsls	r3, r3, #12
 800c974:	000f      	movs	r7, r1
 800c976:	2200      	movs	r2, #0
 800c978:	0b1b      	lsrs	r3, r3, #12
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	dc64      	bgt.n	800ca48 <__ieee754_log+0x164>
 800c97e:	2300      	movs	r3, #0
 800c980:	f7f3 fc68 	bl	8000254 <__aeabi_dcmpeq>
 800c984:	2800      	cmp	r0, #0
 800c986:	d019      	beq.n	800c9bc <__ieee754_log+0xd8>
 800c988:	9b00      	ldr	r3, [sp, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d100      	bne.n	800c990 <__ieee754_log+0xac>
 800c98e:	e11c      	b.n	800cbca <__ieee754_log+0x2e6>
 800c990:	0018      	movs	r0, r3
 800c992:	f7f6 fa63 	bl	8002e5c <__aeabi_i2d>
 800c996:	4a94      	ldr	r2, [pc, #592]	; (800cbe8 <__ieee754_log+0x304>)
 800c998:	4b94      	ldr	r3, [pc, #592]	; (800cbec <__ieee754_log+0x308>)
 800c99a:	0004      	movs	r4, r0
 800c99c:	000d      	movs	r5, r1
 800c99e:	f7f5 fc0b 	bl	80021b8 <__aeabi_dmul>
 800c9a2:	4a93      	ldr	r2, [pc, #588]	; (800cbf0 <__ieee754_log+0x30c>)
 800c9a4:	0006      	movs	r6, r0
 800c9a6:	000f      	movs	r7, r1
 800c9a8:	4b92      	ldr	r3, [pc, #584]	; (800cbf4 <__ieee754_log+0x310>)
 800c9aa:	0020      	movs	r0, r4
 800c9ac:	0029      	movs	r1, r5
 800c9ae:	f7f5 fc03 	bl	80021b8 <__aeabi_dmul>
 800c9b2:	0002      	movs	r2, r0
 800c9b4:	000b      	movs	r3, r1
 800c9b6:	0030      	movs	r0, r6
 800c9b8:	0039      	movs	r1, r7
 800c9ba:	e7ba      	b.n	800c932 <__ieee754_log+0x4e>
 800c9bc:	4a8e      	ldr	r2, [pc, #568]	; (800cbf8 <__ieee754_log+0x314>)
 800c9be:	4b8f      	ldr	r3, [pc, #572]	; (800cbfc <__ieee754_log+0x318>)
 800c9c0:	0030      	movs	r0, r6
 800c9c2:	0039      	movs	r1, r7
 800c9c4:	f7f5 fbf8 	bl	80021b8 <__aeabi_dmul>
 800c9c8:	0002      	movs	r2, r0
 800c9ca:	000b      	movs	r3, r1
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	498c      	ldr	r1, [pc, #560]	; (800cc00 <__ieee754_log+0x31c>)
 800c9d0:	f7f5 fe5e 	bl	8002690 <__aeabi_dsub>
 800c9d4:	0032      	movs	r2, r6
 800c9d6:	0004      	movs	r4, r0
 800c9d8:	000d      	movs	r5, r1
 800c9da:	003b      	movs	r3, r7
 800c9dc:	0030      	movs	r0, r6
 800c9de:	0039      	movs	r1, r7
 800c9e0:	f7f5 fbea 	bl	80021b8 <__aeabi_dmul>
 800c9e4:	000b      	movs	r3, r1
 800c9e6:	0002      	movs	r2, r0
 800c9e8:	0029      	movs	r1, r5
 800c9ea:	0020      	movs	r0, r4
 800c9ec:	f7f5 fbe4 	bl	80021b8 <__aeabi_dmul>
 800c9f0:	9b00      	ldr	r3, [sp, #0]
 800c9f2:	9002      	str	r0, [sp, #8]
 800c9f4:	9103      	str	r1, [sp, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d106      	bne.n	800ca08 <__ieee754_log+0x124>
 800c9fa:	0002      	movs	r2, r0
 800c9fc:	000b      	movs	r3, r1
 800c9fe:	0030      	movs	r0, r6
 800ca00:	0039      	movs	r1, r7
 800ca02:	f7f5 fe45 	bl	8002690 <__aeabi_dsub>
 800ca06:	e77e      	b.n	800c906 <__ieee754_log+0x22>
 800ca08:	9800      	ldr	r0, [sp, #0]
 800ca0a:	f7f6 fa27 	bl	8002e5c <__aeabi_i2d>
 800ca0e:	4a76      	ldr	r2, [pc, #472]	; (800cbe8 <__ieee754_log+0x304>)
 800ca10:	4b76      	ldr	r3, [pc, #472]	; (800cbec <__ieee754_log+0x308>)
 800ca12:	0004      	movs	r4, r0
 800ca14:	000d      	movs	r5, r1
 800ca16:	f7f5 fbcf 	bl	80021b8 <__aeabi_dmul>
 800ca1a:	4a75      	ldr	r2, [pc, #468]	; (800cbf0 <__ieee754_log+0x30c>)
 800ca1c:	9000      	str	r0, [sp, #0]
 800ca1e:	9101      	str	r1, [sp, #4]
 800ca20:	4b74      	ldr	r3, [pc, #464]	; (800cbf4 <__ieee754_log+0x310>)
 800ca22:	0020      	movs	r0, r4
 800ca24:	0029      	movs	r1, r5
 800ca26:	f7f5 fbc7 	bl	80021b8 <__aeabi_dmul>
 800ca2a:	0002      	movs	r2, r0
 800ca2c:	000b      	movs	r3, r1
 800ca2e:	9802      	ldr	r0, [sp, #8]
 800ca30:	9903      	ldr	r1, [sp, #12]
 800ca32:	f7f5 fe2d 	bl	8002690 <__aeabi_dsub>
 800ca36:	0032      	movs	r2, r6
 800ca38:	003b      	movs	r3, r7
 800ca3a:	f7f5 fe29 	bl	8002690 <__aeabi_dsub>
 800ca3e:	0002      	movs	r2, r0
 800ca40:	000b      	movs	r3, r1
 800ca42:	9800      	ldr	r0, [sp, #0]
 800ca44:	9901      	ldr	r1, [sp, #4]
 800ca46:	e7dc      	b.n	800ca02 <__ieee754_log+0x11e>
 800ca48:	2380      	movs	r3, #128	; 0x80
 800ca4a:	05db      	lsls	r3, r3, #23
 800ca4c:	f7f4 fc76 	bl	800133c <__aeabi_dadd>
 800ca50:	0002      	movs	r2, r0
 800ca52:	000b      	movs	r3, r1
 800ca54:	0030      	movs	r0, r6
 800ca56:	0039      	movs	r1, r7
 800ca58:	f7f4 ffac 	bl	80019b4 <__aeabi_ddiv>
 800ca5c:	9004      	str	r0, [sp, #16]
 800ca5e:	9105      	str	r1, [sp, #20]
 800ca60:	9800      	ldr	r0, [sp, #0]
 800ca62:	f7f6 f9fb 	bl	8002e5c <__aeabi_i2d>
 800ca66:	9a04      	ldr	r2, [sp, #16]
 800ca68:	9b05      	ldr	r3, [sp, #20]
 800ca6a:	9006      	str	r0, [sp, #24]
 800ca6c:	9107      	str	r1, [sp, #28]
 800ca6e:	0010      	movs	r0, r2
 800ca70:	0019      	movs	r1, r3
 800ca72:	f7f5 fba1 	bl	80021b8 <__aeabi_dmul>
 800ca76:	4a63      	ldr	r2, [pc, #396]	; (800cc04 <__ieee754_log+0x320>)
 800ca78:	9b02      	ldr	r3, [sp, #8]
 800ca7a:	4694      	mov	ip, r2
 800ca7c:	4463      	add	r3, ip
 800ca7e:	0002      	movs	r2, r0
 800ca80:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca82:	000b      	movs	r3, r1
 800ca84:	9008      	str	r0, [sp, #32]
 800ca86:	9109      	str	r1, [sp, #36]	; 0x24
 800ca88:	f7f5 fb96 	bl	80021b8 <__aeabi_dmul>
 800ca8c:	0004      	movs	r4, r0
 800ca8e:	000d      	movs	r5, r1
 800ca90:	4a5d      	ldr	r2, [pc, #372]	; (800cc08 <__ieee754_log+0x324>)
 800ca92:	4b5e      	ldr	r3, [pc, #376]	; (800cc0c <__ieee754_log+0x328>)
 800ca94:	f7f5 fb90 	bl	80021b8 <__aeabi_dmul>
 800ca98:	4a5d      	ldr	r2, [pc, #372]	; (800cc10 <__ieee754_log+0x32c>)
 800ca9a:	4b5e      	ldr	r3, [pc, #376]	; (800cc14 <__ieee754_log+0x330>)
 800ca9c:	f7f4 fc4e 	bl	800133c <__aeabi_dadd>
 800caa0:	0022      	movs	r2, r4
 800caa2:	002b      	movs	r3, r5
 800caa4:	f7f5 fb88 	bl	80021b8 <__aeabi_dmul>
 800caa8:	4a5b      	ldr	r2, [pc, #364]	; (800cc18 <__ieee754_log+0x334>)
 800caaa:	4b5c      	ldr	r3, [pc, #368]	; (800cc1c <__ieee754_log+0x338>)
 800caac:	f7f4 fc46 	bl	800133c <__aeabi_dadd>
 800cab0:	0022      	movs	r2, r4
 800cab2:	002b      	movs	r3, r5
 800cab4:	f7f5 fb80 	bl	80021b8 <__aeabi_dmul>
 800cab8:	4a59      	ldr	r2, [pc, #356]	; (800cc20 <__ieee754_log+0x33c>)
 800caba:	4b5a      	ldr	r3, [pc, #360]	; (800cc24 <__ieee754_log+0x340>)
 800cabc:	f7f4 fc3e 	bl	800133c <__aeabi_dadd>
 800cac0:	9a08      	ldr	r2, [sp, #32]
 800cac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac4:	f7f5 fb78 	bl	80021b8 <__aeabi_dmul>
 800cac8:	4a57      	ldr	r2, [pc, #348]	; (800cc28 <__ieee754_log+0x344>)
 800caca:	9008      	str	r0, [sp, #32]
 800cacc:	9109      	str	r1, [sp, #36]	; 0x24
 800cace:	4b57      	ldr	r3, [pc, #348]	; (800cc2c <__ieee754_log+0x348>)
 800cad0:	0020      	movs	r0, r4
 800cad2:	0029      	movs	r1, r5
 800cad4:	f7f5 fb70 	bl	80021b8 <__aeabi_dmul>
 800cad8:	4a55      	ldr	r2, [pc, #340]	; (800cc30 <__ieee754_log+0x34c>)
 800cada:	4b56      	ldr	r3, [pc, #344]	; (800cc34 <__ieee754_log+0x350>)
 800cadc:	f7f4 fc2e 	bl	800133c <__aeabi_dadd>
 800cae0:	0022      	movs	r2, r4
 800cae2:	002b      	movs	r3, r5
 800cae4:	f7f5 fb68 	bl	80021b8 <__aeabi_dmul>
 800cae8:	4a53      	ldr	r2, [pc, #332]	; (800cc38 <__ieee754_log+0x354>)
 800caea:	4b54      	ldr	r3, [pc, #336]	; (800cc3c <__ieee754_log+0x358>)
 800caec:	f7f4 fc26 	bl	800133c <__aeabi_dadd>
 800caf0:	0022      	movs	r2, r4
 800caf2:	002b      	movs	r3, r5
 800caf4:	f7f5 fb60 	bl	80021b8 <__aeabi_dmul>
 800caf8:	0002      	movs	r2, r0
 800cafa:	000b      	movs	r3, r1
 800cafc:	9808      	ldr	r0, [sp, #32]
 800cafe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb00:	f7f4 fc1c 	bl	800133c <__aeabi_dadd>
 800cb04:	9a02      	ldr	r2, [sp, #8]
 800cb06:	4b4e      	ldr	r3, [pc, #312]	; (800cc40 <__ieee754_log+0x35c>)
 800cb08:	0004      	movs	r4, r0
 800cb0a:	1a9b      	subs	r3, r3, r2
 800cb0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb0e:	000d      	movs	r5, r1
 800cb10:	4313      	orrs	r3, r2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	dd34      	ble.n	800cb80 <__ieee754_log+0x29c>
 800cb16:	2200      	movs	r2, #0
 800cb18:	4b39      	ldr	r3, [pc, #228]	; (800cc00 <__ieee754_log+0x31c>)
 800cb1a:	0030      	movs	r0, r6
 800cb1c:	0039      	movs	r1, r7
 800cb1e:	f7f5 fb4b 	bl	80021b8 <__aeabi_dmul>
 800cb22:	0032      	movs	r2, r6
 800cb24:	003b      	movs	r3, r7
 800cb26:	f7f5 fb47 	bl	80021b8 <__aeabi_dmul>
 800cb2a:	0002      	movs	r2, r0
 800cb2c:	000b      	movs	r3, r1
 800cb2e:	9002      	str	r0, [sp, #8]
 800cb30:	9103      	str	r1, [sp, #12]
 800cb32:	0020      	movs	r0, r4
 800cb34:	0029      	movs	r1, r5
 800cb36:	f7f4 fc01 	bl	800133c <__aeabi_dadd>
 800cb3a:	9a04      	ldr	r2, [sp, #16]
 800cb3c:	9b05      	ldr	r3, [sp, #20]
 800cb3e:	f7f5 fb3b 	bl	80021b8 <__aeabi_dmul>
 800cb42:	9b00      	ldr	r3, [sp, #0]
 800cb44:	0004      	movs	r4, r0
 800cb46:	000d      	movs	r5, r1
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d106      	bne.n	800cb5a <__ieee754_log+0x276>
 800cb4c:	0002      	movs	r2, r0
 800cb4e:	000b      	movs	r3, r1
 800cb50:	9802      	ldr	r0, [sp, #8]
 800cb52:	9903      	ldr	r1, [sp, #12]
 800cb54:	f7f5 fd9c 	bl	8002690 <__aeabi_dsub>
 800cb58:	e74f      	b.n	800c9fa <__ieee754_log+0x116>
 800cb5a:	4a23      	ldr	r2, [pc, #140]	; (800cbe8 <__ieee754_log+0x304>)
 800cb5c:	4b23      	ldr	r3, [pc, #140]	; (800cbec <__ieee754_log+0x308>)
 800cb5e:	9806      	ldr	r0, [sp, #24]
 800cb60:	9907      	ldr	r1, [sp, #28]
 800cb62:	f7f5 fb29 	bl	80021b8 <__aeabi_dmul>
 800cb66:	4a22      	ldr	r2, [pc, #136]	; (800cbf0 <__ieee754_log+0x30c>)
 800cb68:	9000      	str	r0, [sp, #0]
 800cb6a:	9101      	str	r1, [sp, #4]
 800cb6c:	9806      	ldr	r0, [sp, #24]
 800cb6e:	9907      	ldr	r1, [sp, #28]
 800cb70:	4b20      	ldr	r3, [pc, #128]	; (800cbf4 <__ieee754_log+0x310>)
 800cb72:	f7f5 fb21 	bl	80021b8 <__aeabi_dmul>
 800cb76:	0022      	movs	r2, r4
 800cb78:	002b      	movs	r3, r5
 800cb7a:	f7f4 fbdf 	bl	800133c <__aeabi_dadd>
 800cb7e:	e754      	b.n	800ca2a <__ieee754_log+0x146>
 800cb80:	0002      	movs	r2, r0
 800cb82:	000b      	movs	r3, r1
 800cb84:	0030      	movs	r0, r6
 800cb86:	0039      	movs	r1, r7
 800cb88:	f7f5 fd82 	bl	8002690 <__aeabi_dsub>
 800cb8c:	9a04      	ldr	r2, [sp, #16]
 800cb8e:	9b05      	ldr	r3, [sp, #20]
 800cb90:	f7f5 fb12 	bl	80021b8 <__aeabi_dmul>
 800cb94:	9b00      	ldr	r3, [sp, #0]
 800cb96:	0004      	movs	r4, r0
 800cb98:	000d      	movs	r5, r1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d102      	bne.n	800cba4 <__ieee754_log+0x2c0>
 800cb9e:	0002      	movs	r2, r0
 800cba0:	000b      	movs	r3, r1
 800cba2:	e72c      	b.n	800c9fe <__ieee754_log+0x11a>
 800cba4:	4a10      	ldr	r2, [pc, #64]	; (800cbe8 <__ieee754_log+0x304>)
 800cba6:	4b11      	ldr	r3, [pc, #68]	; (800cbec <__ieee754_log+0x308>)
 800cba8:	9806      	ldr	r0, [sp, #24]
 800cbaa:	9907      	ldr	r1, [sp, #28]
 800cbac:	f7f5 fb04 	bl	80021b8 <__aeabi_dmul>
 800cbb0:	4a0f      	ldr	r2, [pc, #60]	; (800cbf0 <__ieee754_log+0x30c>)
 800cbb2:	9000      	str	r0, [sp, #0]
 800cbb4:	9101      	str	r1, [sp, #4]
 800cbb6:	9806      	ldr	r0, [sp, #24]
 800cbb8:	9907      	ldr	r1, [sp, #28]
 800cbba:	4b0e      	ldr	r3, [pc, #56]	; (800cbf4 <__ieee754_log+0x310>)
 800cbbc:	f7f5 fafc 	bl	80021b8 <__aeabi_dmul>
 800cbc0:	0002      	movs	r2, r0
 800cbc2:	000b      	movs	r3, r1
 800cbc4:	0020      	movs	r0, r4
 800cbc6:	0029      	movs	r1, r5
 800cbc8:	e733      	b.n	800ca32 <__ieee754_log+0x14e>
 800cbca:	2000      	movs	r0, #0
 800cbcc:	2100      	movs	r1, #0
 800cbce:	e69a      	b.n	800c906 <__ieee754_log+0x22>
 800cbd0:	c3500000 	.word	0xc3500000
 800cbd4:	43500000 	.word	0x43500000
 800cbd8:	7fefffff 	.word	0x7fefffff
 800cbdc:	fffffc01 	.word	0xfffffc01
 800cbe0:	00095f64 	.word	0x00095f64
 800cbe4:	3ff00000 	.word	0x3ff00000
 800cbe8:	fee00000 	.word	0xfee00000
 800cbec:	3fe62e42 	.word	0x3fe62e42
 800cbf0:	35793c76 	.word	0x35793c76
 800cbf4:	3dea39ef 	.word	0x3dea39ef
 800cbf8:	55555555 	.word	0x55555555
 800cbfc:	3fd55555 	.word	0x3fd55555
 800cc00:	3fe00000 	.word	0x3fe00000
 800cc04:	fff9eb86 	.word	0xfff9eb86
 800cc08:	df3e5244 	.word	0xdf3e5244
 800cc0c:	3fc2f112 	.word	0x3fc2f112
 800cc10:	96cb03de 	.word	0x96cb03de
 800cc14:	3fc74664 	.word	0x3fc74664
 800cc18:	94229359 	.word	0x94229359
 800cc1c:	3fd24924 	.word	0x3fd24924
 800cc20:	55555593 	.word	0x55555593
 800cc24:	3fe55555 	.word	0x3fe55555
 800cc28:	d078c69f 	.word	0xd078c69f
 800cc2c:	3fc39a09 	.word	0x3fc39a09
 800cc30:	1d8e78af 	.word	0x1d8e78af
 800cc34:	3fcc71c5 	.word	0x3fcc71c5
 800cc38:	9997fa04 	.word	0x9997fa04
 800cc3c:	3fd99999 	.word	0x3fd99999
 800cc40:	0006b851 	.word	0x0006b851

0800cc44 <nan>:
 800cc44:	2000      	movs	r0, #0
 800cc46:	4901      	ldr	r1, [pc, #4]	; (800cc4c <nan+0x8>)
 800cc48:	4770      	bx	lr
 800cc4a:	46c0      	nop			; (mov r8, r8)
 800cc4c:	7ff80000 	.word	0x7ff80000

0800cc50 <_init>:
 800cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc52:	46c0      	nop			; (mov r8, r8)
 800cc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc56:	bc08      	pop	{r3}
 800cc58:	469e      	mov	lr, r3
 800cc5a:	4770      	bx	lr

0800cc5c <_fini>:
 800cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5e:	46c0      	nop			; (mov r8, r8)
 800cc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc62:	bc08      	pop	{r3}
 800cc64:	469e      	mov	lr, r3
 800cc66:	4770      	bx	lr

0800cc68 <__FLASH_Program_Fast_veneer>:
 800cc68:	b401      	push	{r0}
 800cc6a:	4802      	ldr	r0, [pc, #8]	; (800cc74 <__FLASH_Program_Fast_veneer+0xc>)
 800cc6c:	4684      	mov	ip, r0
 800cc6e:	bc01      	pop	{r0}
 800cc70:	4760      	bx	ip
 800cc72:	bf00      	nop
 800cc74:	20000159 	.word	0x20000159

Disassembly of section .data:

20000000 <bfmin_is_first_interrupt>:
20000000:	00000001                                ....

20000004 <str>:
20000004:	7265656c 00000000 00000000 00000000     leer............
	...

200000cc <u_ref>:
200000cc:	                                         ..

200000ce <version>:
200000ce:	                                         ..

200000d0 <dac_value>:
200000d0:	                                         ..

200000d2 <ampli>:
200000d2:	                                         @.

200000d4 <life_mean>:
200000d4:	                                         d.

200000d6 <life_flash>:
200000d6:	                                         d.

200000d8 <dly>:
200000d8:	0000000f                                ....

200000dc <dac_min>:
200000dc:	000001f4                                ....

200000e0 <printversion>:
200000e0:	00000003 00000000                       ........

200000e8 <SystemCoreClock>:
200000e8:	00f42400                                .$..

200000ec <uwTickPrio>:
200000ec:	00000004                                ....

200000f0 <uwTickFreq>:
200000f0:	00000001                                ....

200000f4 <_impure_ptr>:
200000f4:	200000f8                                ... 

200000f8 <impure_data>:
	...

20000158 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000158:	b580      	push	{r7, lr}
2000015a:	b088      	sub	sp, #32
2000015c:	af00      	add	r7, sp, #0
2000015e:	6078      	str	r0, [r7, #4]
20000160:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000162:	231f      	movs	r3, #31
20000164:	18fb      	adds	r3, r7, r3
20000166:	2200      	movs	r2, #0
20000168:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000016a:	687b      	ldr	r3, [r7, #4]
2000016c:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000016e:	683b      	ldr	r3, [r7, #0]
20000170:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000172:	4b1a      	ldr	r3, [pc, #104]	; (200001dc <FLASH_Program_Fast+0x84>)
20000174:	695a      	ldr	r2, [r3, #20]
20000176:	4b19      	ldr	r3, [pc, #100]	; (200001dc <FLASH_Program_Fast+0x84>)
20000178:	2180      	movs	r1, #128	; 0x80
2000017a:	02c9      	lsls	r1, r1, #11
2000017c:	430a      	orrs	r2, r1
2000017e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000180:	f3ef 8310 	mrs	r3, PRIMASK
20000184:	60fb      	str	r3, [r7, #12]
  return(result);
20000186:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000188:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000018a:	b672      	cpsid	i
}
2000018c:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000018e:	e00f      	b.n	200001b0 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000190:	697a      	ldr	r2, [r7, #20]
20000192:	69bb      	ldr	r3, [r7, #24]
20000194:	6812      	ldr	r2, [r2, #0]
20000196:	601a      	str	r2, [r3, #0]
    src += 4U;
20000198:	697b      	ldr	r3, [r7, #20]
2000019a:	3304      	adds	r3, #4
2000019c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000019e:	69bb      	ldr	r3, [r7, #24]
200001a0:	3304      	adds	r3, #4
200001a2:	61bb      	str	r3, [r7, #24]
    index++;
200001a4:	211f      	movs	r1, #31
200001a6:	187b      	adds	r3, r7, r1
200001a8:	781a      	ldrb	r2, [r3, #0]
200001aa:	187b      	adds	r3, r7, r1
200001ac:	3201      	adds	r2, #1
200001ae:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200001b0:	231f      	movs	r3, #31
200001b2:	18fb      	adds	r3, r7, r3
200001b4:	781b      	ldrb	r3, [r3, #0]
200001b6:	2b3f      	cmp	r3, #63	; 0x3f
200001b8:	d9ea      	bls.n	20000190 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200001ba:	46c0      	nop			; (mov r8, r8)
200001bc:	4b07      	ldr	r3, [pc, #28]	; (200001dc <FLASH_Program_Fast+0x84>)
200001be:	691a      	ldr	r2, [r3, #16]
200001c0:	2380      	movs	r3, #128	; 0x80
200001c2:	025b      	lsls	r3, r3, #9
200001c4:	4013      	ands	r3, r2
200001c6:	d1f9      	bne.n	200001bc <FLASH_Program_Fast+0x64>
200001c8:	693b      	ldr	r3, [r7, #16]
200001ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200001cc:	68bb      	ldr	r3, [r7, #8]
200001ce:	f383 8810 	msr	PRIMASK, r3
}
200001d2:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200001d4:	46c0      	nop			; (mov r8, r8)
200001d6:	46bd      	mov	sp, r7
200001d8:	b008      	add	sp, #32
200001da:	bd80      	pop	{r7, pc}
200001dc:	40022000 	.word	0x40022000
